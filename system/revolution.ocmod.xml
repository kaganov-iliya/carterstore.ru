<?xml version="1.0" encoding="utf-8"?>
<modification>
	<name>Шаблон Revolution</name>
	<code>revolution</code>
	<version>4.0.3</version>
	<author>pikitos</author>
	<link></link>

	<file path="admin/model/catalog/manufacturer.php">
		<operation error="skip">
			<search><![CDATA[$sql .= " AND name LIKE '" . $this->db->escape($data['filter_name']) . "%'";]]></search>
			<add position="replace"><![CDATA[$sql .= " AND c.name LIKE '" . $this->db->escape($data['filter_name']) . "%'";]]></add>
		</operation>
	</file>
	<file path="admin/controller/catalog/information.php">
		<operation>
			<search><![CDATA[
				$data['entry_bottom']
			]]></search>
			<add position="before"><![CDATA[
				$data['entry_top'] = $this->language->get('entry_top');
				$data['help_top'] = $this->language->get('help_top');
				$data['entry_top2'] = $this->language->get('entry_top2');
				$data['help_top2'] = $this->language->get('help_top2');
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[
				if (isset($this->request->post['bottom'])) {
			]]></search>
			<add position="before"><![CDATA[
				if (isset($this->request->post['top'])) {
					$data['top'] = $this->request->post['top'];
				} elseif (!empty($information_info)) {
					$data['top'] = $information_info['top'];
				} else {
					$data['top'] = 0;
				}
				if (isset($this->request->post['top2'])) {
					$data['top2'] = $this->request->post['top2'];
				} elseif (!empty($information_info)) {
					$data['top2'] = $information_info['top2'];
				} else {
					$data['top2'] = 0;
				}
			]]></add>
		</operation>
	</file>
	<file path="admin/model/catalog/information.php">
		<operation>
			<search><![CDATA[
				$this->db->query("INSERT INTO " . DB_PREFIX . "information SET sort_order = '" . (int)$data['sort_order'] . "', bottom = '" . (isset($data['bottom']) ? (int)$data['bottom'] : 0) . "', status = '" . (int)$data['status'] . "'");
			]]></search>
			<add position="replace"><![CDATA[
				$this->db->query("INSERT INTO " . DB_PREFIX . "information SET sort_order = '" . (int)$data['sort_order'] . "', top = '" . (isset($data['top']) ? (int)$data['top'] : 0) . "', top2 = '" . (isset($data['top2']) ? (int)$data['top2'] : 0) . "', bottom = '" . (isset($data['bottom']) ? (int)$data['bottom'] : 0) . "', status = '" . (int)$data['status'] . "'");
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[
				$this->db->query("UPDATE " . DB_PREFIX . "information SET sort_order = '" . (int)$data['sort_order'] . "', bottom = '" . (isset($data['bottom']) ? (int)$data['bottom'] : 0) . "', status = '" . (int)$data['status'] . "' WHERE information_id = '" . (int)$information_id . "'");
			]]></search>
			<add position="replace"><![CDATA[
				$this->db->query("UPDATE " . DB_PREFIX . "information SET sort_order = '" . (int)$data['sort_order'] . "', top = '" . (isset($data['top']) ? (int)$data['top'] : 0) . "', top2 = '" . (isset($data['top2']) ? (int)$data['top2'] : 0) . "', bottom = '" . (isset($data['bottom']) ? (int)$data['bottom'] : 0) . "', status = '" . (int)$data['status'] . "' WHERE information_id = '" . (int)$information_id . "'");
			]]></add>
		</operation>
	</file>
	<file path="admin/language/*/catalog/information.php">
		<operation>
			<search><![CDATA[$_['entry_bottom']]]></search>
			<add position="before"><![CDATA[
				$_['entry_top'] = 'Шапка:';
				$_['help_top'] = 'Показать в шапке';
				$_['entry_top2'] = 'Меню:';
				$_['help_top2'] = 'Показать в меню';
			]]></add>
		</operation>
	</file>
	<file path="admin/view/template/catalog/information_form.tpl">
		<operation>
			<search offset="2"><![CDATA[
				<label class="col-sm-2 control-label" for="input-bottom">
			]]></search>
			<add position="before" offset="1"><![CDATA[
				<div class="form-group">
					<label class="col-sm-2 control-label" for="input-top"><span data-toggle="tooltip" title="<?php echo $help_top; ?>"><?php echo $entry_top; ?></span></label>
					<div class="col-sm-10">
						<div class="checkbox">
							<label>
							<?php if ($top) { ?>
							<input type="checkbox" name="top" value="1" checked="checked" id="input-top" />
							<?php } else { ?>
							<input type="checkbox" name="top" value="1" id="input-top" />
							<?php } ?>
							&nbsp; </label>
						</div>
					</div>
				</div>
				<div class="form-group">
					<label class="col-sm-2 control-label" for="input-top2"><span data-toggle="tooltip" title="<?php echo $help_top2; ?>"><?php echo $entry_top2; ?></span></label>
					<div class="col-sm-10">
						<div class="checkbox">
							<label>
							<?php if ($top2) { ?>
							<input type="checkbox" name="top2" value="1" checked="checked" id="input-top2" />
							<?php } else { ?>
							<input type="checkbox" name="top2" value="1" id="input-top2" />
							<?php } ?>
							&nbsp; </label>
						</div>
					</div>
				</div>
			]]></add>
		</operation>
	</file>
	<file path="admin/controller/catalog/option.php">
		<operation>
			<search><![CDATA[$data['languages']]]></search>
			<add position="before"><![CDATA[
				$this->load->language('revolution/adminmenu');
				$data['entry_rev_opt_image'] = $this->language->get('entry_rev_opt_image');
				if (isset($this->request->post['opt_image'])) {
					$data['opt_image'] = $this->request->post['opt_image'];
				} elseif (!empty($option_info)) {
					$data['opt_image'] = $option_info['opt_image'];
				} else {
					$data['opt_image'] = 0;
				}
			]]></add>
		</operation>
	</file>
	<file path="admin/model/catalog/option.php">
		<operation>
			<search><![CDATA[type = '" . $this->db->escape($data['type']) . "',]]></search>
			<add position="replace"><![CDATA[type = '" . $this->db->escape($data['type']) . "', `opt_image` = '" . (isset($data['opt_image']) ? (int)$data['opt_image'] : 0) . "',]]></add>
		</operation>
	</file>
	<file path="admin/view/template/catalog/option_form.tpl">
		<operation>
			<search><![CDATA[<table id="option-value"]]></search>
			<add position="before"><![CDATA[
				<div class="form-group opt_image">
					<label class="col-sm-2 control-label" for="input-opt_image"><?php echo $entry_rev_opt_image; ?></label>
					<div class="col-sm-10">
					  <div class="checkbox">
						<label>
						  <?php if ($opt_image) { ?>
						  <input type="checkbox" name="opt_image" value="1" checked="checked" id="input-opt_image" />
						  <?php } else { ?>
						  <input type="checkbox" name="opt_image" value="1" id="input-opt_image" />
						  <?php } ?>
						  &nbsp; </label>
					  </div>
					</div>
				</div>
				<script type="text/javascript"><!--
				$('select[name=\'type\']').on('change', function() {
					if (this.value == 'radio' || this.value == 'checkbox' || this.value == 'image') {
						$('.opt_image').show();
					} else {
						$('.opt_image').hide();
					}
				});
				//--></script>
			]]></add>
		</operation>
	</file>
	<file path="admin/controller/common/{column_left,menu}.php">
		<operation error="skip">
			<search><![CDATA[$this->load->language('common/menu');]]></search>
			<add position="after"><![CDATA[
				$this->load->language('revolution/adminmenu');
				$data['text_revtheme'] = $this->language->get('text_revtheme');
				$data['text_revtheme_setting'] = $this->language->get('text_revtheme_setting');
				$data['revtheme_setting'] = $this->url->link('revolution/revtheme', 'token=' . $this->session->data['token'], 'SSL');
				$data['revfilter'] = $this->url->link('revolution/revfilter', 'token=' . $this->session->data['token'], 'SSL');
				$data['producttab'] = $this->url->link('revolution/revtabs', 'token=' . $this->session->data['token'], 'SSL');
				$data['producttextblocks'] = $this->url->link('revolution/revtextblocks', 'token=' . $this->session->data['token'], 'SSL');
				$data['revpopupphone'] = $this->url->link('revolution/revpopupphone', 'token=' . $this->session->data['token'], 'SSL');
				$data['revsubscribe'] = $this->url->link('revolution/revsubscribe', 'token=' . $this->session->data['token'], 'SSL');
				$data['text_revblog'] = $this->language->get('text_revblog');
				$data['text_revblog_list'] = $this->language->get('text_revblog_list');
				$data['text_revblog_category_list'] = $this->language->get('text_revblog_category_list');
				$data['text_revblog_setting'] = $this->language->get('text_revblog_setting');
				$data['revblog_list'] = $this->url->link('revolution/revblog', 'token=' . $this->session->data['token'], 'SSL');
				$data['revblog_category_list'] = $this->url->link('revolution/revblogcategory', 'token=' . $this->session->data['token'], 'SSL');
				$data['revblog_setting'] = $this->url->link('revolution/revblog_setting', 'token=' . $this->session->data['token'], 'SSL');
				$data['text_revfilter'] = $this->language->get('text_revfilter');
				$data['text_product_tab'] = $this->language->get('text_product_tab');
				$data['text_product_textblocks'] = $this->language->get('text_product_textblocks');
				$data['text_revpopupphone'] = $this->language->get('text_revpopupphone');
				$data['text_revsubscribe'] = $this->language->get('text_revsubscribe');
				$data['text_product_review'] = $this->language->get('text_product_review');
				$data['text_store_review'] = $this->language->get('text_store_review');
				$data['href_store_review'] = $this->url->link('revolution/revreview', 'token=' . $this->session->data['token'], 'SSL');
				$data['text_revanswers'] = $this->language->get('text_revanswers');
				$data['href_revanswers'] = $this->url->link('revolution/revanswers', 'token=' . $this->session->data['token'], 'SSL');
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$this->load->model('tool/image');]]></search>
			<add position="after"><![CDATA[
				$this->load->language('revolution/adminmenu');
				$data['text_revtheme'] = $this->language->get('text_revtheme');
				$data['text_revtheme_setting'] = $this->language->get('text_revtheme_setting');
				$data['revtheme_setting'] = $this->url->link('revolution/revtheme', 'token=' . $this->session->data['token'], 'SSL');
				$data['revfilter'] = $this->url->link('revolution/revfilter', 'token=' . $this->session->data['token'], 'SSL');
				$data['producttab'] = $this->url->link('revolution/revtabs', 'token=' . $this->session->data['token'], 'SSL');
				$data['producttextblocks'] = $this->url->link('revolution/revtextblocks', 'token=' . $this->session->data['token'], 'SSL');
				$data['revpopupphone'] = $this->url->link('revolution/revpopupphone', 'token=' . $this->session->data['token'], 'SSL');
				$data['revsubscribe'] = $this->url->link('revolution/revsubscribe', 'token=' . $this->session->data['token'], 'SSL');
				$data['text_revblog'] = $this->language->get('text_revblog');
				$data['text_revblog_list'] = $this->language->get('text_revblog_list');
				$data['text_revblog_category_list'] = $this->language->get('text_revblog_category_list');
				$data['text_revblog_setting'] = $this->language->get('text_revblog_setting');
				$data['revblog_list'] = $this->url->link('revolution/revblog', 'token=' . $this->session->data['token'], 'SSL');
				$data['revblog_category_list'] = $this->url->link('revolution/revblogcategory', 'token=' . $this->session->data['token'], 'SSL');
				$data['revblog_setting'] = $this->url->link('revolution/revblog_setting', 'token=' . $this->session->data['token'], 'SSL');
				$data['text_revfilter'] = $this->language->get('text_revfilter');
				$data['text_product_tab'] = $this->language->get('text_product_tab');
				$data['text_product_textblocks'] = $this->language->get('text_product_textblocks');
				$data['text_revpopupphone'] = $this->language->get('text_revpopupphone');
				$data['text_revsubscribe'] = $this->language->get('text_revsubscribe');
				$data['text_product_review'] = $this->language->get('text_product_review');
				$data['text_store_review'] = $this->language->get('text_store_review');
				$data['href_store_review'] = $this->url->link('revolution/revreview', 'token=' . $this->session->data['token'], 'SSL');
				$data['text_revanswers'] = $this->language->get('text_revanswers');
				$data['href_revanswers'] = $this->url->link('revolution/revanswers', 'token=' . $this->session->data['token'], 'SSL');
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[if ($this->user->hasPermission('access', 'catalog/information'))]]></search>
			<add position="before"><![CDATA[
				if ($this->user->hasPermission('access', 'revolution/revreview')) {
					$catalog[] = array(
						'name'	   => $this->language->get('text_store_review'),
						'href'     => $this->url->link('revolution/revreview', 'token=' . $this->session->data['token'], true),
						'children' => array()		
					);		
				}
			]]></add>
		</operation>
	</file>
	<file path="admin/language/{ru-ru,russian}/common/{column_left,menu}.php">
        <operation error="skip">
            <search><![CDATA[$_['text_user']]]></search>
            <add position="before"><![CDATA[
				$_['text_product_review'] = 'Отзывы о товарах';
				$_['text_store_review'] = 'Отзывы о магазине';
            ]]></add>
        </operation>
    </file>
	<file path="admin/view/template/common/{column_left,menu}.tpl">
		<operation error="skip">
			<search><![CDATA[<ul id="menu">]]></search>
			<add position="after"><![CDATA[
				<li id="revtheme"><a class="parent"><i class="fa fa-registered fa-fw"></i> <span><?php echo $text_revtheme; ?></span></a>
					<ul>
						<li><a href="<?php echo $revtheme_setting; ?>"><?php echo $text_revtheme_setting; ?></a></li>
						<li><a href="<?php echo $revfilter; ?>"><?php echo $text_revfilter; ?></a></li>
						<li><a href="<?php echo $producttab; ?>"><?php echo $text_product_tab; ?></a></li>
						<li><a href="<?php echo $producttextblocks; ?>"><?php echo $text_product_textblocks; ?></a></li>
						<li><a href="<?php echo $revpopupphone; ?>"><?php echo $text_revpopupphone; ?></a></li>
						<li><a href="<?php echo $href_revanswers; ?>"><?php echo $text_revanswers; ?></a></li>
						<li><a href="<?php echo $revsubscribe; ?>"><?php echo $text_revsubscribe; ?></a></li>
						<li id="revblog"><a class="parent"><span><?php echo $text_revblog; ?></span></a>
							<ul>
								<li><a href="<?php echo $revblog_setting; ?>"><?php echo $text_revblog_setting; ?></a></li>
								<li><a href="<?php echo $revblog_category_list; ?>"><?php echo $text_revblog_category_list; ?></a></li>
								<li><a href="<?php echo $revblog_list; ?>"><?php echo $text_revblog_list; ?></a></li>
							</ul>
						</li>
					</ul>
				</li>
			]]></add>
		</operation>
		<operation error="skip">
            <search><![CDATA[<li><a href="<?php echo $review; ?>"><?php echo $text_review; ?></a></li>]]></search>
			<add position="replace"><![CDATA[
				<li><a class="parent"><span><?php echo $text_review; ?></span></a>
					<ul>
						<li><a href="<?php echo $review; ?>"><?php echo $text_product_review; ?></a></li>
						<li><a href="<?php echo $href_store_review; ?>"><?php echo $text_store_review; ?></a></li>
					</ul>
				</li>
            ]]></add>
        </operation>
	</file>
	<file path="catalog/controller/{common,startup}/seo_url.php">
		<operation error="skip">
			<search><![CDATA[if ($url[0] == 'information_id') {]]></search>
			<add position="before"><![CDATA[
				if ($url[0] == 'revblog_id') {
					$this->request->get['revblog_id'] = $url[1];
				}
				if ($url[0] == 'revblog_category_id') {
					if (!isset($this->request->get['revblog_category_id'])) {
						$this->request->get['revblog_category_id'] = $url[1];
					} else {
						$this->request->get['revblog_category_id'] .= '_' . $url[1];
					}
				}
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$url[0] != 'information_id']]></search>
			<add position="replace"><![CDATA[$url[0] != 'revblog_category_id' && $url[0] != 'revblog_id' && $url[0] != 'information_id']]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[} elseif (isset($this->request->get['information_id'])) {]]></search>
			<add position="before"><![CDATA[
				} elseif (isset($this->request->get['revblog_id'])) {
					$this->request->get['route'] = 'revolution/revblog_blog';
				} elseif (isset($this->request->get['revblog_category_id'])) {
					$this->request->get['route'] = 'revolution/revblog_category';
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[($data['route'] == 'information/information' && $key == 'information_id')]]></search>
			<add position="replace"><![CDATA[($data['route'] == 'revolution/revblog_blog' && $key == 'revblog_id') || ($data['route'] == 'information/information' && $key == 'information_id')]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[} elseif ($key == 'path') {]]></search>
			<add position="before"><![CDATA[
				} elseif ($key == 'revblog_category_id') {
					$categories = explode('_', $value);
					foreach ($categories as $category) {
						$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "url_alias WHERE `query` = 'revblog_category_id=" . (int)$category . "'");
						if ($query->num_rows && $query->row['keyword']) {
							$url .= '/' . $query->row['keyword'];
						} else {
							$url = '';
							break;
						}
					}
					unset ($data[$key]);
			]]></add>
		</operation>
    </file>
    <file path="catalog/controller/{common,startup}/seo_pro.php">
		<operation error="skip">
			<search><![CDATA[if ($url[0] == 'category_id') {]]></search>
			<add position="before"><![CDATA[
				if ($url[0] == 'revblog_category_id') {
					if (!isset($this->request->get['revblog_category_id'])) {
						$this->request->get['revblog_category_id'] = $url[1];
					} else {
						$this->request->get['revblog_category_id'] .= '_' . $url[1];
					}
				} else
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[if (isset($this->request->get['product_id'])) {]]></search>
			<add position="before"><![CDATA[
				if (isset($this->request->get['revblog_id'])) {
					$this->request->get['route'] = 'revolution/revblog_blog';
					if (!isset($this->request->get['revblog_category_id'])) {
						$path = $this->getPathByRevBlogBlog($this->request->get['revblog_id']);
						if ($path) $this->request->get['revblog_category_id'] = $path;
					}
				} elseif (isset($this->request->get['revblog_category_id'])) {
					$this->request->get['route'] = 'revolution/revblog_category';
				} else
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[case 'product/product':]]></search>
			<add position="before"><![CDATA[
				case 'revolution/revblog_blog':
					if (isset($data['revblog_id'])) {
						$tmp = $data;
						$data = array();
						$data['revblog_category_id'] = $this->getPathByRevBlogBlog($tmp['revblog_id']);
						if (!$data['revblog_category_id']) return $link;
						$data['revblog_id'] = $tmp['revblog_id'];
					}
					break;
				case 'revolution/revblog_category':
					if (isset($data['revblog_category_id'])) {
						$category = explode('_', $data['revblog_category_id']);
						$category = end($category);
						$data['revblog_category_id'] = $this->getPathByRevBlogCategory($category);
						if (!$data['revblog_category_id']) return $link;
					}
					break;
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[case 'product_id':]]></search>
			<add position="before"><![CDATA[
				case 'revblog_category_id':
					$categories = explode('_', $value);
					foreach($categories as $category) {
						$queries[] = 'revblog_category_id=' . $category;
					}
					unset($data[$key]);
					break;
				case 'revblog_id':
				case 'revblog_category_id':
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[private function getPathByProduct($product_id) {]]></search>
			<add position="before"><![CDATA[
				private function getPathByRevBlogBlog($revblog_id) {
					$revblog_id = (int)$revblog_id;
					if ($revblog_id < 1) return false;
					static $path = null;
					if (!isset($path)) {
						$path = $this->cache->get('revblog_blog.seopath');
						if (!isset($path)) $path = array();
					}
					if (!isset($path[$revblog_id])) {
						$query = $this->db->query("SELECT category_id FROM " . DB_PREFIX . "revblog_to_category WHERE revblog_id = '" . $revblog_id . "' ORDER BY main_category DESC LIMIT 1");
						$path[$revblog_id] = $this->getPathByRevBlogCategory($query->num_rows ? (int)$query->row['category_id'] : 0);
						$this->cache->set('revblog_blog.seopath', $path);
					}
					return $path[$revblog_id];
				}

				private function getPathByRevBlogCategory($category_id) {
					$category_id = (int)$category_id;
					if ($category_id < 1) return false;
					static $path = null;
					if (!isset($path)) {
						$path = $this->cache->get('revblog_category.seopath');
						if (!isset($path)) $path = array();
					}
					if (!isset($path[$category_id])) {
						$max_level = 5;
						$sql = "SELECT CONCAT_WS('_'";
						for ($i = $max_level-1; $i >= 0; --$i) {
							$sql .= ",t$i.category_id";
						}
						$sql .= ") AS path FROM " . DB_PREFIX . "revblog_category t0";
						for ($i = 1; $i < $max_level; ++$i) {
							$sql .= " LEFT JOIN " . DB_PREFIX . "revblog_category t$i ON (t$i.category_id = t" . ($i-1) . ".parent_id)";
						}
						$sql .= " WHERE t0.category_id = '" . $category_id . "'";
						$query = $this->db->query($sql);
						$path[$category_id] = $query->num_rows ? $query->row['path'] : false;
						$this->cache->set('revblog_category.seopath', $path);
					}
					return $path[$category_id];
				}
			]]></add>
		</operation>
    </file>
	<file path="admin/controller/marketing/contact.php">
		<operation>
			<search><![CDATA[case 'customer_all':]]></search>
			<add position="before"><![CDATA[
				case 'revsubscribe':
					$customer_data = array(
						'start'   => ($page - 1) * 10,
						'limit'   => 10
					);
					$this->load->model('revolution/revsubscribe');
					$email_total =	$this->model_revolution_revsubscribe->getTotalSubscriptions();
					$results = $this->model_revolution_revsubscribe->viewsubscribers($customer_data);
					foreach ($results as $result) {
						$emails[] = $result['email'];
					}						
					break;
			]]></add>
		</operation>
		<operation>
			<search ><![CDATA[$message .= '  <body>' . html_entity_decode($this->request->post['message'], ENT_QUOTES, 'UTF-8') . '</body>' . "\n";]]></search>
			<add position="replace"><![CDATA[
				$message .= '  <body>' . html_entity_decode($this->request->post['message'].'UNS_UNS', ENT_QUOTES, 'UTF-8') . '</body>' . "\n";
			]]></add>
		</operation>		
		<operation>
			<search><![CDATA[foreach ($emails as $email) {]]></search>
			<add position="after"><![CDATA[
				$unsubscribe = '';
				if ($this->request->post['to'] == 'revsubscribe') {
					$unsubscribe = '<br /><small><a href="'.HTTP_CATALOG.'index.php?route=revolution/revsubscribe/unsubscribecustomer&email='.base64_encode($email).'" target="_blank">Отписаться от рассылки</a></small>';
				 }
			]]></add>
		</operation>	
		<operation>
			<search><![CDATA[$mail->setHtml($message);]]></search>
			<add position="replace"><![CDATA[
				$mail->setHtml(str_replace('UNS_UNS',$unsubscribe,$message));
			]]></add>
		</operation>
	</file>
	<file path="admin/view/template/marketing/contact.tpl">
		<operation>
			<search><![CDATA[<option value="newsletter"><?php echo $text_newsletter; ?></option>]]></search>
			<add  position="before"><![CDATA[
                <option value="revsubscribe">Подписчики с формы на сайте</option>
			]]></add>
		</operation>
	</file>
	<file path="admin/controller/catalog/category.php">
        <operation>
            <search><![CDATA[$this->load->model('tool/image');]]></search>
            <add position="before"><![CDATA[
				if (isset($this->request->post['image2'])) {
					$data['image2'] = $this->request->post['image2'];
				} elseif (!empty($category_info)) {
					$data['image2'] = $category_info['image2'];
				} else {
					$data['image2'] = '';
				}
            ]]></add>
        </operation>
		<operation>
            <search><![CDATA[$data['placeholder']]]></search>
            <add position="before"><![CDATA[
				if (isset($this->request->post['image2']) && file_exists(DIR_IMAGE . $this->request->post['image2'])) {
					$data['thumb2'] = $this->model_tool_image->resize($this->request->post['image2'], 100, 100);
				} elseif (!empty($category_info) && $category_info['image2'] && file_exists(DIR_IMAGE . $category_info['image2'])) {
					$data['thumb2'] = $this->model_tool_image->resize($category_info['image2'], 100, 100);
				} else {
					$data['thumb2'] = $this->model_tool_image->resize('no_image.png', 100, 100);
				}
				if (isset($this->request->post['category_icontype'])) {
					$data['category_icontype'] = $this->request->post['category_icontype'];
				} elseif (!empty($category_info)) {
					$data['category_icontype'] = $category_info['category_icontype'];
				} else {
					$data['category_icontype'] = false;
				}
				
				if (isset($this->request->post['category_icon'])) {
					$data['category_icon'] = $this->request->post['category_icon'];
				} elseif (!empty($category_info)) {
					$data['category_icon'] = $category_info['category_icon'];
				} else {
					$data['category_icon'] = 'fa none';
				}
				
				if (isset($this->request->post['category_image'])) {
					$data['category_image'] = $this->request->post['category_image'];
				} elseif (!empty($category_info)) {
					$data['category_image'] = $category_info['category_image'];
				} else {
					$data['category_image'] = 'no_image.png';
				}
				if (isset($this->request->post['category_image']) && file_exists(DIR_IMAGE . $this->request->post['category_image'])) {
					$data['category_image_thumb'] = $this->model_tool_image->resize($this->request->post['category_image'], 25, 25);
				} elseif (!empty($category_info) && $category_info['category_image'] && file_exists(DIR_IMAGE . $category_info['category_image'])) {
					$data['category_image_thumb'] = $this->model_tool_image->resize($category_info['category_image'], 25, 25);
				} else {
					$data['category_image_thumb'] = $this->model_tool_image->resize('no_image.png', 25, 25);
				}
            ]]></add>
        </operation>
    </file>
	<file path="admin/model/catalog/category.php">
        <operation>
            <search><![CDATA[if (isset($data['image'])) {]]></search>
            <add position="before"><![CDATA[
				if (isset($data['image2'])) {
					$this->db->query("UPDATE " . DB_PREFIX . "category SET image2 = '" . $this->db->escape($data['image2']) . "' WHERE category_id = '" . (int)$category_id . "'");
				}
				if (isset($data['category_icontype'])) {
					$this->db->query("UPDATE " . DB_PREFIX . "category SET category_icontype = '" . $this->db->escape($data['category_icontype']) . "' WHERE category_id = '" . (int)$category_id . "'");
				}
				if (isset($data['category_icon'])) {
					$this->db->query("UPDATE " . DB_PREFIX . "category SET category_icon = '" . $this->db->escape($data['category_icon']) . "' WHERE category_id = '" . (int)$category_id . "'");
				}
				if (isset($data['category_image'])) {
					$this->db->query("UPDATE " . DB_PREFIX . "category SET category_image = '" . $this->db->escape($data['category_image']) . "' WHERE category_id = '" . (int)$category_id . "'");
				}
            ]]></add>
        </operation>
    </file>	
	<file path="admin/view/template/catalog/category_form.tpl">
        <operation>
            <search><![CDATA[<label class="col-sm-2 control-label" for="input-top">]]></search>
            <add position="before" offset="1"><![CDATA[
				<div class="form-group">
					<label class="col-sm-2 control-label">Изображение в выпадающем меню:</label>
					<div class="col-sm-10"><a href="" id="thumb-image2" data-toggle="image" class="img-thumbnail"><img src="<?php echo $thumb2; ?>" alt="" title="" data-placeholder="<?php echo $placeholder; ?>" /></a>
					  <input type="hidden" name="image2" value="<?php echo $image2; ?>" id="input-image2" />
					</div>
				</div>
				<div class="form-group">
					<div id="form-revolution" class="form-group">
						<div class="form-group" style="padding:0">
							<label class="col-sm-2 control-label">Иконка в меню:</label>
							<div class="col-sm-2">
								<label class="radio-inline">
									<input type="radio" onchange="$(this).parent().parent().parent().find('.zavisimost_ico').show().next().hide();" name="category_icontype" value="1" <?php if ($category_icontype) { echo 'checked'; } ?> /><span>Иконка</span>
								</label>
								<label class="radio-inline">
									<input type="radio" onchange="$(this).parent().parent().parent().find('.zavisimost_ico').hide().next().show();" name="category_icontype" value="0" <?php if (!$category_icontype) { echo 'checked';} ?> /><span>Картинка</span>
								</label>	
							</div>
							<div class="col-sm-2 zavisimost_ico" <?php if (!$category_icontype) { ?> style="display: none" <?php } ?>>
								<span class="fazavisimost fa_icon form-control width_initial" id="icon_category" onclick="fa_icons($(this).attr('id'))"><i class="<?php echo $category_icon; ?>"></i></span>
								<input type="hidden" name="category_icon" value="<?php echo $category_icon; ?>" id="input-icon_category" />
							</div>
							<div class="col-sm-2" <?php if ($category_icontype) { ?> style="display: none" <?php } ?>>
								<a href="" id="thumb-image_category" data-toggle="image" class="img-thumbnail width_initial"><img style="width:25px;" src="<?php echo $category_image_thumb; ?>" alt="" title="" /></a>
								<input type="hidden" name="category_image" value="<?php echo $category_image; ?>" id="category_image" />
							</div>
						</div>
					<input type="hidden" class="target" value="" />
					<input type="hidden" class="class" value="" />
					<div class="fa_icons">
					<div class="fontawesome-icon-list">
					<div class="col-xs-2" style="margin-bottom:5px;margin-left:-20px;float:initial;"><i class="fa none" aria-hidden="true">Не использовать иконку</i></div>
					<div class="col-xs-1"><i class="fa fa-500px"></i></div>
					<div class="col-xs-1"><i class="fa fa-address-book"></i></div>
					<div class="col-xs-1"><i class="fa fa-address-book-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-address-card"></i></div>
					<div class="col-xs-1"><i class="fa fa-address-card-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-adjust"></i></div>
					<div class="col-xs-1"><i class="fa fa-adn"></i></div>
					<div class="col-xs-1"><i class="fa fa-align-center"></i></div>
					<div class="col-xs-1"><i class="fa fa-align-justify"></i></div>
					<div class="col-xs-1"><i class="fa fa-align-left"></i></div>
					<div class="col-xs-1"><i class="fa fa-align-right"></i></div>
					<div class="col-xs-1"><i class="fa fa-amazon"></i></div>
					<div class="col-xs-1"><i class="fa fa-ambulance"></i></div>
					<div class="col-xs-1"><i class="fa fa-american-sign-language-interpreting"></i></div>
					<div class="col-xs-1"><i class="fa fa-anchor"></i></div>
					<div class="col-xs-1"><i class="fa fa-android"></i></div>
					<div class="col-xs-1"><i class="fa fa-angellist"></i></div>
					<div class="col-xs-1"><i class="fa fa-angle-double-down"></i></div>
					<div class="col-xs-1"><i class="fa fa-angle-double-left"></i></div>
					<div class="col-xs-1"><i class="fa fa-angle-double-right"></i></div>
					<div class="col-xs-1"><i class="fa fa-angle-double-up"></i></div>
					<div class="col-xs-1"><i class="fa fa-angle-down"></i></div>
					<div class="col-xs-1"><i class="fa fa-angle-left"></i></div>
					<div class="col-xs-1"><i class="fa fa-angle-right"></i></div>
					<div class="col-xs-1"><i class="fa fa-angle-up"></i></div>
					<div class="col-xs-1"><i class="fa fa-apple"></i></div>
					<div class="col-xs-1"><i class="fa fa-archive"></i></div>
					<div class="col-xs-1"><i class="fa fa-area-chart"></i></div>
					<div class="col-xs-1"><i class="fa fa-arrow-circle-down"></i></div>
					<div class="col-xs-1"><i class="fa fa-arrow-circle-left"></i></div>
					<div class="col-xs-1"><i class="fa fa-arrow-circle-o-down"></i></div>
					<div class="col-xs-1"><i class="fa fa-arrow-circle-o-left"></i></div>
					<div class="col-xs-1"><i class="fa fa-arrow-circle-o-right"></i></div>
					<div class="col-xs-1"><i class="fa fa-arrow-circle-o-up"></i></div>
					<div class="col-xs-1"><i class="fa fa-arrow-circle-right"></i></div>
					<div class="col-xs-1"><i class="fa fa-arrow-circle-up"></i></div>
					<div class="col-xs-1"><i class="fa fa-arrow-down"></i></div>
					<div class="col-xs-1"><i class="fa fa-arrow-left"></i></div>
					<div class="col-xs-1"><i class="fa fa-arrow-right"></i></div>
					<div class="col-xs-1"><i class="fa fa-arrow-up"></i></div>
					<div class="col-xs-1"><i class="fa fa-arrows"></i></div>
					<div class="col-xs-1"><i class="fa fa-arrows-alt"></i></div>
					<div class="col-xs-1"><i class="fa fa-arrows-h"></i></div>
					<div class="col-xs-1"><i class="fa fa-arrows-v"></i></div>
					<div class="col-xs-1"><i class="fa fa-asl-interpreting"></i></div>
					<div class="col-xs-1"><i class="fa fa-assistive-listening-systems"></i></div>
					<div class="col-xs-1"><i class="fa fa-asterisk"></i></div>
					<div class="col-xs-1"><i class="fa fa-at"></i></div>
					<div class="col-xs-1"><i class="fa fa-audio-description"></i></div>
					<div class="col-xs-1"><i class="fa fa-automobile"></i></div>
					<div class="col-xs-1"><i class="fa fa-backward"></i></div>
					<div class="col-xs-1"><i class="fa fa-balance-scale"></i></div>
					<div class="col-xs-1"><i class="fa fa-ban"></i></div>
					<div class="col-xs-1"><i class="fa fa-bandcamp"></i></div>
					<div class="col-xs-1"><i class="fa fa-bank"></i></div>
					<div class="col-xs-1"><i class="fa fa-bar-chart"></i></div>
					<div class="col-xs-1"><i class="fa fa-bar-chart-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-barcode"></i></div>
					<div class="col-xs-1"><i class="fa fa-bars"></i></div>
					<div class="col-xs-1"><i class="fa fa-bath"></i></div>
					<div class="col-xs-1"><i class="fa fa-bathtub"></i></div>
					<div class="col-xs-1"><i class="fa fa-battery"></i></div>
					<div class="col-xs-1"><i class="fa fa-battery-0"></i></div>
					<div class="col-xs-1"><i class="fa fa-battery-1"></i></div>
					<div class="col-xs-1"><i class="fa fa-battery-2"></i></div>
					<div class="col-xs-1"><i class="fa fa-battery-3"></i></div>
					<div class="col-xs-1"><i class="fa fa-battery-4"></i></div>
					<div class="col-xs-1"><i class="fa fa-battery-empty"></i></div>
					<div class="col-xs-1"><i class="fa fa-battery-full"></i></div>
					<div class="col-xs-1"><i class="fa fa-battery-half"></i></div>
					<div class="col-xs-1"><i class="fa fa-battery-quarter"></i></div>
					<div class="col-xs-1"><i class="fa fa-battery-three-quarters"></i></div>
					<div class="col-xs-1"><i class="fa fa-bed"></i></div>
					<div class="col-xs-1"><i class="fa fa-beer"></i></div>
					<div class="col-xs-1"><i class="fa fa-behance"></i></div>
					<div class="col-xs-1"><i class="fa fa-behance-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-bell"></i></div>
					<div class="col-xs-1"><i class="fa fa-bell-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-bell-slash"></i></div>
					<div class="col-xs-1"><i class="fa fa-bell-slash-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-bicycle"></i></div>
					<div class="col-xs-1"><i class="fa fa-binoculars"></i></div>
					<div class="col-xs-1"><i class="fa fa-birthday-cake"></i></div>
					<div class="col-xs-1"><i class="fa fa-bitbucket"></i></div>
					<div class="col-xs-1"><i class="fa fa-bitbucket-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-bitcoin"></i></div>
					<div class="col-xs-1"><i class="fa fa-black-tie"></i></div>
					<div class="col-xs-1"><i class="fa fa-blind"></i></div>
					<div class="col-xs-1"><i class="fa fa-bluetooth"></i></div>
					<div class="col-xs-1"><i class="fa fa-bluetooth-b"></i></div>
					<div class="col-xs-1"><i class="fa fa-bold"></i></div>
					<div class="col-xs-1"><i class="fa fa-bolt"></i></div>
					<div class="col-xs-1"><i class="fa fa-bomb"></i></div>
					<div class="col-xs-1"><i class="fa fa-book"></i></div>
					<div class="col-xs-1"><i class="fa fa-bookmark"></i></div>
					<div class="col-xs-1"><i class="fa fa-bookmark-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-braille"></i></div>
					<div class="col-xs-1"><i class="fa fa-briefcase"></i></div>
					<div class="col-xs-1"><i class="fa fa-btc"></i></div>
					<div class="col-xs-1"><i class="fa fa-bug"></i></div>
					<div class="col-xs-1"><i class="fa fa-building"></i></div>
					<div class="col-xs-1"><i class="fa fa-building-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-bullhorn"></i></div>
					<div class="col-xs-1"><i class="fa fa-bullseye"></i></div>
					<div class="col-xs-1"><i class="fa fa-bus"></i></div>
					<div class="col-xs-1"><i class="fa fa-buysellads"></i></div>
					<div class="col-xs-1"><i class="fa fa-cab"></i></div>
					<div class="col-xs-1"><i class="fa fa-calculator"></i></div>
					<div class="col-xs-1"><i class="fa fa-calendar"></i></div>
					<div class="col-xs-1"><i class="fa fa-calendar-check-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-calendar-minus-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-calendar-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-calendar-plus-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-calendar-times-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-camera"></i></div>
					<div class="col-xs-1"><i class="fa fa-camera-retro"></i></div>
					<div class="col-xs-1"><i class="fa fa-car"></i></div>
					<div class="col-xs-1"><i class="fa fa-caret-down"></i></div>
					<div class="col-xs-1"><i class="fa fa-caret-left"></i></div>
					<div class="col-xs-1"><i class="fa fa-caret-right"></i></div>
					<div class="col-xs-1"><i class="fa fa-caret-square-o-down"></i></div>
					<div class="col-xs-1"><i class="fa fa-caret-square-o-left"></i></div>
					<div class="col-xs-1"><i class="fa fa-caret-square-o-right"></i></div>
					<div class="col-xs-1"><i class="fa fa-caret-square-o-up"></i></div>
					<div class="col-xs-1"><i class="fa fa-caret-up"></i></div>
					<div class="col-xs-1"><i class="fa fa-cart-arrow-down"></i></div>
					<div class="col-xs-1"><i class="fa fa-cart-plus"></i></div>
					<div class="col-xs-1"><i class="fa fa-cc"></i></div>
					<div class="col-xs-1"><i class="fa fa-cc-amex"></i></div>
					<div class="col-xs-1"><i class="fa fa-cc-diners-club"></i></div>
					<div class="col-xs-1"><i class="fa fa-cc-discover"></i></div>
					<div class="col-xs-1"><i class="fa fa-cc-jcb"></i></div>
					<div class="col-xs-1"><i class="fa fa-cc-mastercard"></i></div>
					<div class="col-xs-1"><i class="fa fa-cc-paypal"></i></div>
					<div class="col-xs-1"><i class="fa fa-cc-stripe"></i></div>
					<div class="col-xs-1"><i class="fa fa-cc-visa"></i></div>
					<div class="col-xs-1"><i class="fa fa-certificate"></i></div>
					<div class="col-xs-1"><i class="fa fa-chain"></i></div>
					<div class="col-xs-1"><i class="fa fa-chain-broken"></i></div>
					<div class="col-xs-1"><i class="fa fa-check"></i></div>
					<div class="col-xs-1"><i class="fa fa-check-circle"></i></div>
					<div class="col-xs-1"><i class="fa fa-check-circle-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-check-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-check-square-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-chevron-circle-down"></i></div>
					<div class="col-xs-1"><i class="fa fa-chevron-circle-left"></i></div>
					<div class="col-xs-1"><i class="fa fa-chevron-circle-right"></i></div>
					<div class="col-xs-1"><i class="fa fa-chevron-circle-up"></i></div>
					<div class="col-xs-1"><i class="fa fa-chevron-down"></i></div>
					<div class="col-xs-1"><i class="fa fa-chevron-left"></i></div>
					<div class="col-xs-1"><i class="fa fa-chevron-right"></i></div>
					<div class="col-xs-1"><i class="fa fa-chevron-up"></i></div>
					<div class="col-xs-1"><i class="fa fa-child"></i></div>
					<div class="col-xs-1"><i class="fa fa-chrome"></i></div>
					<div class="col-xs-1"><i class="fa fa-circle"></i></div>
					<div class="col-xs-1"><i class="fa fa-circle-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-circle-o-notch"></i></div>
					<div class="col-xs-1"><i class="fa fa-circle-thin"></i></div>
					<div class="col-xs-1"><i class="fa fa-clipboard"></i></div>
					<div class="col-xs-1"><i class="fa fa-clock-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-clone"></i></div>
					<div class="col-xs-1"><i class="fa fa-close"></i></div>
					<div class="col-xs-1"><i class="fa fa-cloud"></i></div>
					<div class="col-xs-1"><i class="fa fa-cloud-download"></i></div>
					<div class="col-xs-1"><i class="fa fa-cloud-upload"></i></div>
					<div class="col-xs-1"><i class="fa fa-cny"></i></div>
					<div class="col-xs-1"><i class="fa fa-code"></i></div>
					<div class="col-xs-1"><i class="fa fa-code-fork"></i></div>
					<div class="col-xs-1"><i class="fa fa-codepen"></i></div>
					<div class="col-xs-1"><i class="fa fa-codiepie"></i></div>
					<div class="col-xs-1"><i class="fa fa-coffee"></i></div>
					<div class="col-xs-1"><i class="fa fa-cog"></i></div>
					<div class="col-xs-1"><i class="fa fa-cogs"></i></div>
					<div class="col-xs-1"><i class="fa fa-columns"></i></div>
					<div class="col-xs-1"><i class="fa fa-comment"></i></div>
					<div class="col-xs-1"><i class="fa fa-comment-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-commenting"></i></div>
					<div class="col-xs-1"><i class="fa fa-commenting-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-comments"></i></div>
					<div class="col-xs-1"><i class="fa fa-comments-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-compass"></i></div>
					<div class="col-xs-1"><i class="fa fa-compress"></i></div>
					<div class="col-xs-1"><i class="fa fa-connectdevelop"></i></div>
					<div class="col-xs-1"><i class="fa fa-contao"></i></div>
					<div class="col-xs-1"><i class="fa fa-copy"></i></div>
					<div class="col-xs-1"><i class="fa fa-copyright"></i></div>
					<div class="col-xs-1"><i class="fa fa-creative-commons"></i></div>
					<div class="col-xs-1"><i class="fa fa-credit-card"></i></div>
					<div class="col-xs-1"><i class="fa fa-credit-card-alt"></i></div>
					<div class="col-xs-1"><i class="fa fa-crop"></i></div>
					<div class="col-xs-1"><i class="fa fa-crosshairs"></i></div>
					<div class="col-xs-1"><i class="fa fa-css3"></i></div>
					<div class="col-xs-1"><i class="fa fa-cube"></i></div>
					<div class="col-xs-1"><i class="fa fa-cubes"></i></div>
					<div class="col-xs-1"><i class="fa fa-cut"></i></div>
					<div class="col-xs-1"><i class="fa fa-cutlery"></i></div>
					<div class="col-xs-1"><i class="fa fa-dashboard"></i></div>
					<div class="col-xs-1"><i class="fa fa-dashcube"></i></div>
					<div class="col-xs-1"><i class="fa fa-database"></i></div>
					<div class="col-xs-1"><i class="fa fa-deaf"></i></div>
					<div class="col-xs-1"><i class="fa fa-deafness"></i></div>
					<div class="col-xs-1"><i class="fa fa-dedent"></i></div>
					<div class="col-xs-1"><i class="fa fa-delicious"></i></div>
					<div class="col-xs-1"><i class="fa fa-desktop"></i></div>
					<div class="col-xs-1"><i class="fa fa-deviantart"></i></div>
					<div class="col-xs-1"><i class="fa fa-diamond"></i></div>
					<div class="col-xs-1"><i class="fa fa-digg"></i></div>
					<div class="col-xs-1"><i class="fa fa-dollar"></i></div>
					<div class="col-xs-1"><i class="fa fa-dot-circle-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-download"></i></div>
					<div class="col-xs-1"><i class="fa fa-dribbble"></i></div>
					<div class="col-xs-1"><i class="fa fa-drivers-license"></i></div>
					<div class="col-xs-1"><i class="fa fa-drivers-license-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-dropbox"></i></div>
					<div class="col-xs-1"><i class="fa fa-drupal"></i></div>
					<div class="col-xs-1"><i class="fa fa-edge"></i></div>
					<div class="col-xs-1"><i class="fa fa-edit"></i></div>
					<div class="col-xs-1"><i class="fa fa-eercast"></i></div>
					<div class="col-xs-1"><i class="fa fa-eject"></i></div>
					<div class="col-xs-1"><i class="fa fa-ellipsis-h"></i></div>
					<div class="col-xs-1"><i class="fa fa-ellipsis-v"></i></div>
					<div class="col-xs-1"><i class="fa fa-empire"></i></div>
					<div class="col-xs-1"><i class="fa fa-envelope"></i></div>
					<div class="col-xs-1"><i class="fa fa-envelope-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-envelope-open"></i></div>
					<div class="col-xs-1"><i class="fa fa-envelope-open-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-envelope-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-envira"></i></div>
					<div class="col-xs-1"><i class="fa fa-eraser"></i></div>
					<div class="col-xs-1"><i class="fa fa-etsy"></i></div>
					<div class="col-xs-1"><i class="fa fa-eur"></i></div>
					<div class="col-xs-1"><i class="fa fa-euro"></i></div>
					<div class="col-xs-1"><i class="fa fa-exchange"></i></div>
					<div class="col-xs-1"><i class="fa fa-exclamation"></i></div>
					<div class="col-xs-1"><i class="fa fa-exclamation-circle"></i></div>
					<div class="col-xs-1"><i class="fa fa-exclamation-triangle"></i></div>
					<div class="col-xs-1"><i class="fa fa-expand"></i></div>
					<div class="col-xs-1"><i class="fa fa-expeditedssl"></i></div>
					<div class="col-xs-1"><i class="fa fa-external-link"></i></div>
					<div class="col-xs-1"><i class="fa fa-external-link-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-eye"></i></div>
					<div class="col-xs-1"><i class="fa fa-eye-slash"></i></div>
					<div class="col-xs-1"><i class="fa fa-eyedropper"></i></div>
					<div class="col-xs-1"><i class="fa fa-fa"></i></div>
					<div class="col-xs-1"><i class="fa fa-facebook"></i></div>
					<div class="col-xs-1"><i class="fa fa-facebook-f"></i></div>
					<div class="col-xs-1"><i class="fa fa-facebook-official"></i></div>
					<div class="col-xs-1"><i class="fa fa-facebook-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-fast-backward"></i></div>
					<div class="col-xs-1"><i class="fa fa-fast-forward"></i></div>
					<div class="col-xs-1"><i class="fa fa-fax"></i></div>
					<div class="col-xs-1"><i class="fa fa-feed"></i></div>
					<div class="col-xs-1"><i class="fa fa-female"></i></div>
					<div class="col-xs-1"><i class="fa fa-fighter-jet"></i></div>
					<div class="col-xs-1"><i class="fa fa-file"></i></div>
					<div class="col-xs-1"><i class="fa fa-file-archive-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-file-audio-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-file-code-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-file-excel-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-file-image-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-file-movie-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-file-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-file-pdf-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-file-photo-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-file-picture-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-file-powerpoint-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-file-sound-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-file-text"></i></div>
					<div class="col-xs-1"><i class="fa fa-file-text-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-file-video-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-file-word-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-file-zip-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-files-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-film"></i></div>
					<div class="col-xs-1"><i class="fa fa-filter"></i></div>
					<div class="col-xs-1"><i class="fa fa-fire"></i></div>
					<div class="col-xs-1"><i class="fa fa-fire-extinguisher"></i></div>
					<div class="col-xs-1"><i class="fa fa-firefox"></i></div>
					<div class="col-xs-1"><i class="fa fa-first-order"></i></div>
					<div class="col-xs-1"><i class="fa fa-flag"></i></div>
					<div class="col-xs-1"><i class="fa fa-flag-checkered"></i></div>
					<div class="col-xs-1"><i class="fa fa-flag-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-flash"></i></div>
					<div class="col-xs-1"><i class="fa fa-flask"></i></div>
					<div class="col-xs-1"><i class="fa fa-flickr"></i></div>
					<div class="col-xs-1"><i class="fa fa-floppy-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-folder"></i></div>
					<div class="col-xs-1"><i class="fa fa-folder-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-folder-open"></i></div>
					<div class="col-xs-1"><i class="fa fa-folder-open-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-font"></i></div>
					<div class="col-xs-1"><i class="fa fa-font-awesome"></i></div>
					<div class="col-xs-1"><i class="fa fa-fonticons"></i></div>
					<div class="col-xs-1"><i class="fa fa-fort-awesome"></i></div>
					<div class="col-xs-1"><i class="fa fa-forumbee"></i></div>
					<div class="col-xs-1"><i class="fa fa-forward"></i></div>
					<div class="col-xs-1"><i class="fa fa-foursquare"></i></div>
					<div class="col-xs-1"><i class="fa fa-free-code-camp"></i></div>
					<div class="col-xs-1"><i class="fa fa-frown-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-futbol-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-gamepad"></i></div>
					<div class="col-xs-1"><i class="fa fa-gavel"></i></div>
					<div class="col-xs-1"><i class="fa fa-gbp"></i></div>
					<div class="col-xs-1"><i class="fa fa-ge"></i></div>
					<div class="col-xs-1"><i class="fa fa-gear"></i></div>
					<div class="col-xs-1"><i class="fa fa-gears"></i></div>
					<div class="col-xs-1"><i class="fa fa-genderless"></i></div>
					<div class="col-xs-1"><i class="fa fa-get-pocket"></i></div>
					<div class="col-xs-1"><i class="fa fa-gg"></i></div>
					<div class="col-xs-1"><i class="fa fa-gg-circle"></i></div>
					<div class="col-xs-1"><i class="fa fa-gift"></i></div>
					<div class="col-xs-1"><i class="fa fa-git"></i></div>
					<div class="col-xs-1"><i class="fa fa-git-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-github"></i></div>
					<div class="col-xs-1"><i class="fa fa-github-alt"></i></div>
					<div class="col-xs-1"><i class="fa fa-github-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-gitlab"></i></div>
					<div class="col-xs-1"><i class="fa fa-gittip"></i></div>
					<div class="col-xs-1"><i class="fa fa-glass"></i></div>
					<div class="col-xs-1"><i class="fa fa-glide"></i></div>
					<div class="col-xs-1"><i class="fa fa-glide-g"></i></div>
					<div class="col-xs-1"><i class="fa fa-globe"></i></div>
					<div class="col-xs-1"><i class="fa fa-google"></i></div>
					<div class="col-xs-1"><i class="fa fa-google-plus"></i></div>
					<div class="col-xs-1"><i class="fa fa-google-plus-circle"></i></div>
					<div class="col-xs-1"><i class="fa fa-google-plus-official"></i></div>
					<div class="col-xs-1"><i class="fa fa-google-plus-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-google-wallet"></i></div>
					<div class="col-xs-1"><i class="fa fa-graduation-cap"></i></div>
					<div class="col-xs-1"><i class="fa fa-gratipay"></i></div>
					<div class="col-xs-1"><i class="fa fa-grav"></i></div>
					<div class="col-xs-1"><i class="fa fa-group"></i></div>
					<div class="col-xs-1"><i class="fa fa-h-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-hacker-news"></i></div>
					<div class="col-xs-1"><i class="fa fa-hand-grab-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-hand-lizard-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-hand-o-down"></i></div>
					<div class="col-xs-1"><i class="fa fa-hand-o-left"></i></div>
					<div class="col-xs-1"><i class="fa fa-hand-o-right"></i></div>
					<div class="col-xs-1"><i class="fa fa-hand-o-up"></i></div>
					<div class="col-xs-1"><i class="fa fa-hand-paper-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-hand-peace-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-hand-pointer-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-hand-rock-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-hand-scissors-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-hand-spock-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-hand-stop-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-handshake-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-hard-of-hearing"></i></div>
					<div class="col-xs-1"><i class="fa fa-hashtag"></i></div>
					<div class="col-xs-1"><i class="fa fa-hdd-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-header"></i></div>
					<div class="col-xs-1"><i class="fa fa-headphones"></i></div>
					<div class="col-xs-1"><i class="fa fa-heart"></i></div>
					<div class="col-xs-1"><i class="fa fa-heart-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-heartbeat"></i></div>
					<div class="col-xs-1"><i class="fa fa-history"></i></div>
					<div class="col-xs-1"><i class="fa fa-home"></i></div>
					<div class="col-xs-1"><i class="fa fa-hospital-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-hotel"></i></div>
					<div class="col-xs-1"><i class="fa fa-hourglass"></i></div>
					<div class="col-xs-1"><i class="fa fa-hourglass-1"></i></div>
					<div class="col-xs-1"><i class="fa fa-hourglass-2"></i></div>
					<div class="col-xs-1"><i class="fa fa-hourglass-3"></i></div>
					<div class="col-xs-1"><i class="fa fa-hourglass-end"></i></div>
					<div class="col-xs-1"><i class="fa fa-hourglass-half"></i></div>
					<div class="col-xs-1"><i class="fa fa-hourglass-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-hourglass-start"></i></div>
					<div class="col-xs-1"><i class="fa fa-houzz"></i></div>
					<div class="col-xs-1"><i class="fa fa-html5"></i></div>
					<div class="col-xs-1"><i class="fa fa-i-cursor"></i></div>
					<div class="col-xs-1"><i class="fa fa-id-badge"></i></div>
					<div class="col-xs-1"><i class="fa fa-id-card"></i></div>
					<div class="col-xs-1"><i class="fa fa-id-card-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-ils"></i></div>
					<div class="col-xs-1"><i class="fa fa-image"></i></div>
					<div class="col-xs-1"><i class="fa fa-imdb"></i></div>
					<div class="col-xs-1"><i class="fa fa-inbox"></i></div>
					<div class="col-xs-1"><i class="fa fa-indent"></i></div>
					<div class="col-xs-1"><i class="fa fa-industry"></i></div>
					<div class="col-xs-1"><i class="fa fa-info"></i></div>
					<div class="col-xs-1"><i class="fa fa-info-circle"></i></div>
					<div class="col-xs-1"><i class="fa fa-inr"></i></div>
					<div class="col-xs-1"><i class="fa fa-instagram"></i></div>
					<div class="col-xs-1"><i class="fa fa-institution"></i></div>
					<div class="col-xs-1"><i class="fa fa-internet-explorer"></i></div>
					<div class="col-xs-1"><i class="fa fa-intersex"></i></div>
					<div class="col-xs-1"><i class="fa fa-ioxhost"></i></div>
					<div class="col-xs-1"><i class="fa fa-italic"></i></div>
					<div class="col-xs-1"><i class="fa fa-joomla"></i></div>
					<div class="col-xs-1"><i class="fa fa-jpy"></i></div>
					<div class="col-xs-1"><i class="fa fa-jsfiddle"></i></div>
					<div class="col-xs-1"><i class="fa fa-key"></i></div>
					<div class="col-xs-1"><i class="fa fa-keyboard-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-krw"></i></div>
					<div class="col-xs-1"><i class="fa fa-language"></i></div>
					<div class="col-xs-1"><i class="fa fa-laptop"></i></div>
					<div class="col-xs-1"><i class="fa fa-lastfm"></i></div>
					<div class="col-xs-1"><i class="fa fa-lastfm-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-leaf"></i></div>
					<div class="col-xs-1"><i class="fa fa-leanpub"></i></div>
					<div class="col-xs-1"><i class="fa fa-legal"></i></div>
					<div class="col-xs-1"><i class="fa fa-lemon-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-level-down"></i></div>
					<div class="col-xs-1"><i class="fa fa-level-up"></i></div>
					<div class="col-xs-1"><i class="fa fa-life-bouy"></i></div>
					<div class="col-xs-1"><i class="fa fa-life-buoy"></i></div>
					<div class="col-xs-1"><i class="fa fa-life-ring"></i></div>
					<div class="col-xs-1"><i class="fa fa-life-saver"></i></div>
					<div class="col-xs-1"><i class="fa fa-lightbulb-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-line-chart"></i></div>
					<div class="col-xs-1"><i class="fa fa-link"></i></div>
					<div class="col-xs-1"><i class="fa fa-linkedin"></i></div>
					<div class="col-xs-1"><i class="fa fa-linkedin-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-linode"></i></div>
					<div class="col-xs-1"><i class="fa fa-linux"></i></div>
					<div class="col-xs-1"><i class="fa fa-list"></i></div>
					<div class="col-xs-1"><i class="fa fa-list-alt"></i></div>
					<div class="col-xs-1"><i class="fa fa-list-ol"></i></div>
					<div class="col-xs-1"><i class="fa fa-list-ul"></i></div>
					<div class="col-xs-1"><i class="fa fa-location-arrow"></i></div>
					<div class="col-xs-1"><i class="fa fa-lock"></i></div>
					<div class="col-xs-1"><i class="fa fa-long-arrow-down"></i></div>
					<div class="col-xs-1"><i class="fa fa-long-arrow-left"></i></div>
					<div class="col-xs-1"><i class="fa fa-long-arrow-right"></i></div>
					<div class="col-xs-1"><i class="fa fa-long-arrow-up"></i></div>
					<div class="col-xs-1"><i class="fa fa-low-vision"></i></div>
					<div class="col-xs-1"><i class="fa fa-magic"></i></div>
					<div class="col-xs-1"><i class="fa fa-magnet"></i></div>
					<div class="col-xs-1"><i class="fa fa-mail-forward"></i></div>
					<div class="col-xs-1"><i class="fa fa-mail-reply"></i></div>
					<div class="col-xs-1"><i class="fa fa-mail-reply-all"></i></div>
					<div class="col-xs-1"><i class="fa fa-male"></i></div>
					<div class="col-xs-1"><i class="fa fa-map"></i></div>
					<div class="col-xs-1"><i class="fa fa-map-marker"></i></div>
					<div class="col-xs-1"><i class="fa fa-map-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-map-pin"></i></div>
					<div class="col-xs-1"><i class="fa fa-map-signs"></i></div>
					<div class="col-xs-1"><i class="fa fa-mars"></i></div>
					<div class="col-xs-1"><i class="fa fa-mars-double"></i></div>
					<div class="col-xs-1"><i class="fa fa-mars-stroke"></i></div>
					<div class="col-xs-1"><i class="fa fa-mars-stroke-h"></i></div>
					<div class="col-xs-1"><i class="fa fa-mars-stroke-v"></i></div>
					<div class="col-xs-1"><i class="fa fa-maxcdn"></i></div>
					<div class="col-xs-1"><i class="fa fa-meanpath"></i></div>
					<div class="col-xs-1"><i class="fa fa-medium"></i></div>
					<div class="col-xs-1"><i class="fa fa-medkit"></i></div>
					<div class="col-xs-1"><i class="fa fa-meetup"></i></div>
					<div class="col-xs-1"><i class="fa fa-meh-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-mercury"></i></div>
					<div class="col-xs-1"><i class="fa fa-microchip"></i></div>
					<div class="col-xs-1"><i class="fa fa-microphone"></i></div>
					<div class="col-xs-1"><i class="fa fa-microphone-slash"></i></div>
					<div class="col-xs-1"><i class="fa fa-minus"></i></div>
					<div class="col-xs-1"><i class="fa fa-minus-circle"></i></div>
					<div class="col-xs-1"><i class="fa fa-minus-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-minus-square-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-mixcloud"></i></div>
					<div class="col-xs-1"><i class="fa fa-mobile"></i></div>
					<div class="col-xs-1"><i class="fa fa-mobile-phone"></i></div>
					<div class="col-xs-1"><i class="fa fa-modx"></i></div>
					<div class="col-xs-1"><i class="fa fa-money"></i></div>
					<div class="col-xs-1"><i class="fa fa-moon-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-mortar-board"></i></div>
					<div class="col-xs-1"><i class="fa fa-motorcycle"></i></div>
					<div class="col-xs-1"><i class="fa fa-mouse-pointer"></i></div>
					<div class="col-xs-1"><i class="fa fa-music"></i></div>
					<div class="col-xs-1"><i class="fa fa-navicon"></i></div>
					<div class="col-xs-1"><i class="fa fa-neuter"></i></div>
					<div class="col-xs-1"><i class="fa fa-newspaper-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-object-group"></i></div>
					<div class="col-xs-1"><i class="fa fa-object-ungroup"></i></div>
					<div class="col-xs-1"><i class="fa fa-odnoklassniki"></i></div>
					<div class="col-xs-1"><i class="fa fa-odnoklassniki-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-opencart"></i></div>
					<div class="col-xs-1"><i class="fa fa-openid"></i></div>
					<div class="col-xs-1"><i class="fa fa-opera"></i></div>
					<div class="col-xs-1"><i class="fa fa-optin-monster"></i></div>
					<div class="col-xs-1"><i class="fa fa-outdent"></i></div>
					<div class="col-xs-1"><i class="fa fa-pagelines"></i></div>
					<div class="col-xs-1"><i class="fa fa-paint-brush"></i></div>
					<div class="col-xs-1"><i class="fa fa-paper-plane"></i></div>
					<div class="col-xs-1"><i class="fa fa-paper-plane-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-paperclip"></i></div>
					<div class="col-xs-1"><i class="fa fa-paragraph"></i></div>
					<div class="col-xs-1"><i class="fa fa-paste"></i></div>
					<div class="col-xs-1"><i class="fa fa-pause"></i></div>
					<div class="col-xs-1"><i class="fa fa-pause-circle"></i></div>
					<div class="col-xs-1"><i class="fa fa-pause-circle-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-paw"></i></div>
					<div class="col-xs-1"><i class="fa fa-paypal"></i></div>
					<div class="col-xs-1"><i class="fa fa-pencil"></i></div>
					<div class="col-xs-1"><i class="fa fa-pencil-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-pencil-square-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-percent"></i></div>
					<div class="col-xs-1"><i class="fa fa-phone"></i></div>
					<div class="col-xs-1"><i class="fa fa-phone-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-photo"></i></div>
					<div class="col-xs-1"><i class="fa fa-picture-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-pie-chart"></i></div>
					<div class="col-xs-1"><i class="fa fa-pied-piper"></i></div>
					<div class="col-xs-1"><i class="fa fa-pied-piper-alt"></i></div>
					<div class="col-xs-1"><i class="fa fa-pied-piper-pp"></i></div>
					<div class="col-xs-1"><i class="fa fa-pinterest"></i></div>
					<div class="col-xs-1"><i class="fa fa-pinterest-p"></i></div>
					<div class="col-xs-1"><i class="fa fa-pinterest-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-plane"></i></div>
					<div class="col-xs-1"><i class="fa fa-play"></i></div>
					<div class="col-xs-1"><i class="fa fa-play-circle"></i></div>
					<div class="col-xs-1"><i class="fa fa-play-circle-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-plug"></i></div>
					<div class="col-xs-1"><i class="fa fa-plus"></i></div>
					<div class="col-xs-1"><i class="fa fa-plus-circle"></i></div>
					<div class="col-xs-1"><i class="fa fa-plus-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-plus-square-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-podcast"></i></div>
					<div class="col-xs-1"><i class="fa fa-power-off"></i></div>
					<div class="col-xs-1"><i class="fa fa-print"></i></div>
					<div class="col-xs-1"><i class="fa fa-product-hunt"></i></div>
					<div class="col-xs-1"><i class="fa fa-puzzle-piece"></i></div>
					<div class="col-xs-1"><i class="fa fa-qq"></i></div>
					<div class="col-xs-1"><i class="fa fa-qrcode"></i></div>
					<div class="col-xs-1"><i class="fa fa-question"></i></div>
					<div class="col-xs-1"><i class="fa fa-question-circle"></i></div>
					<div class="col-xs-1"><i class="fa fa-question-circle-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-quora"></i></div>
					<div class="col-xs-1"><i class="fa fa-quote-left"></i></div>
					<div class="col-xs-1"><i class="fa fa-quote-right"></i></div>
					<div class="col-xs-1"><i class="fa fa-ra"></i></div>
					<div class="col-xs-1"><i class="fa fa-random"></i></div>
					<div class="col-xs-1"><i class="fa fa-ravelry"></i></div>
					<div class="col-xs-1"><i class="fa fa-rebel"></i></div>
					<div class="col-xs-1"><i class="fa fa-recycle"></i></div>
					<div class="col-xs-1"><i class="fa fa-reddit"></i></div>
					<div class="col-xs-1"><i class="fa fa-reddit-alien"></i></div>
					<div class="col-xs-1"><i class="fa fa-reddit-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-refresh"></i></div>
					<div class="col-xs-1"><i class="fa fa-registered"></i></div>
					<div class="col-xs-1"><i class="fa fa-remove"></i></div>
					<div class="col-xs-1"><i class="fa fa-renren"></i></div>
					<div class="col-xs-1"><i class="fa fa-reorder"></i></div>
					<div class="col-xs-1"><i class="fa fa-repeat"></i></div>
					<div class="col-xs-1"><i class="fa fa-reply"></i></div>
					<div class="col-xs-1"><i class="fa fa-reply-all"></i></div>
					<div class="col-xs-1"><i class="fa fa-resistance"></i></div>
					<div class="col-xs-1"><i class="fa fa-retweet"></i></div>
					<div class="col-xs-1"><i class="fa fa-rmb"></i></div>
					<div class="col-xs-1"><i class="fa fa-road"></i></div>
					<div class="col-xs-1"><i class="fa fa-rocket"></i></div>
					<div class="col-xs-1"><i class="fa fa-rotate-left"></i></div>
					<div class="col-xs-1"><i class="fa fa-rotate-right"></i></div>
					<div class="col-xs-1"><i class="fa fa-rouble"></i></div>
					<div class="col-xs-1"><i class="fa fa-rss"></i></div>
					<div class="col-xs-1"><i class="fa fa-rss-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-rub"></i></div>
					<div class="col-xs-1"><i class="fa fa-ruble"></i></div>
					<div class="col-xs-1"><i class="fa fa-rupee"></i></div>
					<div class="col-xs-1"><i class="fa fa-s15"></i></div>
					<div class="col-xs-1"><i class="fa fa-safari"></i></div>
					<div class="col-xs-1"><i class="fa fa-save"></i></div>
					<div class="col-xs-1"><i class="fa fa-scissors"></i></div>
					<div class="col-xs-1"><i class="fa fa-scribd"></i></div>
					<div class="col-xs-1"><i class="fa fa-search"></i></div>
					<div class="col-xs-1"><i class="fa fa-search-minus"></i></div>
					<div class="col-xs-1"><i class="fa fa-search-plus"></i></div>
					<div class="col-xs-1"><i class="fa fa-sellsy"></i></div>
					<div class="col-xs-1"><i class="fa fa-send"></i></div>
					<div class="col-xs-1"><i class="fa fa-send-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-server"></i></div>
					<div class="col-xs-1"><i class="fa fa-share"></i></div>
					<div class="col-xs-1"><i class="fa fa-share-alt"></i></div>
					<div class="col-xs-1"><i class="fa fa-share-alt-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-share-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-share-square-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-shekel"></i></div>
					<div class="col-xs-1"><i class="fa fa-sheqel"></i></div>
					<div class="col-xs-1"><i class="fa fa-shield"></i></div>
					<div class="col-xs-1"><i class="fa fa-ship"></i></div>
					<div class="col-xs-1"><i class="fa fa-shirtsinbulk"></i></div>
					<div class="col-xs-1"><i class="fa fa-shopping-bag"></i></div>
					<div class="col-xs-1"><i class="fa fa-shopping-basket"></i></div>
					<div class="col-xs-1"><i class="fa fa-shopping-cart"></i></div>
					<div class="col-xs-1"><i class="fa fa-shower"></i></div>
					<div class="col-xs-1"><i class="fa fa-sign-in"></i></div>
					<div class="col-xs-1"><i class="fa fa-sign-language"></i></div>
					<div class="col-xs-1"><i class="fa fa-sign-out"></i></div>
					<div class="col-xs-1"><i class="fa fa-signal"></i></div>
					<div class="col-xs-1"><i class="fa fa-signing"></i></div>
					<div class="col-xs-1"><i class="fa fa-simplybuilt"></i></div>
					<div class="col-xs-1"><i class="fa fa-sitemap"></i></div>
					<div class="col-xs-1"><i class="fa fa-skyatlas"></i></div>
					<div class="col-xs-1"><i class="fa fa-skype"></i></div>
					<div class="col-xs-1"><i class="fa fa-slack"></i></div>
					<div class="col-xs-1"><i class="fa fa-sliders"></i></div>
					<div class="col-xs-1"><i class="fa fa-slideshare"></i></div>
					<div class="col-xs-1"><i class="fa fa-smile-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-snapchat"></i></div>
					<div class="col-xs-1"><i class="fa fa-snapchat-ghost"></i></div>
					<div class="col-xs-1"><i class="fa fa-snapchat-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-snowflake-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-soccer-ball-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-sort"></i></div>
					<div class="col-xs-1"><i class="fa fa-sort-alpha-asc"></i></div>
					<div class="col-xs-1"><i class="fa fa-sort-alpha-desc"></i></div>
					<div class="col-xs-1"><i class="fa fa-sort-amount-asc"></i></div>
					<div class="col-xs-1"><i class="fa fa-sort-amount-desc"></i></div>
					<div class="col-xs-1"><i class="fa fa-sort-asc"></i></div>
					<div class="col-xs-1"><i class="fa fa-sort-desc"></i></div>
					<div class="col-xs-1"><i class="fa fa-sort-down"></i></div>
					<div class="col-xs-1"><i class="fa fa-sort-numeric-asc"></i></div>
					<div class="col-xs-1"><i class="fa fa-sort-numeric-desc"></i></div>
					<div class="col-xs-1"><i class="fa fa-sort-up"></i></div>
					<div class="col-xs-1"><i class="fa fa-soundcloud"></i></div>
					<div class="col-xs-1"><i class="fa fa-space-shuttle"></i></div>
					<div class="col-xs-1"><i class="fa fa-spinner"></i></div>
					<div class="col-xs-1"><i class="fa fa-spoon"></i></div>
					<div class="col-xs-1"><i class="fa fa-spotify"></i></div>
					<div class="col-xs-1"><i class="fa fa-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-square-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-stack-exchange"></i></div>
					<div class="col-xs-1"><i class="fa fa-stack-overflow"></i></div>
					<div class="col-xs-1"><i class="fa fa-star"></i></div>
					<div class="col-xs-1"><i class="fa fa-star-half"></i></div>
					<div class="col-xs-1"><i class="fa fa-star-half-empty"></i></div>
					<div class="col-xs-1"><i class="fa fa-star-half-full"></i></div>
					<div class="col-xs-1"><i class="fa fa-star-half-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-star-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-steam"></i></div>
					<div class="col-xs-1"><i class="fa fa-steam-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-step-backward"></i></div>
					<div class="col-xs-1"><i class="fa fa-step-forward"></i></div>
					<div class="col-xs-1"><i class="fa fa-stethoscope"></i></div>
					<div class="col-xs-1"><i class="fa fa-sticky-note"></i></div>
					<div class="col-xs-1"><i class="fa fa-sticky-note-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-stop"></i></div>
					<div class="col-xs-1"><i class="fa fa-stop-circle"></i></div>
					<div class="col-xs-1"><i class="fa fa-stop-circle-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-street-view"></i></div>
					<div class="col-xs-1"><i class="fa fa-strikethrough"></i></div>
					<div class="col-xs-1"><i class="fa fa-stumbleupon"></i></div>
					<div class="col-xs-1"><i class="fa fa-stumbleupon-circle"></i></div>
					<div class="col-xs-1"><i class="fa fa-subscript"></i></div>
					<div class="col-xs-1"><i class="fa fa-subway"></i></div>
					<div class="col-xs-1"><i class="fa fa-suitcase"></i></div>
					<div class="col-xs-1"><i class="fa fa-sun-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-superpowers"></i></div>
					<div class="col-xs-1"><i class="fa fa-superscript"></i></div>
					<div class="col-xs-1"><i class="fa fa-support"></i></div>
					<div class="col-xs-1"><i class="fa fa-table"></i></div>
					<div class="col-xs-1"><i class="fa fa-tablet"></i></div>
					<div class="col-xs-1"><i class="fa fa-tachometer"></i></div>
					<div class="col-xs-1"><i class="fa fa-tag"></i></div>
					<div class="col-xs-1"><i class="fa fa-tags"></i></div>
					<div class="col-xs-1"><i class="fa fa-tasks"></i></div>
					<div class="col-xs-1"><i class="fa fa-taxi"></i></div>
					<div class="col-xs-1"><i class="fa fa-telegram"></i></div>
					<div class="col-xs-1"><i class="fa fa-television"></i></div>
					<div class="col-xs-1"><i class="fa fa-tencent-weibo"></i></div>
					<div class="col-xs-1"><i class="fa fa-terminal"></i></div>
					<div class="col-xs-1"><i class="fa fa-text-height"></i></div>
					<div class="col-xs-1"><i class="fa fa-text-width"></i></div>
					<div class="col-xs-1"><i class="fa fa-th"></i></div>
					<div class="col-xs-1"><i class="fa fa-th-large"></i></div>
					<div class="col-xs-1"><i class="fa fa-th-list"></i></div>
					<div class="col-xs-1"><i class="fa fa-themeisle"></i></div>
					<div class="col-xs-1"><i class="fa fa-thermometer"></i></div>
					<div class="col-xs-1"><i class="fa fa-thermometer-0"></i></div>
					<div class="col-xs-1"><i class="fa fa-thermometer-1"></i></div>
					<div class="col-xs-1"><i class="fa fa-thermometer-2"></i></div>
					<div class="col-xs-1"><i class="fa fa-thermometer-3"></i></div>
					<div class="col-xs-1"><i class="fa fa-thermometer-4"></i></div>
					<div class="col-xs-1"><i class="fa fa-thermometer-empty"></i></div>
					<div class="col-xs-1"><i class="fa fa-thermometer-full"></i></div>
					<div class="col-xs-1"><i class="fa fa-thermometer-half"></i></div>
					<div class="col-xs-1"><i class="fa fa-thermometer-quarter"></i></div>
					<div class="col-xs-1"><i class="fa fa-thermometer-three-quarters"></i></div>
					<div class="col-xs-1"><i class="fa fa-thumb-tack"></i></div>
					<div class="col-xs-1"><i class="fa fa-thumbs-down"></i></div>
					<div class="col-xs-1"><i class="fa fa-thumbs-o-down"></i></div>
					<div class="col-xs-1"><i class="fa fa-thumbs-o-up"></i></div>
					<div class="col-xs-1"><i class="fa fa-thumbs-up"></i></div>
					<div class="col-xs-1"><i class="fa fa-ticket"></i></div>
					<div class="col-xs-1"><i class="fa fa-times"></i></div>
					<div class="col-xs-1"><i class="fa fa-times-circle"></i></div>
					<div class="col-xs-1"><i class="fa fa-times-circle-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-times-rectangle"></i></div>
					<div class="col-xs-1"><i class="fa fa-times-rectangle-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-tint"></i></div>
					<div class="col-xs-1"><i class="fa fa-toggle-down"></i></div>
					<div class="col-xs-1"><i class="fa fa-toggle-left"></i></div>
					<div class="col-xs-1"><i class="fa fa-toggle-off"></i></div>
					<div class="col-xs-1"><i class="fa fa-toggle-on"></i></div>
					<div class="col-xs-1"><i class="fa fa-toggle-right"></i></div>
					<div class="col-xs-1"><i class="fa fa-toggle-up"></i></div>
					<div class="col-xs-1"><i class="fa fa-trademark"></i></div>
					<div class="col-xs-1"><i class="fa fa-train"></i></div>
					<div class="col-xs-1"><i class="fa fa-transgender"></i></div>
					<div class="col-xs-1"><i class="fa fa-transgender-alt"></i></div>
					<div class="col-xs-1"><i class="fa fa-trash"></i></div>
					<div class="col-xs-1"><i class="fa fa-trash-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-tree"></i></div>
					<div class="col-xs-1"><i class="fa fa-trello"></i></div>
					<div class="col-xs-1"><i class="fa fa-tripadvisor"></i></div>
					<div class="col-xs-1"><i class="fa fa-trophy"></i></div>
					<div class="col-xs-1"><i class="fa fa-truck"></i></div>
					<div class="col-xs-1"><i class="fa fa-try"></i></div>
					<div class="col-xs-1"><i class="fa fa-tty"></i></div>
					<div class="col-xs-1"><i class="fa fa-tumblr"></i></div>
					<div class="col-xs-1"><i class="fa fa-tumblr-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-turkish-lira"></i></div>
					<div class="col-xs-1"><i class="fa fa-tv"></i></div>
					<div class="col-xs-1"><i class="fa fa-twitch"></i></div>
					<div class="col-xs-1"><i class="fa fa-twitter"></i></div>
					<div class="col-xs-1"><i class="fa fa-twitter-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-umbrella"></i></div>
					<div class="col-xs-1"><i class="fa fa-underline"></i></div>
					<div class="col-xs-1"><i class="fa fa-undo"></i></div>
					<div class="col-xs-1"><i class="fa fa-universal-access"></i></div>
					<div class="col-xs-1"><i class="fa fa-university"></i></div>
					<div class="col-xs-1"><i class="fa fa-unlink"></i></div>
					<div class="col-xs-1"><i class="fa fa-unlock"></i></div>
					<div class="col-xs-1"><i class="fa fa-unlock-alt"></i></div>
					<div class="col-xs-1"><i class="fa fa-unsorted"></i></div>
					<div class="col-xs-1"><i class="fa fa-upload"></i></div>
					<div class="col-xs-1"><i class="fa fa-usb"></i></div>
					<div class="col-xs-1"><i class="fa fa-usd"></i></div>
					<div class="col-xs-1"><i class="fa fa-user"></i></div>
					<div class="col-xs-1"><i class="fa fa-user-circle"></i></div>
					<div class="col-xs-1"><i class="fa fa-user-circle-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-user-md"></i></div>
					<div class="col-xs-1"><i class="fa fa-user-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-user-plus"></i></div>
					<div class="col-xs-1"><i class="fa fa-user-secret"></i></div>
					<div class="col-xs-1"><i class="fa fa-user-times"></i></div>
					<div class="col-xs-1"><i class="fa fa-users"></i></div>
					<div class="col-xs-1"><i class="fa fa-vcard"></i></div>
					<div class="col-xs-1"><i class="fa fa-vcard-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-venus"></i></div>
					<div class="col-xs-1"><i class="fa fa-venus-double"></i></div>
					<div class="col-xs-1"><i class="fa fa-venus-mars"></i></div>
					<div class="col-xs-1"><i class="fa fa-viacoin"></i></div>
					<div class="col-xs-1"><i class="fa fa-viadeo"></i></div>
					<div class="col-xs-1"><i class="fa fa-viadeo-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-video-camera"></i></div>
					<div class="col-xs-1"><i class="fa fa-vimeo"></i></div>
					<div class="col-xs-1"><i class="fa fa-vimeo-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-vine"></i></div>
					<div class="col-xs-1"><i class="fa fa-vk"></i></div>
					<div class="col-xs-1"><i class="fa fa-volume-control-phone"></i></div>
					<div class="col-xs-1"><i class="fa fa-volume-down"></i></div>
					<div class="col-xs-1"><i class="fa fa-volume-off"></i></div>
					<div class="col-xs-1"><i class="fa fa-volume-up"></i></div>
					<div class="col-xs-1"><i class="fa fa-warning"></i></div>
					<div class="col-xs-1"><i class="fa fa-wechat"></i></div>
					<div class="col-xs-1"><i class="fa fa-weibo"></i></div>
					<div class="col-xs-1"><i class="fa fa-weixin"></i></div>
					<div class="col-xs-1"><i class="fa fa-whatsapp"></i></div>
					<div class="col-xs-1"><i class="fa fa-wheelchair"></i></div>
					<div class="col-xs-1"><i class="fa fa-wheelchair-alt"></i></div>
					<div class="col-xs-1"><i class="fa fa-wifi"></i></div>
					<div class="col-xs-1"><i class="fa fa-wikipedia-w"></i></div>
					<div class="col-xs-1"><i class="fa fa-window-close"></i></div>
					<div class="col-xs-1"><i class="fa fa-window-close-o"></i></div>
					<div class="col-xs-1"><i class="fa fa-window-maximize"></i></div>
					<div class="col-xs-1"><i class="fa fa-window-minimize"></i></div>
					<div class="col-xs-1"><i class="fa fa-window-restore"></i></div>
					<div class="col-xs-1"><i class="fa fa-windows"></i></div>
					<div class="col-xs-1"><i class="fa fa-won"></i></div>
					<div class="col-xs-1"><i class="fa fa-wordpress"></i></div>
					<div class="col-xs-1"><i class="fa fa-wpbeginner"></i></div>
					<div class="col-xs-1"><i class="fa fa-wpexplorer"></i></div>
					<div class="col-xs-1"><i class="fa fa-wpforms"></i></div>
					<div class="col-xs-1"><i class="fa fa-wrench"></i></div>
					<div class="col-xs-1"><i class="fa fa-xing"></i></div>
					<div class="col-xs-1"><i class="fa fa-xing-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-y-combinator"></i></div>
					<div class="col-xs-1"><i class="fa fa-y-combinator-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-yahoo"></i></div>
					<div class="col-xs-1"><i class="fa fa-yc"></i></div>
					<div class="col-xs-1"><i class="fa fa-yc-square"></i></div>
					<div class="col-xs-1"><i class="fa fa-yelp"></i></div>
					<div class="col-xs-1"><i class="fa fa-yen"></i></div>
					<div class="col-xs-1"><i class="fa fa-yoast"></i></div>
					<div class="col-xs-1"><i class="fa fa-youtube"></i></div>
					<div class="col-xs-1"><i class="fa fa-youtube-play"></i></div>
					<div class="col-xs-1"><i class="fa fa-youtube-square"></i></div>
					</div>
					</div>
					<script type="text/javascript" src="view/javascript/revolution/popup_icons.js"></script>
					<script>
						function fa_icons(id) {
							$('.fa_icons').popup('show');
							$('.target').val(id);
							
							$('.fa_icons .fa').on('click', function() {
								var this_class = $(this).attr('class');
								$('.class').val(this_class);
								save_icons();
								$('.fa_icons').popup('hide');
							});
						}
						
						function save_icons() {
							var target = $('.target').val();
							var this_class = $('.class').val();
							$('#'+target).html('<i class="'+this_class+'"></i>');
							$('#'+target).next().val(this_class);
						}
					</script>
					</div>
				</div>
            ]]></add>
        </operation>
    </file>
	<file path="catalog/language/{ru-ru,russian}/checkout/cart.php">
		<operation error="skip">
			<search><![CDATA[Призовые баллы]]></search>
			<add position="replace"><![CDATA[Бонусные баллы]]></add>
		</operation>
	</file>
	<file path="catalog/language/{ru-ru,russian}/total/sub_total.php">
		<operation error="skip">
			<search><![CDATA[Подварительная стоимость]]></search>
			<add position="replace"><![CDATA[Стоимость товаров]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[Предварительная стоимость]]></search>
			<add position="replace"><![CDATA[Стоимость товаров]]></add>
		</operation>
	</file>
	<file path="catalog/controller/common/search.php">
		<operation>
			<search><![CDATA[$this->load->language('common/search]]></search>
			<add position="after"><![CDATA[
				$this->load->language('revolution/revolution');
				$setting = $this->config->get('revtheme_header_search');
				$data['in_category'] = $setting['in_category'];
				if ($setting['in_category']) {
					$this->load->model('catalog/category');
					$data['search_in_category'] = $this->language->get('search_in_category');
					$data['search_in_category_text_all'] = $this->language->get('search_in_category_text_all');
							
					if (isset($this->request->get['category_id'])) {
						$category_id = $this->request->get['category_id'];
					} else {
						$category_id = 0;
					}
					
					$data['category_id'] = $category_id;			
					$data['search_categories'] = array();
					$search_in_categories = $this->model_catalog_category->getCategories(0);
					foreach ($search_in_categories as $search_category) {
						$data['search_categories'][] = array(
							'category_id' => $search_category['category_id'],
							'name'        => $search_category['name']
						);
					}
				}
				if ($setting['ajax_search_status']) {
					$data['text_ajaxsearch_model'] = $this->language->get('text_ajaxsearch_model');
					$data['text_ajaxsearch_manufacturer'] = $this->language->get('text_ajaxsearch_manufacturer');
					$data['text_ajaxsearch_price'] = $this->language->get('text_ajaxsearch_price');
					$data['text_ajaxsearch_stock'] = $this->language->get('text_ajaxsearch_stock');
					$data['text_ajaxsearch_rating'] = $this->language->get('text_ajaxsearch_rating');
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[public function index() {]]></search>
			<add position="before"><![CDATA[
				public function ajaxLiveSearch() {
					$json = array();
					if(!empty($this->request->get['filter_name'])){
						$this->load->model('revolution/revolution');
						$this->load->model('tool/image');
						
						$setting = $this->config->get('revtheme_header_search');
						
						$filter_mpn = ($setting['ajax_search_mpn']) ? true : false;
						$filter_manufacturer = ($setting['ajax_search_manufacturer']) ? true : false;
						$filter_isbn = ($setting['ajax_search_isbn']) ? true : false;
						$filter_jan = ($setting['ajax_search_jan']) ? true : false;
						$filter_ean = ($setting['ajax_search_ean']) ? true : false;
						$filter_upc = ($setting['ajax_search_upc']) ? true : false;
						$filter_sku = ($setting['ajax_search_sku']) ? true : false;
						$filter_model = ($setting['ajax_search_model']) ? true : false;
						$filter_tag = ($setting['ajax_search_tag']) ? true : false;
						$filter_description = ($setting['ajax_search_description']) ? true : false;
						
						$filterdata=array(
							'filter_name' => $this->request->get['filter_name'],
							'filter_category_id' => $this->request->get['filter_category_id'],
							'filter_mpn' => $filter_mpn,
							'filter_manufacturer' => $filter_manufacturer,
							'filter_isbn' => $filter_isbn,
							'filter_jan' => $filter_jan,
							'filter_ean' => $filter_ean,
							'filter_upc' => $filter_upc,
							'filter_sku' => $filter_sku,
							'filter_model' => $filter_model,
							'filter_tag' => $filter_tag,
							'filter_description' => $filter_description,
							'start' => 0,
							'limit' => ($setting['ajax_search_limit']!=0) ? $setting['ajax_search_limit'] : 5
						);
						
						$results = (array) $this->model_revolution_revolution->ajaxLiveSearch($filterdata);
						foreach($results as $result){
							if (!empty($result['image'])&&file_exists(DIR_IMAGE . $result['image'])) {
								$image = $this->model_tool_image->resize($result['image'], 50, 50);
							} else {
								$image = $this->model_tool_image->resize('no_image.jpg', 50, 50);
							}

							$product_settings = $this->config->get('revtheme_product_all');
							$zakaz = $product_settings['zakaz'];
							$zakaz_price_null = $product_settings['zakaz_price_null'];
							$revtheme_predzakaz_settings = $this->config->get('revtheme_predzakaz');
							$revtheme_predzakaz = $revtheme_predzakaz_settings['status'];
							if (VERSION >= 2.2) {
								$currency = $this->session->data['currency'];
							} else {
								$currency = '';
							}
							if ($result['quantity'] < 1) {
								if ($zakaz) {
									$price = $this->currency->format($this->tax->calculate($result['price'], $result['tax_class_id'], $this->config->get('config_tax')), $currency);
									$special = $result['special'] != 0.0000 ?  $this->currency->format($this->tax->calculate($result['special'], $result['tax_class_id'], $this->config->get('config_tax')), $currency) : 0;
								} else if ($revtheme_predzakaz) {
									$price = $this->currency->format($this->tax->calculate($result['price'], $result['tax_class_id'], $this->config->get('config_tax')), $currency) . '<span style="color:#999"> '. $result['stock_status'] .'</span>';
									$special = $result['special'] != 0.0000 ?  $this->currency->format($this->tax->calculate($result['special'], $result['tax_class_id'], $this->config->get('config_tax')), $currency . '<span style="color:#999"> '. $result['stock_status'] .'</span>') : 0;
								} else {
									$price = '<span style="color:#999">нет в наличии</span>';
									$special = '';
								}
							} else if ($result['price'] == 0) {
								if ($zakaz_price_null) {
									$price = $this->currency->format($this->tax->calculate($result['price'], $result['tax_class_id'], $this->config->get('config_tax')), $currency);
									$special = $result['special'] != 0.0000 ?  $this->currency->format($this->tax->calculate($result['special'], $result['tax_class_id'], $this->config->get('config_tax')), $currency) : 0;
								} else {
									$price = '<span style="color:#999">нет в наличии</span>';
									$special = '';
								}
							} else {
								$price = $this->currency->format($this->tax->calculate($result['price'], $result['tax_class_id'], $this->config->get('config_tax')), $currency);
								$special = $result['special'] != 0.0000 ?  $this->currency->format($this->tax->calculate($result['special'], $result['tax_class_id'], $this->config->get('config_tax')), $currency) : 0;
							}

							$json[] = array(
								'product_id' => $result['product_id'],
								'name' => $result['name'],
								'name1' => $result['name'],
								'image' => $image,
								'price' => $price,
								'special' => $special,
								'reviews' => $result['reviews']
							);
						}
					}
					$this->response->addHeader('Content-Type: application/json');
					$this->response->setOutput(json_encode($json));
				}
			]]></add>
		</operation>
	</file>
	<file path="catalog/language/{ru-ru,russian}/common/header.php">
		<operation error="skip">
			<search><![CDATA[$_['text_login']]]></search>
			<add position="before"><![CDATA[$_['text_wishlist'] = '<i class="fa fa-heart"></i><span class="hidden-xs hidden-sm">Закладки</span><sup>%s</sup>';]]></add>
		</operation>
	</file>
	<file path="catalog/language/{en-gb,english}/common/header.php">
		<operation error="skip">
			<search><![CDATA[$_['text_login']]]></search>
			<add position="before"><![CDATA[$_['text_wishlist'] = '<i class="fa fa-heart"></i><span class="hidden-xs hidden-sm">Wishlist</span><sup>%s</sup>';]]></add>
		</operation>
	</file>
	<file path="admin/controller/catalog/product.php">
		<operation>
			<search><![CDATA[protected function getForm() {]]></search>
			<add position="after"><![CDATA[
				$this->load->language('revolution/adminmenu');
				$data['tab_extra_tab'] = $this->language->get('tab_extra_tab');
				$data['tab_module'] = $this->language->get('tab_module');
				$data['button_module_add'] = $this->language->get('button_module_add');
				$data['entry_heading'] = $this->language->get('entry_heading');
				$data['entry_foto'] = $this->language->get('entry_foto');
				$data['entry_options_buy'] = $this->language->get('entry_options_buy');
				$this->load->model('tool/image');
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[if (isset($this->error['name']))]]></search>
			<add position="before"><![CDATA[
				if (isset($this->error['tab'])) {
					$data['error_tab'] = $this->error['tab'];
				} else {
					$data['error_tab'] = array();
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$this->load->model('design/layout');]]></search>
			<add position="before"><![CDATA[
				if(isset($this->request->post['product_tab'])){
					$data['product_tabs'] = $this->request->post['product_tab'];
				}elseif(isset($this->request->get['product_id'])){
					$data['product_tabs'] = $this->model_catalog_product->getProductTabbyProductID($this->request->get['product_id']);
				}else{
					$data['product_tabs'] = array();
				}
				if (isset($this->request->post['options_buy'])) {
					$data['options_buy'] = $this->request->post['options_buy'];
				} elseif (!empty($product_info)) {
					$data['options_buy'] = $product_info['options_buy'];
				} else {
					$data['options_buy'] = 0;
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[protected function validateForm() {]]></search>
			<add position="after"><![CDATA[
				if(isset($this->request->post['product_tab'])) {
					foreach($this->request->post['product_tab'] as $key => $tab){
						if($tab){
							foreach($tab['description'] as $language_id => $value){
								if(empty($value['heading'])){
									$this->error['tab'][$key][$language_id] = $this->language->get('error_tab');
								}
							}
						}
					}
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['entry_sort_order'] = $this->language->get('entry_sort_order');]]></search>
			<add position="after"><![CDATA[
				$data['entry_video'] = $this->language->get('entry_video');
				$data['entry_short_description'] = $this->language->get('entry_short_description');
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['product_images'][] = array(]]></search>
			<add position="after"><![CDATA['video' => $product_image['video'],]]></add>
		</operation>
		<operation>
			<search><![CDATA[$product_option_value['points_prefix'],]]></search>
			<add position="after"><![CDATA[
				'opt_image' => $product_option_value['opt_image'],
				'model' => $product_option_value['model'],
				'thumb' => isset($product_option_value['opt_image']) ? $this->model_tool_image->resize($product_option_value['opt_image'], 50, 50) : $this->model_tool_image->resize('no_image.png', 50, 50),
			]]></add>
		</operation>
	</file>
	<file path="admin/model/catalog/product.php">
		<operation>
			<search><![CDATA[$product_id = $this->db->getLastId();]]></search>
			<add position="after"><![CDATA[
				if(isset($data['product_tab'])){
					foreach($data['product_tab'] as $tabdata){
						$this->db->query("INSERT INTO ". DB_PREFIX ."product_tab SET product_id = '".(int)$product_id."', status = '".(int)$tabdata['status']."',sort_order='".(int)$tabdata['sort_order']."'");
						$product_tab_id = $this->db->getLastId();
						foreach($tabdata['description'] as $language_id => $value){
							$this->db->query("INSERT INTO ". DB_PREFIX ."product_tab_desc SET product_tab_id = '".(int)$product_tab_id."', heading = '".$this->db->escape($value['heading'])."', description = '".$this->db->escape($value['description'])."', product_id = '".(int)$product_id."', language_id = '".(int)$language_id."'");
						}
					}
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[date_modified = NOW() WHERE product_id = '" . (int)$product_id . "'");]]></search>
			<add position="after"><![CDATA[
				$this->db->query("DELETE FROM " . DB_PREFIX . "product_tab WHERE product_id = '" . (int)$product_id . "'");
				$this->db->query("DELETE FROM " . DB_PREFIX . "product_tab_desc WHERE product_id = '" . (int)$product_id . "'");
				if(isset($data['product_tab'])){
					foreach($data['product_tab'] as $tabdata){
						$this->db->query("INSERT INTO ". DB_PREFIX ."product_tab SET product_id = '".(int)$product_id."', status = '".(int)$tabdata['status']."',sort_order='".(int)$tabdata['sort_order']."'");
						$product_tab_id = $this->db->getLastId();
						foreach($tabdata['description'] as $language_id => $value){
							$this->db->query("INSERT INTO ". DB_PREFIX ."product_tab_desc SET product_tab_id = '".(int)$product_tab_id."', heading = '".$this->db->escape($value['heading'])."', description = '".$this->db->escape($value['description'])."', product_id = '".(int)$product_id."', language_id = '".(int)$language_id."'");
						}
					}
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$this->db->query("DELETE FROM " . DB_PREFIX . "product WHERE ]]></search>
			<add position="before"><![CDATA[
				$this->db->query("DELETE FROM " . DB_PREFIX . "product_tab WHERE product_id = '" . (int)$product_id . "'");
				$this->db->query("DELETE FROM " . DB_PREFIX . "product_tab_desc WHERE product_id = '" . (int)$product_id . "'");
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[public function getProduct(]]></search>
			<add position="before"><![CDATA[
				public function getProductTabbyProductID($product_id){
					$product_tab_data = array();
					$description = array();
					$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_tab WHERE product_id = '" . (int)$product_id . "'");
					foreach($query->rows as $result){
						$querys = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_tab_desc WHERE product_tab_id = '" . (int)$result['product_tab_id']. "'");
							foreach($querys->rows as $row){
								$description[$row['language_id']]=array(
									'heading' 	  => $row['heading'],
									'description' => $row['description'],
								);
							}
							$product_tab_data[]=array(
								'status' 	 => $result['status'],
								'sort_order' => $result['sort_order'],
								'description' => $description,
							); 
					}
					return $product_tab_data;
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$this->db->query("INSERT INTO " . DB_PREFIX . "product_image SET product_id = '" . (int)$product_id . "', image = '" . $this->db->escape($product_image['image']) . "', sort_order = '" . (int)$product_image['sort_order'] . "'");]]></search>
			<add position="replace"><![CDATA[$this->db->query("INSERT INTO " . DB_PREFIX . "product_image SET product_id = '" . (int)$product_id . "', image = '" . $this->db->escape($product_image['image']) . "', sort_order = '" . (int)$product_image['sort_order'] . "', video = '" . $this->db->escape($product_image['video']) . "'");]]></add>	
		</operation>
		<operation>
			<search><![CDATA[weight_prefix =]]></search>
			<add position="replace"><![CDATA[opt_image = '" . $this->db->escape($product_option_value['opt_image']) . "', model = '" . $this->db->escape($product_option_value['model']) . "', weight_prefix =]]></add>
		</operation>
		<operation>
			<search><![CDATA[pov.weight_prefix]]></search>
			<add position="replace"><![CDATA[pov.weight_prefix, pov.opt_image, pov.model]]></add>
		</operation>
		<operation>
			<search><![CDATA['product_option_value_id' =>]]></search>
			<add position="before"><![CDATA['opt_image' => $product_option_value['opt_image'], 'model' => $product_option_value['model'],]]></add>
		</operation>
		<operation>
			<search><![CDATA[shipping =]]></search>
			<add position="replace"><![CDATA[options_buy = '" . (int)$data['options_buy'] . "', shipping =]]></add>
		</operation>
		<operation>
			<search><![CDATA[description = '" . $this->db->escape($value['description']) . "',]]></search>
			<add position="replace"><![CDATA[description = '" . $this->db->escape($value['description']) . "', short_description = '" . $this->db->escape($value['short_description']) . "',]]></add>
		</operation>
		<operation>
			<search><![CDATA[$result['description'],]]></search>
			<add position="replace"><![CDATA[$result['description'], 'short_description' => nl2br($result['short_description']),]]></add>
		</operation>
	</file>
	<file path="admin/view/template/catalog/product_form.tpl">
		<operation>
			<search><![CDATA[<?php echo $tab_design; ?></a></li>]]></search>
			<add position="after"><![CDATA[
				<li class="deloppro"><a href="#tab-extra" data-toggle="tab"><?php echo $tab_extra_tab; ?></a></li>
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[<div class="tab-pane" id="tab-reward">]]></search>
			<add position="before"><![CDATA[
				<div class="tab-pane" id="tab-extra" class="deloppro">
						<div class="row">
							<div class="col-sm-2">
								<ul class="nav nav-pills nav-stacked" id="extra">
									<?php $tab_row = 0; ?>
									<?php foreach($product_tabs as $tab){  ?>
									 <li><a href="#tab-extra<?php echo $tab_row; ?>" data-toggle="tab"><i class="fa fa-minus-circle" onclick="$('a[href=\'#tab-extra<?php echo $tab_row; ?>\']').parent().remove(); $('#tab-extra<?php echo $tab_row; ?>').remove(); $('#extra a:first').tab('show');"></i> Tab-<?php echo $tab_row ?></a></li>
									 <?php $tab_row++; ?>
									 <?php } ?>
									  <li id="extratab-add"><a style="cursor:pointer" onclick="addproducttab();"><i class="fa fa-plus-circle"></i> <?php echo $button_module_add; ?></a></li>
								</ul>
							</div>
							<?php $tab_row = 0; ?>
							<div class="col-sm-10">
							<div class="tab-content">
							   <?php foreach($product_tabs as $tab){  ?>
								  <div class="tab-pane" id="tab-extra<?php echo $tab_row; ?>">
										<ul class="nav nav-tabs" id="language<?php echo $tab_row; ?>">
											<?php foreach ($languages as $language) { ?>
											<li><a href="#tab-extra-<?php echo $tab_row; ?>-language<?php echo $language['language_id']; ?>" data-toggle="tab"><img src="<?php echo (VERSION >= 2.2) ? 'language/'.$language['code'].'/'.$language['code'].'.png' : 'view/image/flags/'.$language['image']; ?>" title="<?php echo $language['name']; ?>" /> <?php echo $language['name']; ?></a></li>
											<?php } ?>
										</ul>
									 <div class="tab-content">
									 <?php foreach ($languages as $language){ ?>
									   <div class="tab-pane" id="tab-extra-<?php echo $tab_row; ?>-language<?php echo $language['language_id']; ?>">
											<div class="form-group">
												<label class="col-sm-2 control-label" for="input-heading-language<?php echo $language['language_id']; ?>"><?php echo $entry_heading; ?></label>
												<div class="col-sm-10">
												  <input name="product_tab[<?php echo $tab_row; ?>][description][<?php echo $language['language_id']; ?>][heading]" type="text" placeholder="<?php echo $entry_heading; ?>" id="input-heading<?php echo $tab_row; ?>-language<?php echo $language['language_id']; ?>" value="<?php echo (isset($tab['description'][$language['language_id']]) ? $tab['description'][$language['language_id']]['heading'] : null) ?>" class="form-control" />
												  <?php if(isset($error_tab[$tab_row][$language['language_id']])){ ?>
													<div class="text-danger"><?php echo $error_tab[$tab_row][$language['language_id']]; ?></div>
												  <?php } ?>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label" for="input-description<?php echo $tab_row; ?>-language<?php echo $language['language_id']; ?>"><?php echo $entry_description; ?></label>
												<div class="col-sm-10">
												  <textarea name="product_tab[<?php echo $tab_row; ?>][description][<?php echo $language['language_id']; ?>][description]" placeholder="<?php echo $entry_description; ?>" id="input-description<?php echo $tab_row; ?>-language<?php echo $language['language_id']; ?>" class="form-control summernote"><?php echo (isset($tab['description'][$language['language_id']]) ? $tab['description'][$language['language_id']]['description'] : null) ?></textarea>
												</div>
											</div>
										</div>
										<?php } ?>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label" for="input-status<?php echo $tab_row; ?>"><?php echo $entry_status; ?></label>
											<div class="col-sm-10">
											  <select name="product_tab[<?php echo $tab_row; ?>][status]" id="input-status<?php echo $tab_row; ?>" class="form-control">
												<?php if (isset($tab['status']) && $tab['status']) { ?>
												<option value="1" selected="selected"><?php echo $text_enabled; ?></option>
												<option value="0"><?php echo $text_disabled; ?></option>
												<?php } else { ?>
												<option value="1"><?php echo $text_enabled; ?></option>
												<option value="0" selected="selected"><?php echo $text_disabled; ?></option>
												<?php } ?>
											  </select>
											</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label" for="input-sort-order<?php echo $tab_row; ?>"><?php echo $entry_sort_order; ?></label>
										<div class="col-sm-10">
										  <input type="text" name="product_tab[<?php echo $tab_row; ?>][sort_order]" value="<?php echo isset($tab['sort_order']) ? $tab['sort_order'] : '';  ?>" placeholder="<?php echo $entry_sort_order; ?>" id="input-sort-order<?php echo $tab_row; ?>" class="form-control" />
										</div>
									</div>
									<?php $tab_row++; ?>
							   </div>
							   <?php } ?>
							</div>
						</div>
					</div>
				</div>
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[<?php echo $footer; ?>]]></search>
			<add position="before"><![CDATA[
				<script type="text/javascript"><!--
				<?php if ($ckeditor) { ?>
				<?php foreach($product_tabs as $key => $tab){  ?>
				<?php foreach ($languages as $language) { ?>
				ckeditorInit('input-description<?php echo $key; ?>-language<?php echo $language['language_id']; ?>', getURLVar('token'));
				<?php } ?>
				<?php } ?>
				<?php } ?>
				//--></script>
				<script type="text/javascript"><!--
				var tab_row = <?php echo $tab_row; ?>;
				function addproducttab(){
					html  = '<div class="tab-pane" id="tab-extra' + tab_row + '">';
					html += '  <ul class="nav nav-tabs" id="language' + tab_row + '">';
					<?php foreach ($languages as $language) { ?>
					html += '    <li><a href="#tab-extra-' + tab_row + '-language<?php echo $language['language_id']; ?>" data-toggle="tab"><img src="<?php echo (VERSION >= 2.2) ? 'language/'.$language['code'].'/'.$language['code'].'.png' : 'view/image/flags/'.$language['image']; ?>" title="<?php echo $language['name']; ?>" /> <?php echo $language['name']; ?></a></li>';
					<?php } ?>
					html += '  </ul>';
					html += '  <div class="tab-content">';
					<?php foreach ($languages as $language){ ?>
					html += '    <div class="tab-pane" id="tab-extra-' + tab_row + '-language<?php echo $language['language_id']; ?>">';
					html += '      <div class="form-group">';
					html += '        <label class="col-sm-2 control-label" for="input-heading' + tab_row + '-language<?php echo $language['language_id']; ?>"><?php echo $entry_heading; ?></label>';
					html += '        <div class="col-sm-10"><input type="text" name="product_tab[' + tab_row + '][description][<?php echo $language['language_id']; ?>][heading]" placeholder="<?php echo $entry_heading; ?>" id="input-heading' + tab_row + '-language<?php echo $language['language_id']; ?>" value="" class="form-control"/></div>';
					html += '      </div>';
					html += '      <div class="form-group">';
					html += '        <label class="col-sm-2 control-label" for="input-description' + tab_row + '-language<?php echo $language['language_id']; ?>"><?php echo $entry_description; ?></label>';
					html += '        <div class="col-sm-10"><textarea name="product_tab['+ tab_row  +'][description][<?php echo $language['language_id']; ?>][description]" id="input-description' + tab_row + '-language<?php echo $language['language_id']; ?>"></textarea></div>';
					html += '      </div>';
					html += '    </div>';
					<?php } ?>
					html += '  </div>';
					html += ' <div class="form-group">';
					html += '<label class="col-sm-2 control-label" for="input-status<?php echo $tab_row; ?>"><?php echo $entry_status; ?></label>';
					html += '<div class="col-sm-10">';
					html += '<select name="product_tab['+ tab_row  +'][status]" id="input-status<?php echo $tab_row; ?>" class="form-control">';
					html += '<option value="1" selected="selected"><?php echo $text_enabled; ?></option>';
					html += '<option value="0"><?php echo $text_disabled; ?></option>';
					html += ' </select>';
					html += ' </div>';
					html += ' </div>';
					html += ' <div class="form-group">';
					html += ' <label class="col-sm-2 control-label" for="input-sort-order"><?php echo $entry_sort_order; ?></label>';
					html += '<div class="col-sm-10">';
					html += '<input type="text" name="product_tab['+ tab_row +'][sort_order]" value="" placeholder="<?php echo $entry_sort_order; ?>" id="input-sort-order" class="form-control" />';
					html += '</div>';
					html += '</div>';
					html += '</div>';
					
					$('#tab-extra .tab-content:first-child').prepend(html);
					
					<?php if (!$ckeditor) { ?>
					<?php foreach($languages as $language){ ?>
					$('#input-description' + tab_row + '-language<?php echo $language['language_id']; ?>').summernote({
						height: 300
					});
					<?php } ?>
					<?php } else { ?>
					<?php foreach ($languages as $language) { ?>
					ckeditorInit('input-description' + tab_row + '-language<?php echo $language['language_id']; ?>', getURLVar('token'));
					<?php } ?>
					<?php } ?>
					
					$('#extratab-add').before('<li><a href="#tab-extra' + tab_row + '" data-toggle="tab"><i class="fa fa-minus-circle" onclick="$(\'a[href=\\\'#tab-extra' + tab_row + '\\\']\').parent().remove(); $(\'#tab-extra' + tab_row + '\').remove(); $(\'#tab-extra a:first\').tab(\'show\');"></i> <?php echo $tab_module; ?> ' + tab_row + '</a></li>');

					$('#tab-extra a[href=\'#tab-extra' + tab_row + '\']').tab('show');
					$('#tab-extra #language' + tab_row + ' li:first-child a').tab('show');

					tab_row++;
				}
				//--></script>
				<script type="text/javascript"><!--
				$('#tab-extra li:first-child a').tab('show');
				<?php foreach($product_tabs as $key => $tab){  ?>
				$('#tab-extra #language<?php echo $key; ?> li:first-child a').tab('show');
				<?php } ?>
				//--></script></div>
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[<td class="text-right"><?php echo $entry_sort_order; ?></td>]]></search>
			<add position="before"><![CDATA[<td class="text-left"><?php echo $entry_video; ?></td>]]></add>
		</operation>
		<operation>
			<search><![CDATA[id="input-image<?php echo $image_row; ?>" /></td>]]></search>
			<add position="after"><![CDATA[<td class="text-left"><input type="text" name="product_image[<?php echo $image_row; ?>][video]" value="<?php echo $product_image['video']; ?>" class="form-control" /></td>]]></add>
		</operation>
		<operation>
			<search><![CDATA[id="input-image' + image_row + '" /></td>';]]></search>
			<add position="after"><![CDATA[html += '<td class="text-left"><input type="text" name="product_image[' + image_row + '][video]" value="" class="form-control" /></td>';]]></add>
		</operation>
		<operation>
			<search><![CDATA[<td class="text-left"><button type="button" onclick="addImage();"]]></search>
			<add position="before" offset="1"><![CDATA[<td class="repnige" colspan="3"></td>]]></add>
		</operation>
		<operation>
			<search><![CDATA[<td class="repnige" colspan="3"></td>]]></search>
			<add position="replace" offset="1"><![CDATA[<td colspan="3"></td>]]></add>
		</operation>
		<operation>
			<search><![CDATA[<?php if ($product_option_value['price_prefix'] == '-') { ?>]]></search>
			<add position="before"><![CDATA[
				<?php if ($product_option_value['price_prefix'] == '=') { ?>
				<option value="=" selected="selected">=</option>
				<?php } else { ?>
				<option value="=">=</option>
				<?php } ?>
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[<?php if ($product_option_value['points_prefix'] == '-') { ?>]]></search>
			<add position="before"><![CDATA[
				<?php if ($product_option_value['points_prefix'] == '=') { ?>
				<option value="=" selected="selected">=</option>
				<?php } else { ?>
				<option value="=">=</option>
				<?php } ?>
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[<?php if ($product_option_value['weight_prefix'] == '-') { ?>]]></search>
			<add position="before"><![CDATA[
				<?php if ($product_option_value['weight_prefix'] == '=') { ?>
				<option value="=" selected="selected">=</option>
				<?php } else { ?>
				<option value="=">=</option>
				<?php } ?>
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[<option value="-">-</option>';]]></search>
			<add position="before"><![CDATA[html += '<option value="=">=</option>';]]></add>
		</operation>
		<operation>
			<search><![CDATA[<table id="option-value<?php echo $option_row; ?>" class="table table-striped table-bordered table-hover">]]></search>
			<add position="replace" offset="5"><![CDATA[
				<table id="option-value<?php echo $option_row; ?>" class="table table-striped table-bordered table-hover">
				<thead>
				<tr>
				<td class="text-left"><?php echo $entry_option_value; ?></td>
				<td class="text-right"><?php echo $entry_quantity; ?></td>
				<td class="text-left"><?php echo $entry_subtract; ?></td>
				<td class="text-left"><?php echo $entry_model; ?></td>
				<td class="text-left"><?php echo $entry_foto; ?></td>
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[<td class="text-right"><select name="product_option[<?php echo $option_row; ?>][product_option_value][<?php echo $option_value_row; ?>][price_prefix]"]]></search>
			<add position="before"><![CDATA[
				<td class="text-right"><input type="text" name="product_option[<?php echo $option_row; ?>][product_option_value][<?php echo $option_value_row; ?>][model]" value="<?php echo $product_option_value['model']; ?>" class="form-control" /></td>
				<td class="text-left">
				<a href="" id="thumb-image_product_option_value_<?php echo $option_value_row; ?>" data-toggle="image" class="img-thumbnail width_initial">
				<img style="width: 50px;" src="<?php echo $product_option_value['thumb']; ?>" alt="" title="" data-placeholder="<?php echo $placeholder; ?>"/>
				</a>
				<input type="hidden" name="product_option[<?php echo $option_row; ?>][product_option_value][<?php echo $option_value_row; ?>][opt_image]" id="product_option_value_image_<?php echo $option_value_row; ?>" value="<?php echo $product_option_value['opt_image']; ?>" />
				</td>
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[<?php $option_value_row++; ?>]]></search>
			<add position="replace" offset="5"><![CDATA[
				<?php $option_value_row++; ?>
				<?php } ?>
				</tbody>
				<tfoot>
				<tr>
				<td colspan="8"></td>
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[<td colspan="6"></td>';]]></search>
			<add position="replace"><![CDATA[<td colspan="8"></td>';]]></add>
		</operation>
		<operation>
			<search><![CDATA[<td class="text-left"><?php echo $entry_subtract; ?></td>';]]></search>
			<add position="after"><![CDATA[html += '<td class="text-left"><?php echo $entry_model; ?></td>'; html += '<td class="text-left"><?php echo $entry_foto; ?></td>']]></add>
		</operation>
		<operation>
			<search><![CDATA[<td class="text-right"><select name="product_option[' + option_row + '][product_option_value][' + option_value_row + '][price_prefix]]]></search>
			<add position="before"><![CDATA[html += '  <td class="text-right"><input type="text" name="product_option[' + option_row + '][product_option_value][' + option_value_row + '][model]" value="" class="form-control" /></td>'; html += '<td class="text-left"><a href="" id="thumb-image_product_option_value_' + option_value_row + '" data-toggle="image" class="img-thumbnail width_initial"><img style="width: 50px;" src="<?php echo $placeholder; ?>" alt="" title="" data-placeholder="<?php echo $placeholder; ?>" /><input type="hidden" name="product_option[' + option_row + '][product_option_value][' + option_value_row + '][opt_image]" value="" id="product_option_value_image_' + option_value_row + '" /></td>']]></add>
		</operation>
		<operation>
			<search><![CDATA[<div class="tab-pane" id="tab-option">]]></search>
			<add position="after"><![CDATA[
				<div class="row">
					<div class="col-sm-12">
						<div class="form-group">
							<label class="col-sm-2 control-label" for="input-value-options_buy"><?php echo $entry_options_buy; ?></label>
							<div class="col-sm-10">
							  <label class="radio-inline">
								<?php if ($options_buy) { ?>
								<input type="radio" name="options_buy" value="1" checked="checked" />
								<?php echo $text_yes; ?>
								<?php } else { ?>
								<input type="radio" name="options_buy" value="1" />
								<?php echo $text_yes; ?>
								<?php } ?>
							  </label>
							  <label class="radio-inline">
								<?php if (!$options_buy) { ?>
								<input type="radio" name="options_buy" value="0" checked="checked" />
								<?php echo $text_no; ?>
								<?php } else { ?>
								<input type="radio" name="options_buy" value="0" />
								<?php echo $text_no; ?>
								<?php } ?>
							  </label>
							</div>
						</div>
					</div>
				</div>
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[<label class="col-sm-2 control-label" for="input-description<?php echo $language['language_id']; ?>">]]></search>
			<add position="before" offset="1"><![CDATA[
				<div class="form-group">
					<label class="col-sm-2 control-label" for="input-short_description<?php echo $language['language_id']; ?>"><?php echo $entry_short_description; ?></label>
					<div class="col-sm-10">
					  <textarea name="product_description[<?php echo $language['language_id']; ?>][short_description]" id="input-short_description<?php echo $language['language_id']; ?>" class="form-control"><?php echo isset($product_description[$language['language_id']]) ? $product_description[$language['language_id']]['short_description'] : ''; ?></textarea>
					</div>
				</div>
			]]></add>
		</operation>
	</file>
	<file path="catalog/model/catalog/product.php">
		<operation>
			<search><![CDATA[$sql = "SELECT p.product_id, (SELECT AVG(rating)]]></search>
			<add position="replace"><![CDATA[$sql = "SELECT p.product_id, p.price, p.quantity > 0 as nalichie, p.price > 0 as nalichie2, (SELECT AVG(rating)]]></add>
		</operation>
		<operation>
			<search><![CDATA[$sql = "SELECT DISTINCT ps.product_id, (SELECT AVG(rating)]]></search>
			<add position="replace"><![CDATA[$sql = "SELECT DISTINCT ps.product_id, p.price, p.quantity > 0 as nalichie, p.price > 0 as nalichie2, (SELECT AVG(rating)]]></add>
		</operation>
		<operation>
			<search><![CDATA[if (isset($data['sort']) && in_array($data['sort'], $sort_data)) {]]></search>
			<add position="before"><![CDATA[
				$product_settings = $this->config->get('revtheme_product_all');
				$zakaz = $product_settings['zakaz'];
				$zakaz_price_null = $product_settings['zakaz_price_null'];
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$sql .= " GROUP BY p.product_id";]]></search>
			<add position="replace"><![CDATA[]]></add>
		</operation>
		<operation>
			<search><![CDATA[$sql .= " ORDER BY LCASE(" . $data['sort'] . ")";]]></search>
			<add position="replace"><![CDATA[
				if ($zakaz && $zakaz_price_null) {
					$sql .= " ORDER BY LCASE(" . $data['sort'] . ")";
				} else if ($zakaz && !$zakaz_price_null) {
					$sql .= " ORDER BY nalichie2 DESC, LCASE(" . $data['sort'] . ")";
				} else if (!$zakaz && $zakaz_price_null) {
					$sql .= " ORDER BY nalichie DESC, LCASE(" . $data['sort'] . ")";
				} else {
					$sql .= " ORDER BY nalichie2 DESC, nalichie DESC, LCASE(" . $data['sort'] . ")";
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$sql .= " ORDER BY (CASE WHEN special IS NOT NULL THEN special WHEN discount IS NOT NULL THEN discount ELSE p.price END)";]]></search>
			<add position="replace"><![CDATA[
				if ($zakaz && $zakaz_price_null) {
					$sql .= " ORDER BY (CASE WHEN special IS NOT NULL THEN special WHEN discount IS NOT NULL THEN discount ELSE p.price END)";
				} else if ($zakaz && !$zakaz_price_null) {
					$sql .= " ORDER BY nalichie2 DESC, (CASE WHEN special IS NOT NULL THEN special WHEN discount IS NOT NULL THEN discount ELSE p.price END)";
				} else if (!$zakaz && $zakaz_price_null) {
					$sql .= " ORDER BY nalichie DESC, (CASE WHEN special IS NOT NULL THEN special WHEN discount IS NOT NULL THEN discount ELSE p.price END)";
				} else {
					$sql .= " ORDER BY nalichie2 DESC, nalichie DESC, (CASE WHEN special IS NOT NULL THEN special WHEN discount IS NOT NULL THEN discount ELSE p.price END)";
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$sql .= " ORDER BY " . $data['sort'];]]></search>
			<add position="replace"><![CDATA[
				if ($zakaz && $zakaz_price_null) {
					$sql .= " ORDER BY " . $data['sort'];
				} else if ($zakaz && !$zakaz_price_null) {
					$sql .= " ORDER BY nalichie2 DESC, " . $data['sort'];
				} else if (!$zakaz && $zakaz_price_null) {
					$sql .= " ORDER BY nalichie DESC, " . $data['sort'];
				} else {
					$sql .= " ORDER BY nalichie2 DESC, nalichie DESC, " . $data['sort'];
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$sql .= " ORDER BY p.sort_order";]]></search>
			<add position="replace"><![CDATA[
				if ($zakaz && $zakaz_price_null) {
					$sql .= " ORDER BY p.sort_order";
				} else if ($zakaz && !$zakaz_price_null) {
					$sql .= " ORDER BY nalichie2 DESC, p.sort_order";
				} else if (!$zakaz && $zakaz_price_null) {
					$sql .= " ORDER BY nalichie DESC, p.sort_order";	
				} else {
					//if (isset($data['init_filter'])) {
					//	$sql .= " ORDER BY p.sort_order";
					//} else {
						$sql .= " ORDER BY nalichie2 DESC, nalichie DESC, p.sort_order";
					//}
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA['ps.price',]]></search>
			<add position="after"><![CDATA['ps.date_end',]]></add>
		</operation>
		<operation>
			<search><![CDATA[$product_option_value['price_prefix'],]]></search>
			<add position="after"><![CDATA[
				'points' => $product_option_value['points'],
				'points_prefix' => $product_option_value['points_prefix'],
				'opt_image' => $product_option_value['opt_image'],
				'model' => $product_option_value['model'],
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$query->row['viewed']]]></search>
			<add position="after"><![CDATA[,'options_buy' => $query->row['options_buy'], 'short_description' => nl2br($query->row['short_description'])]]></add>
		</operation>
		<operation>
			<search><![CDATA[$product_option['required']]]></search>
			<add position="after"><![CDATA[,'opt_image' => $product_option['opt_image']]]></add>
		</operation>
	</file>
	<file path="catalog/language/{ru-ru,russian}/checkout/cart.php">
		<operation error="skip">
			<search><![CDATA[$_['error_recurring_required']]]></search>
			<add position="before"><![CDATA[
				$_['text_success'] = 'Товар <a href="%s">%s</a> добавлен в <a href="%s">корзину</a>!';
				$_['error_required'] = 'Пожалуйста, выберите %s!';
			]]></add>
		</operation>
	</file>
	<file path="catalog/language/{ru-ru,russian}/product/category.php">
		<operation error="skip">
			<search><![CDATA[Сортировать:]]></search>
			<add position="replace"><![CDATA[Сортировка:]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[Показывать:]]></search>
			<add position="replace"><![CDATA[Показать:]]></add>
		</operation>
	</file>
	<file path="catalog/language/{ru-ru,russian}/product/manufacturer.php">
		<operation error="skip">
			<search><![CDATA[There are no products to list.]]></search>
			<add position="replace"><![CDATA[Нет товаров данного производителя.]]></add>
		</operation>
	</file>
	<file path="catalog/controller/product/{special,manufacturer,category,search}.php">
		<operation>
			<search><![CDATA[$this->load->model('tool/image');]]></search>
			<add position="after"><![CDATA[
				$this->load->model('account/wishlist');
				$this->load->language('revolution/revolution');
				$data['setting_all_settings'] = $this->config->get('revtheme_all_settings');
				$data['revpopuporder_settings'] = $revpopuporder_settings = $this->config->get('revtheme_catalog_popuporder');
				$data['revpopuporder'] = $revpopuporder_settings['status'];
				$setting_sort_default = $this->config->get('revtheme_catalog_sorts_category');
				$data['setting_catalog_all'] = $setting_catalog_all = $this->config->get('revtheme_catalog_all');
				$data['podcategory_status'] = $setting_catalog_all['podcategory_status'];
				$data['podcategory_imgs'] = $setting_catalog_all['podcategory_imgs'];
				$data['popup_view'] = $setting_catalog_all['popup_view'];
				$data['img_slider'] = $setting_catalog_all['img_slider'];
				$data['rev_srav_prod'] = $setting_catalog_all['rev_srav_prod'];
				$data['rev_wish_prod'] = $setting_catalog_all['rev_wish_prod'];
				$data['ch_quantity'] = $setting_catalog_all['ch_quantity'];
				if (isset($setting_catalog_all['vid_grid'])) { $data['vid_grid'] = true; } else { $data['vid_grid'] = false; }
				if (isset($setting_catalog_all['vid_list'])) { $data['vid_list'] = true; } else { $data['vid_list'] = false; }
				if (isset($setting_catalog_all['vid_price'])) { $data['vid_price'] = true; } else { $data['vid_price'] = false; }
				$product_settings = $this->config->get('revtheme_product_all');
				$data['zakaz'] = $product_settings['zakaz'];
				$data['zakaz_price_null'] = $product_settings['zakaz_price_null'];
				$data['text_catalog_stiker_netu_2'] = $this->language->get('text_catalog_stiker_netu');
				$data['recalc_price'] = $product_settings['recalc_price'];
				$data['q_zavisimost'] = $product_settings['q_zavisimost'];
				$data['opt_price'] = $product_settings['opt_price'];
				$data['text_catalog_stiker_last'] = $this->language->get('text_catalog_stiker_last');
				$data['text_catalog_stiker_best'] = $this->language->get('text_catalog_stiker_best');
				$data['text_catalog_revpopup_purchase'] = $this->language->get('text_catalog_revpopup_purchase');
				$data['text_catalog_revpopup_view'] = $this->language->get('text_catalog_revpopup_view');
				$data['text_catalog_price_na_zakaz'] = $this->language->get('text_catalog_price_na_zakaz');
				$description_options = $this->config->get('revtheme_cat_attributes');
				$data['description_options'] = $this->config->get('revtheme_cat_attributes');
				$data['text_select'] = $this->language->get('text_select');
				$data['revtheme_product_all'] = $this->config->get('revtheme_product_all');
				$data['text_option_option'] = $this->language->get('text_option_option');
				$revpopuppredzakaz_settings = $this->config->get('revtheme_predzakaz');
				$data['predzakaz_button'] = $revpopuppredzakaz_settings['status'];
				$data['text_predzakaz'] = $this->language->get('text_predzakaz');
				if ($setting_catalog_all['category_desc']) { $data['category_description_class'] = 'c_desc_top'; } else { $data['category_description_class'] = 'dnone'; }
				$data['chislo_ryad'] = $setting_catalog_all['chislo_ryad'];
				
				if (VERSION >= 2.2) {
					$config_image_product_width = $data['catalog_img_width'] = $this->config->get($this->config->get('config_theme') . '_image_product_width');
					$config_image_product_height = $this->config->get($this->config->get('config_theme') . '_image_product_height');
					$currency = $this->session->data['currency'];
					$config_product_description_length = $this->config->get($this->config->get('config_theme') . '_product_description_length');
					$config_product_limit = $this->config->get($this->config->get('config_theme') . '_product_limit');
				} else {
					$config_image_product_width = $data['catalog_img_width'] = $this->config->get('config_image_product_width');
					$config_image_product_height = $this->config->get('config_image_product_height');
					$currency = '';
					$config_product_description_length = $this->config->get('config_product_description_length');
					$config_product_limit = $this->config->get('config_product_limit');
				}
				$data['currency_code'] = $this->session->data['currency'];
				$var_currency = array();
				$var_currency['value'] = $this->currency->getValue($currency);
				$var_currency['symbol_left'] = $this->currency->getSymbolLeft($currency);
				$var_currency['symbol_right'] = $this->currency->getSymbolRight($currency);
				$var_currency['decimals'] = $this->currency->getDecimalPlace($currency);
				$var_currency['decimal_point'] = $this->language->get('decimal_point');
				$var_currency['thousand_point'] = $this->language->get('thousand_point');
				$data['currency'] = $var_currency;
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$sort = 'p.sort_order';]]></search>
			<add position="replace"><![CDATA[$sort = $setting_sort_default['sort_default'];]]></add>
		</operation>
		<operation>
			<search><![CDATA[$order = 'ASC';]]></search>
			<add position="replace"><![CDATA[$order = $setting_sort_default['sort_default_adesc'];]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['products'] = array();]]></search>
			<add position="before"><![CDATA[
				$this->load->model('revolution/revolution');
				$settings_stikers = $this->config->get('revtheme_catalog_stiker');
				if ($settings_stikers['status']) {
					$data['stikers_status'] = true;

					if ($settings_stikers['new_status']) {
						$settings_last = $this->config->get('revtheme_catalog_last');
						if ($settings_last['last_products'] != '') {
							$date_added = array_flip(explode(',', $settings_last['last_products']));
						} else {
							if ($settings_last['filter_day']) {
								$filter_day = date('Y-m-d H:i:s', strtotime('now - ' . $settings_last['filter_day'] . ' days'));
							} else {
								$filter_day = false;
							}
							$data_last = array(
								'sort'  => 'p.date_added',
								'order' => 'DESC',
								'start' => 0,
								'limit' => $settings_last['limit'],
								'filter_day' => $filter_day
								);
							$date_added = $this->model_revolution_revolution->getLastProducts($data_last);
						}
					}

					if ($settings_stikers['best_status']) {
						$settings_best = $this->config->get('revtheme_catalog_best');
						if ($settings_best['best_products'] != '') {
							$best_seller = array_flip(explode(',', $settings_best['best_products']));
						} else {
							$data_best = array(
								'sort'  => 'p.sales',
								'order' => 'DESC',
								'start' => 0,
								'limit' => $settings_best['limit'],
								'filter_buy' => $settings_best['filter_buy']
							);
							$best_seller = $this->model_revolution_revolution->getBestProducts($data_best);
						}
					}
				} else {
					$data['stikers_status'] = false;
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[if ($result['image']) {]]></search>
			<add position="before"><![CDATA[
				if (isset($this->session->data['compare'])) {
					if (in_array($result['product_id'], $this->session->data['compare'])) {
						$compare_class = 'in_compare';
						$button_compare = $this->language->get('button_compare_out');
					} else {
						$compare_class = '';
						$button_compare = $this->language->get('button_compare');
					}
				} else {
					$compare_class = '';
					$button_compare = $this->language->get('button_compare');
				}
				
				if (isset($this->session->data['wishlist'])) {
					if (in_array($result['product_id'], $this->session->data['wishlist'])) {
						$wishlist_class = 'in_wishlist';
						$button_wishlist = $this->language->get('button_wishlist_out');
					} else {
						$wishlist_class = '';
						$button_wishlist = $this->language->get('button_wishlist');
					}
				} else {
					$wishlist_class = '';
					$button_wishlist = $this->language->get('button_wishlist');
				}
				
				if ($this->customer->isLogged()) {
					$this->load->model('account/wishlist');
					$wishlist_register = $this->model_account_wishlist->getWishlist();
					if ($wishlist_register) {
						$wishlist_register2 = array();
						foreach ($wishlist_register as $result_wishlist_register_id) {
							$wishlist_register_id[] = $result_wishlist_register_id['product_id'];
						}
						if (in_array($result['product_id'], $wishlist_register_id)) {
							$wishlist_class = 'in_wishlist';
							$button_wishlist = $this->language->get('button_wishlist_out');
						} else {
							$wishlist_class = '';
							$button_wishlist = $this->language->get('button_wishlist');
						}
					}
				}
				
				if ($settings_stikers['new_status']) {
					if (isset($date_added[$result['product_id']])) {
						$stiker_last = true;
					} else {
						$stiker_last = false;
					}
				} else {
					$stiker_last = false;
				}
				
				if ($settings_stikers['best_status']) {
					if (isset($best_seller[$result['product_id']])) {
						$stiker_best = true;	
					} else {
						$stiker_best = false;
					}
				} else {
					$stiker_best = false;
				}
				
				if ($settings_stikers['spec_status']) {
					$stiker_spec = true;
				} else {
					$stiker_spec = false;
				}
				
				if ($settings_stikers['stock_status']) {
					$stiker_stock = true;
				} else {
					$stiker_stock = false;
				}
				
				if ($settings_stikers['upc']) {
					$stiker_upc = $result['upc'];
				} else {
					$stiker_upc = false;
				}
				if ($settings_stikers['ean']) {
					$stiker_ean = $result['ean'];
				} else {
					$stiker_ean = false;
				}
				if ($settings_stikers['jan']) {
					$stiker_jan = $result['jan'];
				} else {
					$stiker_jan = false;
				}
				if ($settings_stikers['isbn']) {
					$stiker_isbn = $result['isbn'];
				} else {
					$stiker_isbn = false;
				}
				if ($settings_stikers['mpn']) {
					$stiker_mpn = $result['mpn'];
				} else {
					$stiker_mpn = false;
				}
				if ($settings_stikers['stiker_netu_stock']) {
					$text_catalog_stiker_netu = $result['stock_status'];
				} else {
					$text_catalog_stiker_netu = $this->language->get('text_catalog_stiker_netu');
				}
				if ($settings_stikers['sklad_status']) {
					$stiker_sklad_status = $result['stock_status'];
				} else {
					$stiker_sklad_status = false;
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$price = $this]]></search>
			<add position="before"><![CDATA[$price_number = round($result['price'], 2);]]></add>
		</operation>
		<operation>
			<search><![CDATA[$price = false;]]></search>
			<add position="after"><![CDATA[$price_number = false;]]></add>
		</operation>
		<operation>
			<search><![CDATA[$special = $this]]></search>
			<add position="before"><![CDATA[$special_number = $result['special'];]]></add>
		</operation>
		<operation>
			<search><![CDATA[$special = false;]]></search>
			<add position="after"><![CDATA[$special_number = false;]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['products'][] = array(]]></search>
			<add position="before"><![CDATA[
				$brand = $this->model_revolution_revolution->get_pr_brand($result['product_id']);
				
				if ($this->config->get('config_review_status')) {
					$reviews = (int)$result['reviews'];
				} else {
					$reviews = false;
				}
				
				$description = '';
				$options = false;
				if ($description_options['description_on']) {
					if ($description_options['zamena_description']) {
						$description = $this->model_revolution_revolution->getAttrText($result['product_id']);
					} else {
						$description = utf8_substr(strip_tags(html_entity_decode($result['description'], ENT_QUOTES, 'UTF-8')), 0, $config_product_description_length) . '...';
					}
				}
				if ($description_options['options_in_cat']) {
					$options = array();
					$pr_options = $this->model_catalog_product->getProductOptions($result['product_id']);
				
					foreach ($pr_options as $option) {
						$product_option_value_data = array();

						foreach ($option['product_option_value'] as $option_value) {
							if (!$option_value['subtract'] || ($option_value['quantity'] > 0)) {
								if ((($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) && (float)$option_value['price']) {
									$option_price = $this->currency->format($this->tax->calculate($option_value['price'], $result['tax_class_id'], $this->config->get('config_tax') ? 'P' : false), $currency);
								} else {
									$option_price = false;
								}

								if ($option_value['price_prefix'] == '=') {
									$price_prefix = '';
								} else {
									$price_prefix = $option_value['price_prefix'];
								}
								
								$product_option_value_data[] = array(
									'product_option_value_id' => $option_value['product_option_value_id'],
									'quantity'            	  => $option_value['quantity'],
									'model'            	  	  => $option_value['model'],
									'option_value_id'         => $option_value['option_value_id'],
									'name'                    => $option_value['name'],
									'image'                   => $option_value['image'] ? $this->model_tool_image->resize($option_value['image'], 50, 50) : '',
									'price'                   => $option_price,
									'price_prefix'            => $price_prefix
								);
							}
						}

						$options[] = array(
							'product_option_id'    => $option['product_option_id'],
							'product_option_value' => $product_option_value_data,
							'option_id'            => $option['option_id'],
							'name'                 => $option['name'],
							'type'                 => $option['type'],
							'value'                => $option['value'],
							'required'             => $option['required'],
							'opt_image'            => $option['opt_image']
						);
					}
				}
				$product_in_cart = false;
				if ($setting_catalog_all['product_in_cart']) {
					$products_in_cart = $this->cart->getProducts();
					foreach ($products_in_cart as $product_cart) {
						if ($product_cart['product_id'] == $result['product_id']) {
							$product_in_cart = true;
						}
					}
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[if ($result['image']) {]]></search>
			<add position="after"><![CDATA[
				$images = array();
				$this->load->model('catalog/product');
				$add_images = $this->model_catalog_product->getProductImages($result['product_id']);
				foreach ($add_images as $add_image) {
					$images[] = array(
						'thumb' => $this->model_tool_image->resize($add_image['image'], $config_image_product_width, $config_image_product_height)
					);
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$image = $this->model_tool_image->resize('placeholder]]></search>
			<add position="before"><![CDATA[$images = false;]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['products'][] = array(]]></search>
			<add position="after"><![CDATA[
				'options' => $options,
				'price_number' => $price_number,
				'special_number' => $special_number,
				'stiker_last' => $stiker_last,
				'stiker_best' => $stiker_best,
				'stiker_spec' => $stiker_spec,
				'stiker_stock' => $stiker_stock,
				'stiker_sklad_status' => $stiker_sklad_status,
				'stiker_upc' => $stiker_upc,
				'stiker_ean' => $stiker_ean,
				'stiker_jan' => $stiker_jan,
				'stiker_isbn' => $stiker_isbn,
				'stiker_mpn' => $stiker_mpn,
				'quantity' => $result['quantity'],
				'compare_class' => $compare_class,
				'wishlist_class' => $wishlist_class,
				'button_compare' => $button_compare,
				'button_wishlist' => $button_wishlist,
				'text_catalog_stiker_netu' => $text_catalog_stiker_netu,
				'brand' => $brand,
				'images' => $images,
				'reviews' => $reviews,
				'options_buy' => $result['options_buy'],
				'model' => $result['model'],
				'short_description' => nl2br($result['short_description']),
				'product_in_cart' => $product_in_cart,
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$tax,]]></search>
			<add position="after"><![CDATA['description' => $description,]]></add>
		</operation>
		<operation>
			<search><![CDATA[25, 50, 75, 100));]]></search>
			<add position="replace"><![CDATA[$config_product_limit*2, $config_product_limit*3, $config_product_limit*5, $config_product_limit*10));]]></add>
		</operation>
	</file>
	<file path="catalog/controller/product/special.php">
		<operation>
			<search><![CDATA[sort=p.model&order=DESC]]></search>
			<add position="after" offset="2"><![CDATA[
				require(DIR_APPLICATION.'controller/product/sorts_special.php');
			]]></add>
		</operation>
	</file>
	<file path="catalog/controller/product/manufacturer.php">
		<operation>
			<search><![CDATA[sort=p.model&order=DESC]]></search>
			<add position="after" offset="2"><![CDATA[
				require(DIR_APPLICATION.'controller/product/sorts_manufacturer.php');
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[getManufacturers()]]></search>
			<add position="after"><![CDATA[
				$data['revtheme_header_menu_images'] = $this->config->get('revtheme_header_menu')['image_in_ico_m'];
				if (VERSION >= 2.2) {
					$config_image_product_width = $this->config->get($this->config->get('config_theme') . '_image_product_width');
					$config_image_product_height = $this->config->get($this->config->get('config_theme') . '_image_product_height');
				} else {
					$config_image_product_width = $this->config->get('config_image_product_width');
					$config_image_product_height = $this->config->get('config_image_product_height');
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['categories'][$key]['manufacturer']]]></search>
			<add position="before"><![CDATA[
				if ($result['image']) {
					$image = $this->model_tool_image->resize($result['image'], $config_image_product_width, $config_image_product_height);
				} else {
					$image = $this->model_tool_image->resize('placeholder.png', $config_image_product_width, $config_image_product_height);
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['categories'][$key]['manufacturer']]]></search>
			<add position="after"><![CDATA['image' => $image,]]></add>
		</operation>
		<operation>
			<search><![CDATA[if ($manufacturer_info)]]></search>
			<add position="before"><![CDATA[
				if (!$setting_catalog_all['manuf_desc']) {
					$data['description'] = false;
				}
			]]></add>
		</operation>
	</file>
	<file path="catalog/controller/product/search.php">
		<operation>
			<search><![CDATA[sort=p.model&order=DESC]]></search>
			<add position="after" offset="2"><![CDATA[
				require(DIR_APPLICATION.'controller/product/sorts_search.php');
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['breadcrumbs'] = array();]]></search>
			<add position="before"><![CDATA[
				$setting_asearch = $this->config->get('revtheme_header_search');
				$data['ajax_search_description'] = false;
				if ($setting_asearch['ajax_search_description']) {$description = true; $data['ajax_search_description'] = true;}
			]]></add>
		</operation>
	</file>
	<file path="catalog/controller/product/category.php">
		<operation>
			<search><![CDATA[$data['breadcrumbs'] = array();]]></search>
			<add position="before"><![CDATA[
				$data['text_loading'] = $this->language->get('text_loading');
				$data['button_upload'] = $this->language->get('button_upload');
				$data['revtheme_filter_status'] = $this->config->get('revtheme_filter')['status'];
				$data['text_revtheme_filter_pusto'] = false;
				if (isset($this->request->get['limit']) && !empty($this->request->get['limit'])) {
					$limit = (int)$this->request->get['limit'];
				} else {
					$limit = $config_product_limit;
				}
				if (isset($this->request->get['path']) && !empty($this->request->get['path'])) {
					$path = $this->request->get['path'];
					$parts = explode('_', (string)$path);
					$category_id = (int)array_pop($parts);
				} else {
					$path = 0;
					$category_id = 0;
				}
				if (isset($this->request->get['filter_price']) && !empty($this->request->get['filter_price'])) {
					$filter_price = $this->request->get['filter_price'];
				} else {
					$filter_price = '0;0';
				}
				if (isset($this->request->get['filter_manufactures']) && !empty($this->request->get['filter_manufactures'])) {
					$filter_manufactures = $this->request->get['filter_manufactures'];
				} else {
					$filter_manufactures = '';
				}
				if (isset($this->request->get['filter_options']) && !empty($this->request->get['filter_options'])) {
					$filter_options = $this->request->get['filter_options'];
				} else {
					$filter_options = '';
				}
				if (isset($this->request->get['filter_attributes']) && !empty($this->request->get['filter_attributes'])) {
					$filter_attributes = $this->request->get['filter_attributes'];
				} else {
					$filter_attributes = '';
				}
				if (isset($this->request->get['filter_instock']) && !empty($this->request->get['filter_instock'])) {
					$filter_instock = $this->request->get['filter_instock'];
				} else {
					$filter_instock = false;
				}
				if (isset($this->request->get['isrevfilter']) && !empty($this->request->get['isrevfilter'])) {
					$isrevfilter = $this->request->get['isrevfilter'];
				} else {
					$isrevfilter = false;
				}
				if (isset($this->request->get['filter_categories']) && !empty($this->request->get['filter_categories'])) {
					$filter_categories = $this->request->get['filter_categories'];
				} else {
					$filter_categories = '';
				}
				if (isset($this->request->get['filter_gr']) && !empty($this->request->get['filter_gr'])) {
					$filter_gr = $this->request->get['filter_gr'];
				} else {
					$filter_gr = $setting_sort_default['group_default'];
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['categories'] = array();]]></search>
			<add position="before"><![CDATA[
				$url = $this->madeurl(array('sort', 'order', 'filter', 'limit'));
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['products'] = array();]]></search>
			<add position="after"><![CDATA[
				list($filter_price_min, $filter_price_max) = explode(";", $filter_price);
				$revfilter_man = $this->model_revolution_revolution->getrevman($filter_manufactures);
				$revfilter_opt = $this->model_revolution_revolution->getrevopt($filter_options);
				$revfilter_atr = $this->model_revolution_revolution->getrevatr($filter_attributes);
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[=> $limit]]></search>
			<add position="after"><![CDATA[
				,'filter_categories' => $filter_categories,	'filter_instock' => $filter_instock, 'filter_price_min' => $filter_price_min/$this->currency->getValue($currency), 'filter_price_max' => $filter_price_max/$this->currency->getValue($currency), 'filter_manufacturer_id' => $revfilter_man, 'filter_options' => $revfilter_opt, 'filter_attributes' => $revfilter_atr,	'init_filter' => false
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['limits'] = array();]]></search>
			<add position="before"><![CDATA[
				$url = $this->madeurl(array('sort', 'order', 'filter', 'path', 'filter_price', 'filter_manufactures', 'filter_options', 'filter_attributes', 'filter_categories', 'filter_instock', 'filter_gr'));
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$pagination = new Pagination();]]></search>
			<add position="before"><![CDATA[
				$url = $this->madeurl(array('sort', 'order', 'filter', 'limit', 'path', 'filter_price', 'filter_manufactures', 'filter_options', 'filter_attributes', 'filter_categories', 'filter_instock', 'filter_gr'));
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$result['name'],]]></search>
			<add position="reolace"><![CDATA[$result['name'], 'group_text' => $group_text,]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['products'][]]]></search>
			<add position="before"><![CDATA[
				$group_text = '';
				if ($filter_gr) {
					if (preg_match('/fa_/', $filter_gr)) {
						$attr_gr_id = preg_replace('/fa_/', '', $filter_gr);
						$attribute_from = $this->model_revolution_revolution->getrevAttributes_gr($result['product_id'], $attr_gr_id);
						if ($attribute_from) {
							if ($attribute_from[0]['text'] != '') {
								$group_text = $attribute_from[0]['text'];
							} else {
								$group_text = '111';
							}
						} else {
						$group_text = '111';
					}
					} else if (preg_match('/fo_/', $filter_gr)) {
						$opt_gr_id = preg_replace('/fo_/', '', $filter_gr);
						$option_from = $this->model_revolution_revolution->getrevOptions($result['product_id'], $opt_gr_id);
						if ($option_from) {
							if ($option_from[0]['product_option_value'][0]['name'] != '') {
								$group_text = $option_from[0]['product_option_value'][0]['name'];
							} else {
								$group_text = '111';
							}
						} else {
						$group_text = '111';
					}
					} else if (preg_match('/fman/', $filter_gr)) {
						$group_text = $result['manufacturer'];
					} else if (preg_match('/stock/', $filter_gr)) {
						$group_text = $result['stock_status'];
					}
				}
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$this->response->setOutput($this->load->view($this->config->get('config_template') . '/template/product/category.tpl', $data));]]></search>
			<add position="replace"><![CDATA[
				if ($isrevfilter) {
					$data['text_revtheme_filter_pusto'] = $this->language->get('text_revtheme_filter_pusto');
				}
				$output = $this->load->view('revolution/template/product/category.tpl', $data);
				if ($isrevfilter) {
					$json = json_encode(array('html' => $output));
					$this->response->addHeader('Content-Type: application/json');
					$this->response->setOutput($json);
				} else {
					$this->response->setOutput($output);
				}	
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$this->response->setOutput($this->load->view('product/category', $data));]]></search>
			<add position="replace"><![CDATA[
				if ($isrevfilter) {
					$data['text_revtheme_filter_pusto'] = $this->language->get('text_revtheme_filter_pusto');
				}
				$output = $this->load->view('product/category', $data);
				if ($isrevfilter) {
					$json = json_encode(array('html' => $output));
					$this->response->addHeader('Content-Type: application/json');
					$this->response->setOutput($json);
				} else {
					$this->response->setOutput($output);
				}	
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[public function index() {]]></search>
			<add position="before"><![CDATA[
				protected function madeurl ($querys = array()) {
					if ($querys) {
						$get = $this->request->get;
						foreach ($get as $key => $value) {
							if(!in_array($key, $querys) || !isset($value)) {
								unset($get[$key]);
							}
						}
						return empty($get) ? '' : '&'.http_build_query($get);
					}
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['categories'][] = array(]]></search>
			<add position="before"><![CDATA[
				if (VERSION >= 2.2) {
					$config_image_category_width = $this->config->get($this->config->get('config_theme') . '_image_category_width');
					$config_image_category_height = $this->config->get($this->config->get('config_theme') . '_image_category_height');
				} else {
					$config_image_category_width = $this->config->get('config_image_category_width');
					$config_image_category_height = $this->config->get('config_image_category_height');
				}
				if ($result['image']) {
					$image = $this->model_tool_image->resize($result['image'], $config_image_category_width, $config_image_category_height);
				} else {
					$image = $this->model_tool_image->resize('no_image.png', $config_image_category_width, $config_image_category_height);
				}
				$data['revpath'] = $this->request->get['path'];
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['categories'][] = array(]]></search>
			<add position="after"><![CDATA[
				'thumb' => $image,
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[sort=p.model&order=DESC]]></search>
			<add position="after" offset="2"><![CDATA[
				require(DIR_APPLICATION.'controller/product/sorts_category.php');
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['sorts'] = array();]]></search>
			<add position="before"><![CDATA[
				$filter_gr = array();
				foreach($data['products'] as $product) {
					if($product['group_text']) {
						$filter_gr[$product['group_text']]['products'][] = $product;
					} else {
						$filter_gr['']['products'][] = $product;
					}
				}
				ksort($filter_gr);
				$data['products'] = $filter_gr;
				$url = $this->madeurl(array('filter', 'limit', 'path', 'filter_price', 'filter_manufactures', 'filter_options', 'filter_attributes', 'filter_categories', 'filter_instock', 'filter_gr'));
				
				$setting_revtheme_product_mods = $this->config->get('revtheme_cat_mods');
				if ($setting_revtheme_product_mods['viewed_products']) {
				
					$data['viewed_products_zagolovok'] = $setting_revtheme_product_mods[$this->config->get('config_language_id')]['viewed_products_zagolovok'];
					$data['viewed_products'] = array();
					$viewed_products = array();

					if (isset($this->request->cookie['viewed'])) {
						$viewed_products = explode(',', $this->request->cookie['viewed']);
					} else if (isset($this->session->data['viewed'])) {
						$viewed_products = $this->session->data['viewed'];
					}

					if (empty($setting_revtheme_product_mods['viewed_products_limit'])) {
						$setting_revtheme_product_mods['viewed_products_limit'] = 8;
					}

					$viewed_products = array_slice($viewed_products, 0, (int)$setting_revtheme_product_mods['viewed_products_limit']);
					
					foreach ($viewed_products as $product_id) {
						$product_info = $this->model_catalog_product->getProduct($product_id);
						
						$product_id2 = isset($this->request->get['product_id']) ? $this->request->get['product_id'] : 0;
						
						if ($product_info and $product_id != $product_id2) {
							if (isset($this->session->data['compare'])) {
								if (in_array($product_info['product_id'], $this->session->data['compare'])) {
									$compare_class = 'in_compare';
									$button_compare = $this->language->get('button_compare_out');
								} else {
									$compare_class = '';
									$button_compare = $this->language->get('button_compare');
								}
							} else {
								$compare_class = '';
								$button_compare = $this->language->get('button_compare');
							}
							if (isset($this->session->data['wishlist'])) {
								if (in_array($product_info['product_id'], $this->session->data['wishlist'])) {
									$wishlist_class = 'in_wishlist';
									$button_wishlist = $this->language->get('button_wishlist_out');
								} else {
									$wishlist_class = '';
									$button_wishlist = $this->language->get('button_wishlist');
								}
							} else {
								$wishlist_class = '';
								$button_wishlist = $this->language->get('button_wishlist');
							}
							
							if ($this->customer->isLogged()) {
								$this->load->model('account/wishlist');
								$wishlist_register = $this->model_account_wishlist->getWishlist();
								if ($wishlist_register) {
									$wishlist_register2 = array();
									foreach ($wishlist_register as $result_wishlist_register_id) {
										$wishlist_register_id[] = $result_wishlist_register_id['product_id'];
									}
									if (in_array($product_info['product_id'], $wishlist_register_id)) {
										$wishlist_class = 'in_wishlist';
										$button_wishlist = $this->language->get('button_wishlist_out');
									} else {
										$wishlist_class = '';
										$button_wishlist = $this->language->get('button_wishlist');
									}
								}
							}
							
							if ($settings_stikers['new_status']) {
								if (isset($date_added[$product_info['product_id']])) {
									$stiker_last = true;
								} else {
									$stiker_last = false;
								}
							} else {
								$stiker_last = false;
							}
							
							if ($settings_stikers['best_status']) {
								if (isset($best_seller[$product_info['product_id']])) {
									$stiker_best = true;	
								} else {
									$stiker_best = false;
								}
							} else {
								$stiker_best = false;
							}
							
							if ($settings_stikers['spec_status']) {
								$stiker_spec = true;
							} else {
								$stiker_spec = false;
							}
							
							if ($settings_stikers['stock_status']) {
								$stiker_stock = true;
							} else {
								$stiker_stock = false;
							}
							
							if ($settings_stikers['upc']) {
								$stiker_upc = $product_info['upc'];
							} else {
								$stiker_upc = false;
							}
							if ($settings_stikers['ean']) {
								$stiker_ean = $product_info['ean'];
							} else {
								$stiker_ean = false;
							}
							if ($settings_stikers['jan']) {
								$stiker_jan = $product_info['jan'];
							} else {
								$stiker_jan = false;
							}
							if ($settings_stikers['isbn']) {
								$stiker_isbn = $product_info['isbn'];
							} else {
								$stiker_isbn = false;
							}
							if ($settings_stikers['mpn']) {
								$stiker_mpn = $product_info['mpn'];
							} else {
								$stiker_mpn = false;
							}
							if ($settings_stikers['stiker_netu_stock']) {
								$text_catalog_stiker_netu = $product_info['stock_status'];
							} else {
								$text_catalog_stiker_netu = $this->language->get('text_catalog_stiker_netu');
							}
							if ($settings_stikers['sklad_status']) {
								$stiker_sklad_status = $product_info['stock_status'];
							} else {
								$stiker_sklad_status = false;
							}
							
							$brand = $this->model_revolution_revolution->get_pr_brand($product_info['product_id']);
						
							if ($product_info['image']) {
								$images = array();
								$this->load->model('catalog/product');
								$add_images = $this->model_catalog_product->getProductImages($product_info['product_id']);
								foreach ($add_images as $add_image) {
									$images[] = array(
										'thumb' => $this->model_tool_image->resize($add_image['image'], $config_image_product_width, $config_image_product_height)
									);
								}
								$image = $this->model_tool_image->resize($product_info['image'], $config_image_product_width, $config_image_product_height);
							} else {
								$images = false;
								$image = $this->model_tool_image->resize('no_image.png', $config_image_product_width, $config_image_product_height);
							}

							if (($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) {
								$price = $this->currency->format($this->tax->calculate($product_info['price'], $product_info['tax_class_id'], $this->config->get('config_tax')), $currency);
								$price_number = round($product_info['price'], 2);
							} else {
								$price = false;
								$price_number = false;
							}
						
							if ((float)$product_info['special']) {
								$special = $this->currency->format($this->tax->calculate($product_info['special'], $product_info['tax_class_id'], $this->config->get('config_tax')), $currency);
								$special_number = $product_info['special'];
							} else {
								$special = false;
								$special_number = false;
							}

							if ($this->config->get('config_tax')) {
								$tax = $this->currency->format((float)$product_info['special'] ? $product_info['special'] : $product_info['price'], $currency);
							} else {
								$tax = false;
							}

							if ($this->config->get('config_review_status')) {
								$rating = (int)$product_info['rating'];
							} else {
								$rating = false;
							}
							
							if ($this->config->get('config_review_status')) {
								$reviews = (int)$product_info['reviews'];
							} else {
								$reviews = false;
							}
							
							$description = '';
							$options = false;
							if ($description_options['description_on']) {
								if ($description_options['zamena_description']) {
									$description = $this->model_revolution_revolution->getAttrText($product_info['product_id']);
								} else {
									$description = utf8_substr(strip_tags(html_entity_decode($product_info['description'], ENT_QUOTES, 'UTF-8')), 0, $config_product_description_length) . '...';
								}
							}
							if ($description_options['options_in_cat']) {
								$options = array();
								$pr_options = $this->model_catalog_product->getProductOptions($product_info['product_id']);
							
								foreach ($pr_options as $option) {
									$product_option_value_data = array();

									foreach ($option['product_option_value'] as $option_value) {
										if (!$option_value['subtract'] || ($option_value['quantity'] > 0)) {
											if ((($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) && (float)$option_value['price']) {
												$option_price = $this->currency->format($this->tax->calculate($option_value['price'], $product_info['tax_class_id'], $this->config->get('config_tax') ? 'P' : false), $currency);
											} else {
												$option_price = false;
											}

											if ($option_value['price_prefix'] == '=') {
												$price_prefix = '';
											} else {
												$price_prefix = $option_value['price_prefix'];
											}
											
											$product_option_value_data[] = array(
												'product_option_value_id' => $option_value['product_option_value_id'],
												'quantity' 				  => $option_value['quantity'], 
												'model' 				  => $option_value['model'],
												'option_value_id'         => $option_value['option_value_id'],
												'name'                    => $option_value['name'],
												'image'                   => $option_value['image'] ? $this->model_tool_image->resize($option_value['image'], 50, 50) : '',
												'price'                   => $option_price,
												'price_prefix'            => $price_prefix
											);
										}
									}

									$options[] = array(
										'product_option_id'    => $option['product_option_id'],
										'product_option_value' => $product_option_value_data,
										'option_id'            => $option['option_id'],
										'name'                 => $option['name'],
										'type'                 => $option['type'],
										'value'                => $option['value'],
										'required'             => $option['required'],
										'opt_image'            => $option['opt_image']
									);
								}
							}
							
							$product_in_cart = false;
							if ($setting_catalog_all['product_in_cart']) {
								$products_in_cart = $this->cart->getProducts();
								foreach ($products_in_cart as $product_cart) {
									if ($product_cart['product_id'] == $product_info['product_id']) {
										$product_in_cart = true;
									}
								}
							}

							$data['viewed_products'][] = array(
								'options' => $options,
								'price_number' => $price_number,
								'special_number' => $special_number,
								'stiker_last' => $stiker_last,
								'stiker_best' => $stiker_best,
								'stiker_spec' => $stiker_spec,
								'stiker_stock' => $stiker_stock,
								'stiker_sklad_status' => $stiker_sklad_status,
								'stiker_upc' => $stiker_upc,
								'stiker_ean' => $stiker_ean,
								'stiker_jan' => $stiker_jan,
								'stiker_isbn' => $stiker_isbn,
								'stiker_mpn' => $stiker_mpn,
								'text_catalog_stiker_netu' => $text_catalog_stiker_netu,
								'quantity' => $product_info['quantity'],
								'compare_class' => $compare_class,
								'wishlist_class' => $wishlist_class,
								'button_compare' => $button_compare,
								'button_wishlist' => $button_wishlist,
								'brand' => $brand,
								'images' => $images,
								'reviews' => $reviews,
								'options_buy' => $product_info['options_buy'],
								'model' => $product_info['model'],
								'short_description' => ($product_info['short_description']),
								'product_in_cart' => $product_in_cart,
								'product_id'  => $product_info['product_id'],
								'thumb'       => $image,
								'name'        => $product_info['name'],
								'description' => $description,
								'price'       => $price,
								'special'     => $special,
								'tax'         => $tax,
								'minimum'     => $product_info['minimum'] > 0 ? $product_info['minimum'] : 1,
								'rating'      => $rating,
								'href'        => $this->url->link('product/product', 'product_id=' . $product_info['product_id'])
							);
						}
					}
				
				} else {
					$data['viewed_products'] = false;
				}
			]]></add>
		</operation>
	</file>
	<file path="admin/controller/common/header.php">
		<operation>
			<search ><![CDATA[// Affliate]]></search>
			<add position="before"><![CDATA[
				$this->load->language('revolution/adminmenu');
				$data['text_magazin'] = $this->language->get('text_magazin');
				$data['text_magazin_reviews'] = $this->language->get('text_magazin_reviews');
				$data['text_zakaz_obratn_zvonok'] = $this->language->get('text_zakaz_obratn_zvonok');
				$data['text_revanswers'] = $this->language->get('text_revanswers');
				
				// Reviews_store
				$this->load->model('revolution/revreview');
				$review_total_2 = $this->model_revolution_revreview->getTotalReviews(array('filter_status' => false));
				$data['review_total_2'] = $review_total_2;
				$data['review_2'] = $this->url->link('revolution/revreview', 'token=' . $this->session->data['token'] . '&filter_status=0', 'SSL');
				
				// Revpopupphone
				$this->load->model('revolution/revpopupphone');
				$revpopupphone_total = $this->model_revolution_revpopupphone->getTotalPhones(array('filter_status' => false));
				$data['revpopupphone_total'] = $revpopupphone_total;
				$data['revpopupphone'] = $this->url->link('revolution/revpopupphone', 'token=' . $this->session->data['token'] . '&filter_status=0', 'SSL');
				
				// Revanswers
				$this->load->model('revolution/revanswers');
				$revanswers_total = $this->model_revolution_revanswers->getTotalReviewsAwaitingApproval();
				$data['revanswers_total'] = $revanswers_total;
				$data['revanswers'] = $this->url->link('revolution/revanswers', 'token=' . $this->session->data['token'] . '&filter_status=0', 'SSL');
			]]></add>
		</operation>
		<operation>
			<search ><![CDATA[$data['alerts'] = $customer_total + $product_total + $review_total + $return_total + $affiliate_total;]]></search>
			<add position="replace"><![CDATA[$data['alerts'] = $customer_total + $product_total + $review_total + $review_total_2 + $revpopupphone_total + $revanswers_total + $return_total + $affiliate_total;]]></add>
		</operation>
	</file>
	<file path="admin/view/template/common/header.tpl">
		<operation>
            <search><![CDATA[<?php foreach ($styles as $style) { ?>]]></search>
            <add position="before"><![CDATA[
				<link type="text/css" href="view/stylesheet/revolution.css" rel="stylesheet" media="screen" />
            ]]></add>
        </operation>
		<operation>
			<search><![CDATA[javascript/font-awesome]]></search>
			<add position="replace"><![CDATA[javascript/revolution/font-awesome]]></add>
		</operation>
		<operation>
            <search><![CDATA[<li class="dropdown-header"><?php echo $text_affiliate; ?></li>]]></search>
            <add position="before"><![CDATA[
				<li class="dropdown-header"><?php echo $text_magazin; ?></li>
				<li><a href="<?php echo $review_2; ?>"><span class="label label-danger pull-right"><?php echo $review_total_2; ?></span><?php echo $text_magazin_reviews; ?></a></li>
				<li><a href="<?php echo $revpopupphone; ?>"><span class="label label-danger pull-right"><?php echo $revpopupphone_total; ?></span><?php echo $text_zakaz_obratn_zvonok; ?></a></li>
				<li><a href="<?php echo $revanswers; ?>"><span class="label label-danger pull-right"><?php echo $revanswers_total; ?></span><?php echo $text_revanswers; ?></a></li>
				<li class="divider"></li>
            ]]></add>
        </operation>
	</file>
	<file path="catalog/controller/information/sitemap.php">
		<operation>
			<search><![CDATA[$data['special']]]></search>
			<add position="before"><![CDATA[
				$data['revplast'] = $this->url->link('revolution/revplast');
				$data['revpbest'] = $this->url->link('revolution/revpbest');
				$data['revblog'] = $this->url->link('revolution/revblog');
				$data['revstorereview'] = $this->url->link('revolution/revstorereview');
				$this->load->language('revolution/revolution');
				$data['text_sitemap_last'] = $this->language->get('text_sitemap_last');
				$data['text_sitemap_best'] = $this->language->get('text_sitemap_best');
				$data['text_sitemap_special'] = $this->language->get('text_sitemap_special');
				$data['text_sitemap_blog'] = $this->language->get('text_sitemap_blog');
				$data['text_sitemap_review'] = $this->language->get('text_sitemap_review');
				$data['text_sitemap_contact'] = $this->language->get('text_sitemap_contact');
				$this->load->model('revolution/revolution');
				$data['revblog_categories'] = array();
				$categories = $this->model_revolution_revolution->getBlogCategories(0);
				foreach ($categories as $category) {
					$blogs = array();
					$filter=array('filter_category_id'=>$category['category_id'],'filter_sub_category'=>true);
					$results = $this->model_revolution_revolution->getBlogs($filter);
					foreach ($results as $result) {
						$blogs[] = array(
							'title'       => $result['title'],
							'href'        => $this->url->link('revolution/revblog', 'revblog_category_id=' . $category['category_id'] . '&revblog_id=' . $result['revblog_id'])
						);
					}
					$data['revblog_categories'][] = array(
						'title'    => $category['title'],
						'children' => $blogs,
						'href'     => $this->url->link('revolution/revblog_category', 'revblog_category_id=' . $category['category_id'])
					);
				}
			]]></add>
		</operation>
	</file>
	<file path="catalog/controller/checkout/cart.php">
		<operation error="skip">
			<search><![CDATA[$image = '';]]></search>
			<add position="replace"><![CDATA[
				if (VERSION >= 2.2) {
					$config_image_cart_width = $this->config->get($this->config->get('config_theme') . '_image_cart_width');
					$config_image_cart_height = $this->config->get($this->config->get('config_theme') . '_image_cart_height');
				} else {
					$config_image_cart_width = $this->config->get('config_image_cart_width');
					$config_image_cart_height = $this->config->get('config_image_cart_height');
				}
				$image = $this->model_tool_image->resize('no_image.png', $config_image_cart_width, $config_image_cart_height);
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$this->session->data['success'] = $this->language->get('text_remove');]]></search>
			<add position="replace"><![CDATA[//$this->session->data['success'] = $this->language->get('text_remove');]]></add>
		</operation>
		<operation>
			<search><![CDATA[$json['total'] = sprintf($this->language->get('text_items')]]></search>
			<add position="replace"><![CDATA[
				$style = '';
				$this->load->model('tool/image');
				$data['setting_header_cart'] = $revtheme_header_cart = $this->config->get('revtheme_header_cart');
				if ($data['setting_header_cart']['icontype']) {
					if ($data['setting_header_cart']['icon'] == 'fa none') {
						$style = ' hidden';
					}
					$image = '<i class="'.$data['setting_header_cart']['icon'].$style.'"></i>';
				} else {
					if (!$data['setting_header_cart']['image'] || $data['setting_header_cart']['image'] == 'no_image.png') {
						$style = ' hidden';
					}
					$image = '<span class="heading_ico_image'.$style.'"><img src="'.$this->model_tool_image->resize($data['setting_header_cart']['image'], 21, 21).'" alt=""/></span>';
				}
				$this->load->language('revolution/revolution');
				if ($revtheme_header_cart['cart_size'] == 'small') {
					$heading_title = ($image . $this->language->get('text_rev_items_small'));
				} else if ($revtheme_header_cart['cart_size'] == 'mini') {
					$heading_title = ($image . $this->language->get('text_rev_items_mini'));
				} else {
					$heading_title = ($image . $this->language->get('text_rev_items'));
				}
				
				$json['total'] = sprintf($heading_title]]></add>
		</operation>
		<operation>
			<search><![CDATA[$option_data[] = array(]]></search>
			<add position="before"><![CDATA[
				if (isset($option['opt_image'])) {
					if (VERSION >= 2.2) {
						$config_image_cart_width = $this->config->get($this->config->get('config_theme') . '_image_cart_width');
						$config_image_cart_height = $this->config->get($this->config->get('config_theme') . '_image_cart_height');
					} else {
						$config_image_cart_width = $this->config->get('config_image_cart_width');
						$config_image_cart_height = $this->config->get('config_image_cart_height');
					}
					if ($option['opt_image']) {
						$image = $option['opt_image'] ? $this->model_tool_image->resize($option['opt_image'], $config_image_cart_width, $config_image_cart_height) : '';
					} else {
						$image = $image;
					}
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$option['name'],]]></search>
			<add position="after"><![CDATA['model'  => (isset($option['model']) ? $option['model'] : false),]]></add>
		</operation>
		<operation>
			<search><![CDATA['checkout/checkout']]></search>
			<add position="replace" error="skip"><![CDATA[isset($this->config->get('revtheme_all_settings')['revcheckout_status']) && $this->config->get('revtheme_all_settings')['revcheckout_status'] ? 'revolution/revcheckout' : 'checkout/checkout'
			]]></add>
		</operation>
	</file>
	<file path="catalog/controller/product/product.php">
		<operation>
			<search><![CDATA[$data['recurrings']]]></search>
			<add position="before"><![CDATA[
				$data['revblogs'] = $product_settings['blogs'];
				$data['blogs'] = '';
				if ($data['revblogs']) {
					$this->load->model('revolution/revolution');
					$data['blogs'] = array();
					$results_rb = $this->model_revolution_revolution->getBlogsRelated($this->request->get['product_id']);
					$data['text_relblogs'] = sprintf($this->language->get('text_relblogs'), count($results_rb));
					if ($results_rb) {
						foreach ($results_rb as $result_rb) {
							if ($result_rb['image']) {
								$image_rb = $this->model_tool_image->resize($result_rb['image'], $config_image_additional_width, $config_image_additional_height);
							} else {
								$image_rb = $this->model_tool_image->resize('placeholder.png', $config_image_additional_width, $config_image_additional_height);
							}
							$data['blogs'][] = array(
								'title'    	  => $result_rb['title'],
								'href'    	  => $this->url->link('revolution/revblog_blog', 'revblog_id=' . $result_rb['revblog_id']),
								'image'    	  => $image_rb,
								'description' => utf8_substr(strip_tags(html_entity_decode($result_rb['description'], ENT_QUOTES, 'UTF-8')), 0, 250) . '..'
							);
						}
					}
				}

				$data['tab_info'] = $this->model_revolution_revolution->getproductTabs($this->request->get['product_id']);
				$data['product_tabs'] = array();	
				$tabresults = $this->model_revolution_revolution->getproducttab($this->request->get['product_id']);
				foreach($tabresults as $result_tab){
					$data['product_tabs'][] = array(
						'product_tab_id' => $result_tab['product_tab_id'],
						'title'          => $result_tab['heading'],
						'description'    => html_entity_decode($result_tab['description'], ENT_QUOTES, 'UTF-8')
					);
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['breadcrumbs'] = array();]]></search>
			<add position="before"><![CDATA[$this->load->language('revolution/revolution');]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['reviews'][] = array(]]></search>
			<add position="after"><![CDATA[
				'answer' => nl2br($result['answer']),
				'answer_from' => $result['answer_from'],
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['reviews'] = array();]]></search>
			<add position="before"><![CDATA[
				$this->load->language('revolution/revolution');
				$data['entry_answer'] = $this->language->get('entry_answer');
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['description'] = html_entity_decode($product_info['description'], ENT_QUOTES, 'UTF-8');]]></search>
			<add position="replace"><![CDATA[
				if (strlen($product_info['description']) > 20) {
					$data['description'] = html_entity_decode($product_info['description'], ENT_QUOTES, 'UTF-8');
				} else {
					$data['description'] = '';
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$option['required']]]></search>
			<add position="replace"><![CDATA[$option['required'], 'opt_image' => $option['opt_image']]]></add>
		</operation>
		<operation>
			<search><![CDATA[$this->load->model('catalog/category');]]></search>
			<add position="after"><![CDATA[
				$this->document->addScript('catalog/view/javascript/revolution/cloud-zoom/cloud-zoom.1.0.2.js');		
				$this->document->addStyle('catalog/view/javascript/revolution/cloud-zoom/cloud-zoom.css');
				$all_settings = $this->config->get('revtheme_product_all');
				$data['revtheme_product_all'] = $this->config->get('revtheme_product_all');
				$images_settings = $this->config->get('revtheme_product_images');
				$data['images_slider'] = $images_settings['slider'];
				$data['zoom'] = $images_settings['zoom'];
				$data['share_status'] = $all_settings['share_status'];
				$data['atributs'] = $all_settings['atributs'];
				$data['atributs_ssilka_all'] = $all_settings['atributs_ssilka_all'];
				$data['atributs_group_name'] = $all_settings['atributs_group_name'];
				$data['razmers'] = $all_settings['razmers'];
				$data['manufacturer_status'] = $all_settings['manufacturer_status'];
				$data['model_status'] = $all_settings['model_status'];
				$data['sku_status'] = $all_settings['sku_status'];
				$data['bonusbals_status'] = $all_settings['bonusbals_status'];
				$data['sklad_status'] = $all_settings['sklad_status'];
				$data['ostatok_status'] = $all_settings['ostatok_status'];
				$data['weight_status'] = $all_settings['weight_status'];
				$data['popup_purchase'] = $all_settings['popup_purchase'];
				$data['recalc_price'] = $all_settings['recalc_price'];
				$data['q_zavisimost'] = $all_settings['q_zavisimost'];
				$data['opt_price'] = $all_settings['opt_price'];
				$product_settings = $this->config->get('revtheme_product_all');
				$data['zakaz'] = $product_settings['zakaz'];
				$data['zakaz_price_null'] = $product_settings['zakaz_price_null'];
				$data['text_catalog_stiker_netu_2'] = $this->language->get('text_catalog_stiker_netu');
				$data['recalc_price'] = $product_settings['recalc_price'];
				$data['q_zavisimost'] = $product_settings['q_zavisimost'];
				$data['opt_price'] = $product_settings['opt_price'];
				$data['recpr_rightc'] = $all_settings['recpr_rightc'];
				$data['revpopuporder_settings'] = $revpopuporder_settings = $this->config->get('revtheme_catalog_popuporder');
				$data['revpopuporder'] = $revpopuporder_settings['status'];
				$data['setting_catalog_all'] = $setting_catalog_all = $this->config->get('revtheme_catalog_all');
				$data['popup_view'] = $setting_catalog_all['popup_view'];
				$data['img_slider'] = $setting_catalog_all['img_slider'];
				$data['rev_srav_prod'] = $setting_catalog_all['rev_srav_prod'];
				$data['rev_wish_prod'] = $setting_catalog_all['rev_wish_prod'];
				$data['ch_quantity'] = $setting_catalog_all['ch_quantity'];
				$data['text_catalog_stiker_last'] = $this->language->get('text_catalog_stiker_last');
				$data['text_catalog_stiker_best'] = $this->language->get('text_catalog_stiker_best');
				$data['text_catalog_revpopup_purchase'] = $this->language->get('text_catalog_revpopup_purchase');
				$data['text_catalog_revpopup_view'] = $this->language->get('text_catalog_revpopup_view');
				$data['text_catalog_price_na_zakaz'] = $this->language->get('text_catalog_price_na_zakaz');
				$data['text_product_rating'] = $this->language->get('text_product_rating');
				$data['text_product_artikul'] = $this->language->get('text_product_artikul');
				$data['text_product_dostupno'] = $this->language->get('text_product_dostupno');
				$data['text_product_ves'] = $this->language->get('text_product_ves');
				$data['text_product_razmers'] = $this->language->get('text_product_razmers');
				$data['text_product_all_attribs'] = $this->language->get('text_product_all_attribs');
				$data['text_product_all_stoimost'] = $this->language->get('text_product_all_stoimost');
				$data['text_product_bonus_tooltip'] = $this->language->get('text_product_bonus_tooltip');
				$data['text_product_bonusov'] = $this->language->get('text_product_bonusov');
				$data['text_product_instock'] = $this->language->get('text_product_instock');
				$data['text_product_outstock'] = $this->language->get('text_product_outstock');
				$data['text_product_kolichvo'] = $this->language->get('text_product_kolichvo');
				$data['text_product_wr_review'] = $this->language->get('text_product_wr_review');
				$data['text_product_otmena'] = $this->language->get('text_product_otmena');
				$data['text_product_oshibka'] = $this->language->get('text_product_oshibka');
				$data['text_product_spasibo_otz'] = $this->language->get('text_product_spasibo_otz');
				$data['text_model_option'] = $this->language->get('text_model_option');
				$data['text_price_option'] = $this->language->get('text_price_option');
				$data['text_option_option'] = $this->language->get('text_option_option');
				$data['text_foto_option'] = $this->language->get('text_foto_option');
				$data['text_dostupno_option'] = $this->language->get('text_dostupno_option');
				$data['text_quantity_option'] = $this->language->get('text_quantity_option');
				$data['chislo_ryad'] = $setting_catalog_all['chislo_ryad'];
				$description_options = $this->config->get('revtheme_cat_attributes');
				$data['description_options'] = $this->config->get('revtheme_cat_attributes');
				$data['setting_all_settings'] = $this->config->get('revtheme_all_settings');
				$revpopuppredzakaz_settings = $this->config->get('revtheme_predzakaz');
				$data['predzakaz_button'] = $revpopuppredzakaz_settings['status'];
				$data['text_predzakaz'] = $this->language->get('text_predzakaz');
				$data['entry_rev_p_name'] = $this->language->get('entry_rev_p_name');
				$data['entry_rev_p_review'] = $this->language->get('entry_rev_p_review');
				$data['entry_rev_p_send'] = $this->language->get('entry_rev_p_send');
				$data['entry_rev_p_answer'] = $this->language->get('entry_rev_p_answer');
				$data['entry_rev_p_answer_wrt'] = $this->language->get('entry_rev_p_answer_wrt');
				$data['text_product_spasibo_answer'] = $this->language->get('text_product_spasibo_answer');
				if (VERSION >= 2.2) {
					$currency = $this->session->data['currency'];
					$config_image_additional_width = $this->config->get($this->config->get('config_theme') . '_image_additional_width');
					$config_image_additional_height = $this->config->get($this->config->get('config_theme') . '_image_additional_height');
					$config_image_thumb_width = $this->config->get($this->config->get('config_theme') . '_image_thumb_width');
					$config_image_thumb_height = $this->config->get($this->config->get('config_theme') . '_image_thumb_height');
					$config_image_popup_width = $this->config->get($this->config->get('config_theme') . '_image_popup_width');
					$config_image_popup_height = $this->config->get($this->config->get('config_theme') . '_image_popup_height');
					$config_image_related_width = $this->config->get($this->config->get('config_theme') . '_image_related_width');
					$config_image_related_height = $this->config->get($this->config->get('config_theme') . '_image_related_height');
					$config_product_description_length = $this->config->get($this->config->get('config_theme') . '_product_description_length');
				} else {
					$currency = '';
					$config_image_additional_width = $this->config->get('config_image_additional_width');
					$config_image_additional_height = $this->config->get('config_image_additional_height');
					$config_image_thumb_width = $this->config->get('config_image_thumb_width');
					$config_image_thumb_height = $this->config->get('config_image_thumb_height');
					$config_image_popup_width = $this->config->get('config_image_popup_width');
					$config_image_popup_height = $this->config->get('config_image_popup_height');
					$config_image_related_width = $this->config->get('config_image_related_width');
					$config_image_related_height = $this->config->get('config_image_related_height');
					$config_product_description_length = $this->config->get('config_product_description_length');
				}
				$data['currency_code'] = $this->session->data['currency'];
				$var_currency = array();
				$var_currency['value'] = $this->currency->getValue($currency);
				$var_currency['symbol_left'] = $this->currency->getSymbolLeft($currency);
				$var_currency['symbol_right'] = $this->currency->getSymbolRight($currency);
				$var_currency['decimals'] = $this->currency->getDecimalPlace($currency);
				$var_currency['decimal_point'] = $this->language->get('decimal_point');
				$var_currency['thousand_point'] = $this->language->get('thousand_point');
				$data['currency'] = $var_currency;
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[if (isset($this->request->get['product_id']))]]></search>
			<add position="before"><![CDATA[
				$data['revanswers'] = $product_settings['answers'];
				if ($data['revanswers']) {
					$data['answers_no_reviews'] = $this->language->get('answers_no_reviews');
					$data['entry_answer'] = $this->language->get('entry_answer');
					if (isset($this->request->get['page_answers'])) {
						$page_answers = $this->request->get['page_answers'];
					} else {
						$page_answers = 1;
					}
					$data['answers'] = array();
					$this->load->model('revolution/revolution');
					$review_total_answers = $this->model_revolution_revolution->gettotalanswers((int)$this->request->get['product_id']);
					$results_answers = $this->model_revolution_revolution->getanswers((int)$this->request->get['product_id'], ($page_answers - 1) * 10, 10);
					$data['tab_answers'] = sprintf($this->language->get('tab_answers'), (int)$review_total_answers);
					foreach ($results_answers as $result_answer) {
						$data['answers'][] = array(
							'author'     	=> $result_answer['author'],
							'text'       	=> nl2br($result_answer['text']),
							'answer'     	=> nl2br($result_answer['answer']),
							'answer_from'   => $result_answer['answer_from'],
							'date_added' 	=> date($this->language->get('date_format_short'), strtotime($result_answer['date_added']))
						);
					}
					$pagination_answers = new Pagination();
					$pagination_answers->total = $review_total_answers;
					$pagination_answers->page = $page_answers;
					$pagination_answers->limit = 10;
					$pagination_answers->url = $this->url->link('revolution/revstorereview', '&page_answers={page}');
					$data['pagination_answers'] = $pagination_answers->render();
					$data['results_answers'] = sprintf($this->language->get('text_pagination'), ($review_total_answers) ? (($page_answers - 1) * 10) + 1 : 0, ((($page_answers - 1) * 10) > ($review_total_answers - 10)) ? $review_total_answers : ((($page_answers - 1) * 10) + 10), $review_total_answers, ceil($review_total_answers / 10));
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[if ($product_info['quantity'] <= 0) {]]></search>
			<add position="before"><![CDATA[
				$data['short_description'] = nl2br($product_info['short_description']);
				$data['stock_st'] = $product_info['stock_status'];
				$data['options_buy'] = $product_info['options_buy'];
				if (isset($this->session->data['compare'])) {
					if (in_array($product_id, $this->session->data['compare'])) {
						$data['compare_class'] = 'in_compare';
						$data['button_compare'] = $this->language->get('button_compare_out');
					} else {
						$data['compare_class'] = '';
						$data['button_compare'] = $this->language->get('button_compare');
					}
				} else {
					$data['compare_class'] = '';
					$data['button_compare'] = $this->language->get('button_compare');
				}
				
				if (isset($this->session->data['wishlist'])) {
					if (in_array($product_id, $this->session->data['wishlist'])) {
						$data['wishlist_class'] = 'in_wishlist';
						$data['button_wishlist'] = $this->language->get('button_wishlist_out');
					} else {
						$data['wishlist_class'] = '';
						$data['button_wishlist'] = $this->language->get('button_wishlist');
					}
				} else {
					$data['wishlist_class'] = '';
					$data['button_wishlist'] = $this->language->get('button_wishlist');
				}
				
				if ($this->customer->isLogged()) {
					$this->load->model('account/wishlist');
					$wishlist_register = $this->model_account_wishlist->getWishlist();
					if ($wishlist_register) {
						$wishlist_register2 = array();
						foreach ($wishlist_register as $result_wishlist_register_id) {
							$wishlist_register_id[] = $result_wishlist_register_id['product_id'];
						}
						if (in_array($product_id, $wishlist_register_id)) {
							$data['wishlist_class'] = 'in_wishlist';
							$data['button_wishlist'] = $this->language->get('button_wishlist_out');
						} else {
							$data['wishlist_class'] = '';
							$data['button_wishlist'] = $this->language->get('button_wishlist');
						}
					}
				}

				$this->load->model('revolution/revolution');
				$data['brand'] = $this->model_revolution_revolution->get_pr_brand($product_id);
				
				$settings_stikers = $this->config->get('revtheme_catalog_stiker');
				if ($settings_stikers['status']) {
					$data['stikers_status'] = true;
				} else {
					$data['stikers_status'] = false;
				}
				if ($settings_stikers['new_status']) {
					$settings_last = $this->config->get('revtheme_catalog_last');
					if ($settings_last['last_products'] != '') {
						$date_added = array_flip(explode(',', $settings_last['last_products']));
					} else {
						if ($settings_last['filter_day']) {
							$filter_day = date('Y-m-d H:i:s', strtotime('now - ' . $settings_last['filter_day'] . ' days'));
						} else {
							$filter_day = false;
						}
						$data_last = array(
							'sort'  => 'p.date_added',
							'order' => 'DESC',
							'start' => 0,
							'limit' => $settings_last['limit'],
							'filter_day' => $filter_day
							);
						$date_added = $this->model_revolution_revolution->getLastProducts($data_last);
					}
					if (isset($date_added[$product_id])) {
						$data['stiker_last'] = true;
					} else {
						$data['stiker_last'] = false;
					}
				} else {
					$data['stiker_last'] = false;
				}
				if ($settings_stikers['best_status']) {
					$settings_best = $this->config->get('revtheme_catalog_best');
					if ($settings_best['best_products'] != '') {
						$best_seller = array_flip(explode(',', $settings_best['best_products']));
					} else {
						$data_best = array(
							'sort'  => 'p.sales',
							'order' => 'DESC',
							'start' => 0,
							'limit' => $settings_best['limit'],
							'filter_buy' => $settings_best['filter_buy']
						);
						$best_seller = $this->model_revolution_revolution->getBestProducts($data_best);
					}
					if (isset($best_seller[$product_id])) {
						$data['stiker_best'] = true;
					} else {
						$data['stiker_best'] = false;
					}
				} else {
					$data['stiker_best'] = false;
				}
				if ($settings_stikers['spec_status']) {
					$data['stiker_spec'] = true;
				} else {
					$data['stiker_spec'] = false;
				}
				if ($settings_stikers['stock_status']) {
					$data['stiker_stock'] = true;
				} else {
					$data['stiker_stock'] = false;
				}
				
				$data['weight'] = number_format($product_info['weight'], 2);
				$data['weight_value'] = $product_info['weight'];
				$data['weight_unit'] = $this->weight->getUnit($product_info['weight_class_id']);				
				$data['length'] = number_format($product_info['length'], 2);
				$data['width'] = number_format($product_info['width'], 2);
				$data['height'] = number_format($product_info['height'], 2);
				$data['length_format'] = $this->length->getUnit($product_info['length_class_id']);
				$data['weight_format'] = $this->weight->getUnit($product_info['weight_class_id']);
				
				$data['revtheme_product_all_attribute_group'] = $this->config->get('revtheme_product_all_attribute_group');
				
				if ($product_info['sku']) {
					$data['sku'] = $product_info['sku'];
				} else {
					$data['sku'] = '';
				}
				
				if ($settings_stikers['upc']) {
					$data['stiker_upc'] = $product_info['upc'];
				} else {
					$data['stiker_upc'] = false;
				}
				if ($settings_stikers['ean']) {
					$data['stiker_ean'] = $product_info['ean'];
				} else {
					$data['stiker_ean'] = false;
				}
				if ($settings_stikers['jan']) {
					$data['stiker_jan'] = $product_info['jan'];
				} else {
					$data['stiker_jan'] = false;
				}
				if ($settings_stikers['isbn']) {
					$data['stiker_isbn'] = $product_info['isbn'];
				} else {
					$data['stiker_isbn'] = false;
				}
				if ($settings_stikers['mpn']) {
					$data['stiker_mpn'] = $product_info['mpn'];
				} else {
					$data['stiker_mpn'] = false;
				}
				if ($settings_stikers['stiker_netu_stock']) {
					$data['text_catalog_stiker_netu'] = $product_info['stock_status'];
				} else {
					$data['text_catalog_stiker_netu'] = $this->language->get('text_catalog_stiker_netu');
				}
				if ($settings_stikers['sklad_status']) {
					$data['stiker_sklad_status'] = $product_info['stock_status'];
				} else {
					$data['stiker_sklad_status'] = false;
				}
				
				$data['zakaz'] = $all_settings['zakaz'];
				$data['quantity'] = $product_info['quantity'];
				$data['shtuki'] = $this->language->get('text_shtuki');
				$data['config_image_additional_width'] = $config_image_additional_width;
				$data['config_image_additional_height'] = $config_image_additional_height;
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['images'] = array();]]></search>
			<add position="before"><![CDATA[
				if ($product_info['image']) {
					$data['thumb_small'] = $this->model_tool_image->resize($product_info['image'], $config_image_additional_width, $config_image_additional_height);
				} else {
					$data['thumb_small'] = $this->model_tool_image->resize('no_image.png', $config_image_additional_width, $config_image_additional_height);
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['images'][] = array(]]></search>
			<add position="after"><![CDATA[
				'thumb_big' => $this->model_tool_image->resize($result['image'], $config_image_thumb_width, $config_image_thumb_height),
				'video' => $result['video'],
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['price'] = $this]]></search>
			<add position="before"><![CDATA[$data['price_number'] = round($product_info['price'], 2);]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['price'] = false;]]></search>
			<add position="before"><![CDATA[$data['price_number'] = false;]]></add>
		</operation>
		<operation>
			<search><![CDATA[if ((float)$product_info['special']) {]]></search>
			<add position="replace"><![CDATA[if ((float)$product_info['special'] && ($this->customer->isLogged() || !$this->config->get('config_customer_price'))) {]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['special'] = $this]]></search>
			<add position="before"><![CDATA[
				$data['special_number'] = $product_info['special'];
				$this->load->model('revolution/revolution');
				$special = $this->model_revolution_revolution->getProductSpecialData($this->request->get['product_id']);
				if ($special['date_end'] && $all_settings['countdown'] && time() < strtotime($special['date_end'])) {
					$this->load->language('revolution/revolution');
					$data['special_end'] = $special['date_end'];
					$data['text_countdown'] = $this->language->get('text_countdown');
				} else {
					$data['special_end'] = false;
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['special'] = false;]]></search>
			<add position="before"><![CDATA[
				$data['special_number'] = false;
				$data['special_end'] = false;
			]]></add>
		</operation>		
		<operation>
			<search><![CDATA[$data['reviews'] = sprintf($this->language->get('text_reviews'), (int)$product_info['reviews']);]]></search>
			<add position="replace"><![CDATA[
				$data['reviews_number'] = $reviews_number = (int)$product_info['reviews'];
				function getcartword($number, $suffix) {
					$keys = array(2, 0, 1, 1, 1, 2);
					$mod = $number % 100;
					$suffix_key = ($mod > 7 && $mod < 20) ? 2: $keys[min($mod % 10, 5)];
					return $suffix[$suffix_key];
				}
				$textcart_array = array('text_reviews_1', 'text_reviews_2', 'text_reviews_3');
				$textcart = getcartword($reviews_number, $textcart_array);
				$data['reviews'] = sprintf($this->language->get($textcart), (int)$product_info['reviews']);
				if ($this->config->get($this->config->get('config_captcha') . '_status') && $data['revanswers']) {
					$data['captcha2'] = $this->load->controller('extension/captcha/' . $this->config->get('config_captcha') . '_two');
				} else {
					$data['captcha2'] = '';
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$option_value['name'],]]></search>
			<add position="after"><![CDATA['quantity' => $option_value['quantity'], 'model' => $option_value['model'],]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$this->model_tool_image->resize($option_value['image'], 50, 50),]]></search>
			<add position="replace"><![CDATA[$option_value['image'] ? $this->model_tool_image->resize($option_value['image'], 50, 50) : '',]]></add>
		</operation>
		<operation>
			<search><![CDATA[$option_value['price_prefix']]]></search>
			<add position="replace"><![CDATA[$price_prefix]]></add>
		</operation>
		<operation>
			<search><![CDATA[$product_option_value_data[]]]></search>
			<add position="before"><![CDATA[
				if ($option_value['price_prefix'] == '=') {
					$price_prefix = '';
				} else {
					$price_prefix = $option_value['price_prefix'];
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$results = $this->model_catalog_product->getProductRelated]]></search>
			<add position="before"><![CDATA[		
				$this->load->model('revolution/revolution');
				$settings_stikers = $this->config->get('revtheme_catalog_stiker');
				if ($settings_stikers['status']) {
					$data['stikers_status'] = true;

					if ($settings_stikers['new_status']) {
						$settings_last = $this->config->get('revtheme_catalog_last');
						if ($settings_last['last_products'] != '') {
							$date_added = array_flip(explode(',', $settings_last['last_products']));
						} else {
							if ($settings_last['filter_day']) {
								$filter_day = date('Y-m-d H:i:s', strtotime('now - ' . $settings_last['filter_day'] . ' days'));
							} else {
								$filter_day = false;
							}
							$data_last = array(
								'sort'  => 'p.date_added',
								'order' => 'DESC',
								'start' => 0,
								'limit' => $settings_last['limit'],
								'filter_day' => $filter_day
								);
							$date_added = $this->model_revolution_revolution->getLastProducts($data_last);
						}
					}

					if ($settings_stikers['best_status']) {
						$settings_best = $this->config->get('revtheme_catalog_best');
						if ($settings_best['best_products'] != '') {
							$best_seller = array_flip(explode(',', $settings_best['best_products']));
						} else {
							$data_best = array(
								'sort'  => 'p.sales',
								'order' => 'DESC',
								'start' => 0,
								'limit' => $settings_best['limit'],
								'filter_buy' => $settings_best['filter_buy']
							);
							$best_seller = $this->model_revolution_revolution->getBestProducts($data_best);
						}
					}
				} else {
					$data['stikers_status'] = false;
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[if ($result['image']) {]]></search>
			<add position="before"><![CDATA[
				if (isset($this->session->data['compare'])) {
					if (in_array($result['product_id'], $this->session->data['compare'])) {
						$compare_class = 'in_compare';
						$button_compare = $this->language->get('button_compare_out');
					} else {
						$compare_class = '';
						$button_compare = $this->language->get('button_compare');
					}
				} else {
					$compare_class = '';
					$button_compare = $this->language->get('button_compare');
				}
				if (isset($this->session->data['wishlist'])) {
					if (in_array($result['product_id'], $this->session->data['wishlist'])) {
						$wishlist_class = 'in_wishlist';
						$button_wishlist = $this->language->get('button_wishlist_out');
					} else {
						$wishlist_class = '';
						$button_wishlist = $this->language->get('button_wishlist');
					}
				} else {
					$wishlist_class = '';
					$button_wishlist = $this->language->get('button_wishlist');
				}
				
				if ($this->customer->isLogged()) {
					$this->load->model('account/wishlist');
					$wishlist_register = $this->model_account_wishlist->getWishlist();
					if ($wishlist_register) {
						$wishlist_register2 = array();
						foreach ($wishlist_register as $result_wishlist_register_id) {
							$wishlist_register_id[] = $result_wishlist_register_id['product_id'];
						}
						if (in_array($result['product_id'], $wishlist_register_id)) {
							$wishlist_class = 'in_wishlist';
							$button_wishlist = $this->language->get('button_wishlist_out');
						} else {
							$wishlist_class = '';
							$button_wishlist = $this->language->get('button_wishlist');
						}
					}
				}
				
				if ($settings_stikers['new_status']) {
					if (isset($date_added[$result['product_id']])) {
						$stiker_last = true;
					} else {
						$stiker_last = false;
					}
				} else {
					$stiker_last = false;
				}
				
				if ($settings_stikers['best_status']) {
					if (isset($best_seller[$result['product_id']])) {
						$stiker_best = true;	
					} else {
						$stiker_best = false;
					}
				} else {
					$stiker_best = false;
				}
				
				if ($settings_stikers['spec_status']) {
					$stiker_spec = true;
				} else {
					$stiker_spec = false;
				}
				
				if ($settings_stikers['stock_status']) {
					$stiker_stock = true;
				} else {
					$stiker_stock = false;
				}
				
				if ($settings_stikers['upc']) {
					$stiker_upc = $result['upc'];
				} else {
					$stiker_upc = false;
				}
				if ($settings_stikers['ean']) {
					$stiker_ean = $result['ean'];
				} else {
					$stiker_ean = false;
				}
				if ($settings_stikers['jan']) {
					$stiker_jan = $result['jan'];
				} else {
					$stiker_jan = false;
				}
				if ($settings_stikers['isbn']) {
					$stiker_isbn = $result['isbn'];
				} else {
					$stiker_isbn = false;
				}
				if ($settings_stikers['mpn']) {
					$stiker_mpn = $result['mpn'];
				} else {
					$stiker_mpn = false;
				}			
				if ($settings_stikers['stiker_netu_stock']) {
					$text_catalog_stiker_netu = $result['stock_status'];
				} else {
					$text_catalog_stiker_netu = $this->language->get('text_catalog_stiker_netu');
				}
				if ($settings_stikers['sklad_status']) {
					$stiker_sklad_status = $result['stock_status'];
				} else {
					$stiker_sklad_status = false;
				}
				
				$brand = $this->model_revolution_revolution->get_pr_brand($result['product_id']);
				
				if ($this->config->get('config_review_status')) {
					$reviews = (int)$result['reviews'];
				} else {
					$reviews = false;
				}
				
				$description = '';
				$options = false;
				if ($description_options['description_on']) {
					if ($description_options['zamena_description']) {
						$description = $this->model_revolution_revolution->getAttrText($result['product_id']);
					} else {
						$description = utf8_substr(strip_tags(html_entity_decode($result['description'], ENT_QUOTES, 'UTF-8')), 0, $config_product_description_length) . '...';
					}
				}
				if ($description_options['options_in_cat']) {
					$options = array();
					$pr_options = $this->model_catalog_product->getProductOptions($result['product_id']);
				
					foreach ($pr_options as $option) {
						$product_option_value_data = array();

						foreach ($option['product_option_value'] as $option_value) {
							if (!$option_value['subtract'] || ($option_value['quantity'] > 0)) {
								if ((($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) && (float)$option_value['price']) {
									$option_price = $this->currency->format($this->tax->calculate($option_value['price'], $result['tax_class_id'], $this->config->get('config_tax') ? 'P' : false), $currency);
								} else {
									$option_price = false;
								}

								if ($option_value['price_prefix'] == '=') {
									$price_prefix = '';
								} else {
									$price_prefix = $option_value['price_prefix'];
								}
								
								$product_option_value_data[] = array(
									'product_option_value_id' => $option_value['product_option_value_id'],
									'quantity'            	  => $option_value['quantity'],
									'model'            	  	  => $option_value['model'],
									'option_value_id'         => $option_value['option_value_id'],
									'name'                    => $option_value['name'],
									'image'                   => $option_value['image'] ? $this->model_tool_image->resize($option_value['image'], 50, 50) : '',
									'price'                   => $option_price,
									'price_prefix'            => $price_prefix	
								);
							}
						}

						$options[] = array(
							'product_option_id'    => $option['product_option_id'],
							'product_option_value' => $product_option_value_data,
							'option_id'            => $option['option_id'],
							'name'                 => $option['name'],
							'type'                 => $option['type'],
							'value'                => $option['value'],
							'required'             => $option['required'],
							'opt_image'            => $option['opt_image']
						);
					}
				}
				$product_in_cart = false;
				if ($setting_catalog_all['product_in_cart']) {
					$products_in_cart = $this->cart->getProducts();
					foreach ($products_in_cart as $product_cart) {
						if ($product_cart['product_id'] == $result['product_id']) {
							$product_in_cart = true;
						}
					}
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[if ($result['image']) {]]></search>
			<add position="after"><![CDATA[
				$images = array();
				$this->load->model('catalog/product');
				$add_images = $this->model_catalog_product->getProductImages($result['product_id']);
				foreach ($add_images as $add_image) {
					$images[] = array(
						'thumb' => $this->model_tool_image->resize($add_image['image'], $config_image_related_width, $config_image_related_height)
					);
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$image = $this->model_tool_image->resize('placeholder]]></search>
			<add position="before"><![CDATA[$images = false;]]></add>
		</operation>
		<operation>
			<search><![CDATA[if ((float)$result['special']) {]]></search>
			<add position="before"><![CDATA[
				if ($this->customer->isLogged() || !$this->config->get('config_customer_price')) {
					$price_number = round($result['price'], 2);
				} else {
					$price_number = false;
				}
				if ((float)$result['special']) {
					$special_number = $result['special'];
				} else {
					$special_number = false;
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['products'][] = array(]]></search>
			<add position="after"><![CDATA[
				'options' => $options,
				'price_number' => $price_number,
				'special_number' => $special_number,
				'stiker_last' => $stiker_last,
				'stiker_best' => $stiker_best,
				'stiker_spec' => $stiker_spec,
				'stiker_stock' => $stiker_stock,
				'stiker_sklad_status' => $stiker_sklad_status,
				'stiker_upc' => $stiker_upc,
				'stiker_ean' => $stiker_ean,
				'stiker_jan' => $stiker_jan,
				'stiker_isbn' => $stiker_isbn,
				'stiker_mpn' => $stiker_mpn,
				'text_catalog_stiker_netu' => $text_catalog_stiker_netu,
				'quantity' => $result['quantity'],
				'compare_class' => $compare_class,
				'wishlist_class' => $wishlist_class,
				'button_compare' => $button_compare,
				'button_wishlist' => $button_wishlist,
				'brand' => $brand,
				'images' => $images,
				'reviews' => $reviews,
				'options_buy' => $result['options_buy'],
				'model' => $result['model'],
				'short_description' => nl2br($result['short_description']),
				'product_in_cart' => $product_in_cart,
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$tax,]]></search>
			<add position="after"><![CDATA['description' => $description,]]></add>
		</operation>
		<operation>
			<search><![CDATA[public function review() {]]></search>
			<add position="before"><![CDATA[
				public function update_prices() {
					if (isset($this->request->request['product_id']) && isset($this->request->request['quantity'])) {
						$this->load->model('catalog/product');
						$this->load->model('tool/image');
						
						$product_id      = (int)$this->request->request['product_id'];
						$quantity        = (int)$this->request->request['quantity'];
						$product_info    = $this->model_catalog_product->getProduct($product_id);
						$product_options = $this->model_catalog_product->getProductOptions($product_id);
						$itog_weight     = $product_info['weight'];
						$option_weight	 = 0;
						$option_weight2	 = 0;
						$itog_reward     = $product_info['points'];
						$option_points 	 = 0;
						$option_points2  = 0;
						$option_price_pl = false;
						$option_price    = 0;
						$option_price2 	 = 0;
						$option_quantity = $product_info['quantity'];
						$opt_image 		 = false;
						$opt_model 		 = $product_info['model'];
						$all_settings    = $this->config->get('revtheme_product_all');

						if (!empty($this->request->request['option'])) {
						  $option = $this->request->request['option'];
						} else {
						  $option = array();
						}

						foreach ($product_options as $product_option) {
						 if (is_array($product_option['product_option_value'])) {
							foreach ($product_option['product_option_value'] as $option_value) {
							  if(isset($option[$product_option['product_option_id']])) {
								if(($option[$product_option['product_option_id']] == $option_value['product_option_value_id']) || ((is_array($option[$product_option['product_option_id']])) && (in_array($option_value['product_option_value_id'], $option[$product_option['product_option_id']])))) {
								 if ($option_value['price_prefix'] == '+') {
								    $option_price += $option_value['price'];
								 } elseif ($option_value['price_prefix'] == '-') {
									$option_price -= $option_value['price'];
								 } elseif ($option_value['price_prefix'] == '=') {
									$option_price_pl = true;
									if ($all_settings['options_ravno_plus']) {
										$option_price2 += $option_value['price'];
									} else {
										$option_price2 = $option_value['price'];
									}
								 }
								 if ($option_value['weight_prefix'] == '+') {
									$option_weight += $option_value['weight'];
								 } elseif ($option_value['weight_prefix'] == '-') {
									$option_weight -= $option_value['weight'];
								 } elseif ($option_value['weight_prefix'] == '=') {
									$option_weight2 = $option_value['weight'];
									$itog_weight = 0;
								 }
								 if ($option_value['points_prefix'] == '+') {
									$option_points += $option_value['points'];
								 } elseif ($option_value['points_prefix'] == '-') {
									$option_points -= $option_value['points'];
								 } elseif ($option_value['points_prefix'] == '=') {
									if ($all_settings['options_ravno_plus']) {
										$option_points2 += $option_value['points'];
									} else {
										$option_points2 = $option_value['points'];
									}
									$itog_reward = 0;
								 }
								 $option_quantity = $option_value['quantity'];
								 if($option_value['opt_image']) {
									$opt_image = $option_value['opt_image'];
								 }
								 if($option_value['model']) {
									$opt_model = $option_value['model'];
								 }
							   }
							 }
						   }
						 }
						}

						$json = array();
						
						if (VERSION >= 2.2) {
							$config_image_popup_width = $this->config->get($this->config->get('config_theme') . '_image_popup_width');
							$config_image_popup_height = $this->config->get($this->config->get('config_theme') . '_image_popup_height');
							$config_image_product_width = $this->config->get($this->config->get('config_theme') . '_image_product_width');
							$config_image_product_height = $this->config->get($this->config->get('config_theme') . '_image_product_height');
							$config_image_thumb_width = $this->config->get($this->config->get('config_theme') . '_image_thumb_width');
							$config_image_thumb_height = $this->config->get($this->config->get('config_theme') . '_image_thumb_height');
							$currency = $this->session->data['currency'];
						} else {
							$config_image_popup_width = $this->config->get('config_image_popup_width');
							$config_image_popup_height = $this->config->get('config_image_popup_height');
							$config_image_product_width = $this->config->get('config_image_product_width');
							$config_image_product_height = $this->config->get('config_image_product_height');
							$config_image_thumb_width = $this->config->get('config_image_thumb_width');
							$config_image_thumb_height = $this->config->get('config_image_thumb_height');
							$currency = '';
						}
						
						if ($opt_image) {
							$json['opt_image'] = $this->model_tool_image->resize($opt_image, $config_image_product_width, $config_image_product_height);
							$json['opt_image_2'] = $this->model_tool_image->resize($opt_image, $config_image_thumb_width, $config_image_thumb_height);
							$json['opt_image_2_big'] = $this->model_tool_image->resize($opt_image, $config_image_popup_width, $config_image_popup_height);
						} else {
							$json['opt_image'] = $this->model_tool_image->resize($product_info['image'], $config_image_product_width, $config_image_product_height);
							$json['opt_image_2'] = $this->model_tool_image->resize($product_info['image'], $config_image_thumb_width, $config_image_thumb_height);
							$json['opt_image_2_big'] = $this->model_tool_image->resize($product_info['image'], $config_image_popup_width, $config_image_popup_height);
						}
						
						if ($opt_model) {
							$json['opt_model'] = $opt_model;
						} else {
							$json['opt_model'] = $opt_model;
						}
						
						if ($option_weight2) {
							$option_weight = $itog_weight + $option_weight + $option_weight2;
							$json['weight'] = $option_weight * $quantity;
						} else {
							$json['weight'] = ($itog_weight + $option_weight) * $quantity;
						}
						
						if ($option_points2) {
							$option_points = $itog_reward + $option_points + $option_points2;
							$json['points'] = $option_points * $quantity;
						} else {
							$json['points'] = ($itog_reward + $option_points) * $quantity;
						}
						
						$json['option_quantity'] = $option_quantity;
						
						if ($option_price_pl) {
							$json['special_n'] = (float)($this->tax->calculate($option_price2 * $quantity, $product_info['tax_class_id'], $this->config->get('config_tax')) + $this->tax->calculate($option_price * $quantity, $product_info['tax_class_id'], $this->config->get('config_tax')));
						} else {
							$json['special_n'] = (float)(($this->tax->calculate($this->update_discount($product_id, $quantity), $product_info['tax_class_id'], $this->config->get('config_tax')) * $quantity) + $this->tax->calculate($option_price * $quantity, $product_info['tax_class_id'], $this->config->get('config_tax')));
						}
						
						if ($option_price_pl) {
							$json['price_n'] = (float)($this->tax->calculate($option_price2 * $quantity, $product_info['tax_class_id'], $this->config->get('config_tax')) + $this->tax->calculate($option_price * $quantity, $product_info['tax_class_id'], $this->config->get('config_tax')));
						} else {
							$json['price_n'] = (float)(($this->tax->calculate($product_info['price'], $product_info['tax_class_id'], $this->config->get('config_tax')) * $quantity) + $this->tax->calculate($option_price * $quantity, $product_info['tax_class_id'], $this->config->get('config_tax')));
						}
						
						$json['special'] = $this->currency->format(($this->tax->calculate($this->update_discount($product_id, $quantity), $product_info['tax_class_id'], $this->config->get('config_tax')) * $quantity) + $this->tax->calculate($option_price * $quantity, $product_info['tax_class_id'], $this->config->get('config_tax')), $currency);
						$json['price'] = $this->currency->format(($this->tax->calculate($product_info['price'], $product_info['tax_class_id'], $this->config->get('config_tax')) * $quantity) + $this->tax->calculate($option_price * $quantity, $product_info['tax_class_id'], $this->config->get('config_tax')), $currency);
						
						$this->response->addHeader('Content-Type: application/json');
						$this->response->setOutput(json_encode($json));
					}
				}

				public function update_discount($product_id, $quantity) {
					$this->load->model('catalog/product');
					$product_info = $this->model_catalog_product->getProduct($product_id);
					$customer_group_id = ($this->customer->isLogged()) ? (int)$this->customer->getGroupId() : (int)$this->config->get('config_customer_group_id');
					$price = $product_info['price'];
					$product_discount_query = $this->db->query("SELECT price FROM " . DB_PREFIX . "product_discount WHERE product_id = '" . (int)$product_id . "' AND customer_group_id = '" . (int)$customer_group_id . "' AND quantity <= '" . (int)$quantity . "' AND ((date_start = '0000-00-00' OR date_start < NOW()) AND (date_end = '0000-00-00' OR date_end > NOW())) ORDER BY quantity DESC, priority ASC, price ASC LIMIT 1");
					if ($product_discount_query->num_rows) {
					$price = $product_discount_query->row['price'];
					}
					$product_special_query = $this->db->query("SELECT price FROM " . DB_PREFIX . "product_special WHERE product_id = '" . (int)$product_id . "' AND customer_group_id = '" . (int)$customer_group_id . "' AND ((date_start = '0000-00-00' OR date_start < NOW()) AND (date_end = '0000-00-00' OR date_end > NOW())) ORDER BY priority ASC, price ASC LIMIT 1");
					if ($product_special_query->num_rows) {
						$price = $product_special_query->row['price'];
					}       
					return $price;
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['recurrings']]]></search>
			<add position="before"><![CDATA[
				$setting_revtheme_product_mods = $this->config->get('revtheme_product_mods');
				$revtheme_home_viewed_products = $this->config->get('revtheme_home_viewed_products');
				$setting_revtheme_cat_mods = $this->config->get('revtheme_cat_mods');
				
				if ($setting_revtheme_product_mods['viewed_products'] || $revtheme_home_viewed_products['status'] || $setting_revtheme_cat_mods['viewed_products']) {
					$viewed_products = array();
					
					if (isset($this->request->cookie['viewed'])) {
						$viewed_products = explode(',', $this->request->cookie['viewed']);
					} else if (isset($this->session->data['viewed'])) {
						$viewed_products = $this->session->data['viewed'];
					}

					if (isset($this->request->get['route']) && $this->request->get['route'] == 'product/product') {
						$product_id_v = $this->request->get['product_id'];
						$viewed_products = array_diff($viewed_products, array($product_id_v));
						array_unshift($viewed_products, $product_id_v);
						array_splice($viewed_products, 20);
						setcookie('viewed', implode(',',$viewed_products), time() + 60 * 60 * 24 * 30, '/', $this->request->server['HTTP_HOST']);
					}
				}
		
				if ($setting_revtheme_product_mods['viewed_products']) {
				
					$data['viewed_products_zagolovok'] = $setting_revtheme_product_mods[$this->config->get('config_language_id')]['viewed_products_zagolovok'];
					$data['viewed_products'] = array();

					if (empty($setting_revtheme_product_mods['viewed_products_limit'])) {
						$setting_revtheme_product_mods['viewed_products_limit'] = 8;
					}

					$viewed_products = array_slice($viewed_products, 0, (int)$setting_revtheme_product_mods['viewed_products_limit']);
					
					foreach ($viewed_products as $product_id_v) {
						$product_info = $this->model_catalog_product->getProduct($product_id_v);
						
						$product_id2 = isset($this->request->get['product_id']) ? $this->request->get['product_id'] : 0;
						
						if ($product_info and $product_id_v != $product_id2) {
							if (isset($this->session->data['compare'])) {
								if (in_array($product_info['product_id'], $this->session->data['compare'])) {
									$compare_class = 'in_compare';
									$button_compare = $this->language->get('button_compare_out');
								} else {
									$compare_class = '';
									$button_compare = $this->language->get('button_compare');
								}
							} else {
								$compare_class = '';
								$button_compare = $this->language->get('button_compare');
							}
							if (isset($this->session->data['wishlist'])) {
								if (in_array($product_info['product_id'], $this->session->data['wishlist'])) {
									$wishlist_class = 'in_wishlist';
									$button_wishlist = $this->language->get('button_wishlist_out');
								} else {
									$wishlist_class = '';
									$button_wishlist = $this->language->get('button_wishlist');
								}
							} else {
								$wishlist_class = '';
								$button_wishlist = $this->language->get('button_wishlist');
							}
							
							if ($this->customer->isLogged()) {
								$this->load->model('account/wishlist');
								$wishlist_register = $this->model_account_wishlist->getWishlist();
								if ($wishlist_register) {
									$wishlist_register2 = array();
									foreach ($wishlist_register as $result_wishlist_register_id) {
										$wishlist_register_id[] = $result_wishlist_register_id['product_id'];
									}
									if (in_array($product_info['product_id'], $wishlist_register_id)) {
										$wishlist_class = 'in_wishlist';
										$button_wishlist = $this->language->get('button_wishlist_out');
									} else {
										$wishlist_class = '';
										$button_wishlist = $this->language->get('button_wishlist');
									}
								}
							}
							
							if ($settings_stikers['new_status']) {
								if (isset($date_added[$product_info['product_id']])) {
									$stiker_last = true;
								} else {
									$stiker_last = false;
								}
							} else {
								$stiker_last = false;
							}
							
							if ($settings_stikers['best_status']) {
								if (isset($best_seller[$product_info['product_id']])) {
									$stiker_best = true;	
								} else {
									$stiker_best = false;
								}
							} else {
								$stiker_best = false;
							}
							
							if ($settings_stikers['spec_status']) {
								$stiker_spec = true;
							} else {
								$stiker_spec = false;
							}
							
							if ($settings_stikers['stock_status']) {
								$stiker_stock = true;
							} else {
								$stiker_stock = false;
							}
							
							if ($settings_stikers['upc']) {
								$stiker_upc = $product_info['upc'];
							} else {
								$stiker_upc = false;
							}
							if ($settings_stikers['ean']) {
								$stiker_ean = $product_info['ean'];
							} else {
								$stiker_ean = false;
							}
							if ($settings_stikers['jan']) {
								$stiker_jan = $product_info['jan'];
							} else {
								$stiker_jan = false;
							}
							if ($settings_stikers['isbn']) {
								$stiker_isbn = $product_info['isbn'];
							} else {
								$stiker_isbn = false;
							}
							if ($settings_stikers['mpn']) {
								$stiker_mpn = $product_info['mpn'];
							} else {
								$stiker_mpn = false;
							}
							if ($settings_stikers['stiker_netu_stock']) {
								$text_catalog_stiker_netu = $product_info['stock_status'];
							} else {
								$text_catalog_stiker_netu = $this->language->get('text_catalog_stiker_netu');
							}
							if ($settings_stikers['sklad_status']) {
								$stiker_sklad_status = $product_info['stock_status'];
							} else {
								$stiker_sklad_status = false;
							}
				
							$brand = $this->model_revolution_revolution->get_pr_brand($product_info['product_id']);
						
							if ($product_info['image']) {
								$images = array();
								$this->load->model('catalog/product');
								$add_images = $this->model_catalog_product->getProductImages($product_info['product_id']);
								foreach ($add_images as $add_image) {
									$images[] = array(
										'thumb' => $this->model_tool_image->resize($add_image['image'], $config_image_related_width, $config_image_related_height)
									);
								}
								$image = $this->model_tool_image->resize($product_info['image'], $config_image_related_width, $config_image_related_height);
							} else {
								$images = false;
								$image = $this->model_tool_image->resize('no_image.png', $config_image_related_width, $config_image_related_height);
							}

							if (($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) {
								$price = $this->currency->format($this->tax->calculate($product_info['price'], $product_info['tax_class_id'], $this->config->get('config_tax')), $currency);
							} else {
								$price = false;
							}

							if (($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) {
								$price_number = round($product_info['price'], 2);
							} else {
								$price_number = false;
							}
							
							if ((float)$product_info['special']) {
								$special_number = $product_info['special'];
							} else {
								$special_number = false;
							}
						
							if ((float)$product_info['special']) {
								$special = $this->currency->format($this->tax->calculate($product_info['special'], $product_info['tax_class_id'], $this->config->get('config_tax')), $currency);
							} else {
								$special = false;
							}

							if ($this->config->get('config_tax')) {
								$tax = $this->currency->format((float)$product_info['special'] ? $product_info['special'] : $product_info['price'], $currency);
							} else {
								$tax = false;
							}

							if ($this->config->get('config_review_status')) {
								$rating = (int)$product_info['rating'];
							} else {
								$rating = false;
							}
							
							if ($this->config->get('config_review_status')) {
								$reviews = (int)$product_info['reviews'];
							} else {
								$reviews = false;
							}
							
							$description = '';
							$options = false;
							if ($description_options['description_on']) {
								if ($description_options['zamena_description']) {
									$description = $this->model_revolution_revolution->getAttrText($product_info['product_id']);
								} else {
									$description = utf8_substr(strip_tags(html_entity_decode($product_info['description'], ENT_QUOTES, 'UTF-8')), 0, $config_product_description_length) . '...';
								}
							}
							if ($description_options['options_in_cat']) {
								$options = array();
								$pr_options = $this->model_catalog_product->getProductOptions($product_info['product_id']);
							
								foreach ($pr_options as $option) {
									$product_option_value_data = array();

									foreach ($option['product_option_value'] as $option_value) {
										if (!$option_value['subtract'] || ($option_value['quantity'] > 0)) {
											if ((($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) && (float)$option_value['price']) {
												$option_price = $this->currency->format($this->tax->calculate($option_value['price'], $product_info['tax_class_id'], $this->config->get('config_tax') ? 'P' : false), $currency);
											} else {
												$option_price = false;
											}

											if ($option_value['price_prefix'] == '=') {
												$price_prefix = '';
											} else {
												$price_prefix = $option_value['price_prefix'];
											}
											
											$product_option_value_data[] = array(
												'product_option_value_id' => $option_value['product_option_value_id'],
												'quantity'            	  => $option_value['quantity'],
												'model'            	  	  => $option_value['model'],
												'option_value_id'         => $option_value['option_value_id'],
												'name'                    => $option_value['name'],
												'image'                   => $option_value['image'] ? $this->model_tool_image->resize($option_value['image'], 50, 50) : '',
												'price'                   => $option_price,
												'price_prefix'            => $price_prefix
											);
										}
									}

									$options[] = array(
										'product_option_id'    => $option['product_option_id'],
										'product_option_value' => $product_option_value_data,
										'option_id'            => $option['option_id'],
										'name'                 => $option['name'],
										'type'                 => $option['type'],
										'value'                => $option['value'],
										'required'             => $option['required'],
										'opt_image'            => $option['opt_image']
									);
								}
							}
							
							$product_in_cart = false;
							if ($setting_catalog_all['product_in_cart']) {
								$products_in_cart = $this->cart->getProducts();
								foreach ($products_in_cart as $product_cart) {
									if ($product_cart['product_id'] == $product_info['product_id']) {
										$product_in_cart = true;
									}
								}
							}

							$data['viewed_products'][] = array(
								'options' => $options,
								'price_number' => $price_number,
								'special_number' => $special_number,
								'stiker_last' => $stiker_last,
								'stiker_best' => $stiker_best,
								'stiker_spec' => $stiker_spec,
								'stiker_stock' => $stiker_stock,
								'stiker_sklad_status' => $stiker_sklad_status,
								'stiker_upc' => $stiker_upc,
								'stiker_ean' => $stiker_ean,
								'stiker_jan' => $stiker_jan,
								'stiker_isbn' => $stiker_isbn,
								'stiker_mpn' => $stiker_mpn,
								'text_catalog_stiker_netu' => $text_catalog_stiker_netu,
								'quantity' => $product_info['quantity'],
								'compare_class' => $compare_class,
								'wishlist_class' => $wishlist_class,
								'button_compare' => $button_compare,
								'button_wishlist' => $button_wishlist,
								'brand' => $brand,
								'images' => $images,
								'reviews' => $reviews,
								'options_buy' => $product_info['options_buy'],
								'model' => $product_info['model'],
								'short_description' => nl2br($product_info['short_description']),
								'product_in_cart' => $product_in_cart,
								'product_id'  => $product_info['product_id'],
								'thumb'       => $image,
								'name'        => $product_info['name'],
								'description' => $description,
								'price'       => $price,
								'special'     => $special,
								'tax'         => $tax,
								'minimum'     => $product_info['minimum'] > 0 ? $product_info['minimum'] : 1,
								'rating'      => $rating,
								'href'        => $this->url->link('product/product', 'product_id=' . $product_info['product_id'])
							);
						}
					}
				
				} else {
					$data['viewed_products'] = false;
				}
				
			$setting_text_blocks_all = $setting_revtheme_product_mods['text_block'];
			$setting_text_blocks = $setting_revtheme_product_mods['text_block'];
			$data['text_block_zagolovok'] = $setting_revtheme_product_mods[$this->config->get('config_language_id')]['text_block_zagolovok'];
			$data['text_block_cols_all'] = $setting_revtheme_product_mods['text_block_cols'];
			if ($setting_text_blocks_all) {
				$results_tb_all = $this->config->get('revtheme_blocks_product_item');
				if (!empty($results_tb_all)){
					foreach ($results_tb_all as $result) {
						$style = '';
						if ($result['icontype']) {
							if ($result['icon'] == 'fa none') {
								$style = ' hidden';
							}
							$image = '<i class="'.$result['icon'].$style.'"></i>';
						} else {
							if (!$result['image'] || $result['image'] == 'no_image.png') {
								$style = ' hidden';
							}
							$image = '<img src="'.$this->model_tool_image->resize($result['image'], 40, 40).'" alt=""/>';
						}
						if (isset($result['checkbox']) && $result['checkbox']) {
							$checkbox = $result['checkbox'];
						} else {
							$checkbox = false;
						}
						
						$data['text_blocks_all'][] = array(
							'title' => $result['title'][$this->config->get('config_language_id')],
							'image' => $image,
							'description' => $result['description'][$this->config->get('config_language_id')],
							'link'  => $result['link'][$this->config->get('config_language_id')],
							'sort'  => $result['sort'],
							'checkbox' => $checkbox,
							'style' => $style
						);
					}
				} else {			
					$data['text_blocks_all'] = false;
				}
				if (!empty($data['text_blocks_all'])){
					foreach ($data['text_blocks_all'] as $key => $value) {
						$sort_t[$key] = $value['sort'];
					}
					array_multisort($sort_t, SORT_ASC, $data['text_blocks_all']);
				}
			} else {
				$data['text_blocks_all'] = false;
			}
			
			if ($setting_text_blocks) {
				$data['text_block_cols'] = $setting_revtheme_product_mods['text_block_cols_2'];
				$results_tb = $this->model_revolution_revolution->getproducttextblocks($this->request->get['product_id']);
				if (!empty($results_tb)){
					foreach ($results_tb as $result) {
						$style = '';
						if ($result['icontype']) {
							if ($result['icon'] == 'fa none') {
								$style = ' hidden';
							}
							$image = '<i class="'.$result['icon'].$style.'"></i>';
						} else {
							if (!$result['image'] || $result['image'] == 'no_image.png') {
								$style = ' hidden';
							}
							$image = '<img src="'.$this->model_tool_image->resize($result['image'], 40, 40).'" alt=""/>';
						}
						
						$data['text_blocks'][] = array(
							'title' => $result['title'],
							'image' => $image,
							'description' => $result['description'],
							'link'  => $result['href'],
							'sort'  => $result['sort'],
							'checkbox' => $result['checkbox'],
							'style' => $style
						);
					}
				} else {			
					$data['text_blocks'] = false;
				}
				if (!empty($data['text_blocks'])){
					foreach ($data['text_blocks'] as $key => $value) {
						$sort_p[$key] = $value['sort'];
					}
					array_multisort($sort_p, SORT_ASC, $data['text_blocks']);
				}	
			} else {
				$data['text_blocks'] = false;
			}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[($page - 1) * 5, 5);]]></search>
			<add position="replace"><![CDATA[($page - 1) * 10, 10);]]></add>
		</operation>
		<operation>
			<search><![CDATA[$pagination->limit = 5;]]></search>
			<add position="replace"><![CDATA[$pagination->limit = 10;]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['results'] = sprintf($this->language->get('text_pagination'), ($review_total) ? (($page - 1) * 5) + 1 : 0, ((($page - 1) * 5) > ($review_total - 5)) ? $review_total : ((($page - 1) * 5) + 5), $review_total, ceil($review_total / 5));]]></search>
			<add position="replace"><![CDATA[$data['results'] = sprintf($this->language->get('text_pagination'), ($review_total) ? (($page - 1) * 10) + 1 : 0, ((($page - 1) * 10) > ($review_total - 10)) ? $review_total : ((($page - 1) * 10) + 10), $review_total, ceil($review_total / 10));]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['stock'] = $product_info['quantity'];]]></search>
			<add position="replace"><![CDATA[$data['stock'] = '<span class="pr_quantity">' . $product_info['quantity'] . '</span> ' . $data['shtuki'];]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['stock'] = $product_info['stock_status'];]]></search>
			<add position="replace"><![CDATA[$data['stock'] = $product_info['stock_status'] . '<span class="hidden pr_quantity">' . $product_info['quantity'] . '</span>';]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['stock'] = $this->language->get('text_instock');]]></search>
			<add position="replace"><![CDATA[$data['stock'] = $product_info['stock_status'] . '<span class="hidden pr_quantity">' . $product_info['quantity'] . '</span>';]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$data['popup'] = '';]]></search>
			<add position="replace"><![CDATA[$data['popup'] = $this->model_tool_image->resize('no_image.png', $config_image_popup_width, $config_image_popup_height);]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$data['thumb'] = '';]]></search>
			<add position="replace"><![CDATA[$data['thumb'] = $this->model_tool_image->resize('no_image.png', $config_image_thumb_width, $config_image_thumb_height);]]></add>
		</operation>
	</file>
	<file path="catalog/controller/information/contact.php">
		<operation>
			<search><![CDATA[$data['locations'] = array();]]></search>
			<add position="before"><![CDATA[
				if ($this->config->get('revtheme_geo_set')['status']) {
					require_once(DIR_SYSTEM . 'library/revolution/SxGeo.php');
					$SxGeo = new SxGeo();
					if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
						$ip = $_SERVER['HTTP_CLIENT_IP'];
					} else if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
						$ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
					} else {
						$ip = $_SERVER['REMOTE_ADDR'];
					}
					$ip_city = $SxGeo->getCity($ip)['city']['name_ru'];
					$ip_region = $SxGeo->getCityFull($ip)['region']['name_ru'];
					$rev_geo_data = $this->config->get('revtheme_geo');
					$data['rev_geos'] = array();
					if (!empty($rev_geo_data)){
						foreach ($rev_geo_data as $rev_geo) {
							if ($ip_city == $rev_geo['city'] || $ip_region == $rev_geo['city']) {
								$data['rev_geos'][] = array(
									'code' => $rev_geo['code'],
									'text' => $rev_geo['text'][$this->config->get('config_language_id')]
								);
							}
						}
					}
				}
				$data['config_email'] = $this->config->get('config_email');
				$header_phone = $this->config->get('revtheme_header_phone');
				$data['header_phone_cod'] = $header_phone[$this->config->get('config_language_id')]['cod'];
				$data['header_phone_number'] = $header_phone[$this->config->get('config_language_id')]['number'];
				if ($this->config->get('revtheme_geo_set')['status']) {
					foreach ($data['rev_geos'] as $rev_geo) {
						if ($data['header_phone_number'] == $rev_geo['code']) {
							$data['header_phone_number'] = $rev_geo['text'];
						}
					}
				}
				$data['header_phone_cod2'] = $header_phone[$this->config->get('config_language_id')]['cod2'];
				$data['header_phone_number2'] = $header_phone[$this->config->get('config_language_id')]['number2'];
				if ($this->config->get('revtheme_geo_set')['status']) {
					foreach ($data['rev_geos'] as $rev_geo) {
						if ($data['header_phone_number2'] == $rev_geo['code']) {
							$data['header_phone_number2'] = $rev_geo['text'];
						}
					}
				}
				$settings_all_settings = $this->config->get('revtheme_all_settings');
				$setting_footer_all = $this->config->get('revtheme_footer_all');
				$data['f_map'] = $setting_footer_all['f_map'];
				$results2 = $this->config->get('revtheme_footer_soc');
				if (!empty($results2)){
					$http_s = array("http://", "https://");
					foreach ($results2 as $result) {
						if ($settings_all_settings['soc_conts_url']) {
							$link_t = explode('/', str_replace($http_s,'',$result['link'][$this->config->get('config_language_id')]));
							$link_t = $link_t[0];
						} else {
							$link_t = $result['title'][$this->config->get('config_language_id')];
						}
						$data['revtheme_footer_socs'][] = array(
							'image'  => $result['image'],
							'link'   => $result['link'][$this->config->get('config_language_id')],
							'link_t' => $link_t,
							'title'  => $result['title'][$this->config->get('config_language_id')],
							'sort'   => $result['sort']
						);
					}
				} else {
					$data['revtheme_footer_socs'] = false;
				}
				if (!empty($data['revtheme_footer_socs'])){
					foreach ($data['revtheme_footer_socs'] as $key => $value) {
						$sort[$key] = $value['sort'];
					}
					array_multisort($sort, SORT_ASC, $data['revtheme_footer_socs']);
				}
				
				$dop_contact_status = $this->config->get('revtheme_header_dop_contacts_status');
				if ($dop_contact_status){
					$dop_contact = $this->config->get('revtheme_header_dop_contact');
					if (!empty($dop_contact)){
						foreach ($dop_contact as $result) {
							
							$style = '';
							$this->load->model('tool/image');
							if ($result['icontype']) {
								if ($result['icon'] == 'fa none') {
									$style = ' hidden';
								}
								$result_icon = '<i class="'.$result['icon'].$style.'"></i>';
							} else {
								if (!$result['image'] || $result['image'] == 'no_image.png') {
									$style = ' hidden';
								}
								$result_icon = '<img class="'.$style.'" src="'.$this->model_tool_image->resize($result['image'], 21, 21).'" alt=""/>';
							}
							$number = $result['number'][$this->config->get('config_language_id')];
							if ($this->config->get('revtheme_geo_set')['status']) {
								foreach ($data['rev_geos'] as $rev_geo) {
									if ($number == $rev_geo['code']) {
										$number = $rev_geo['text'];
									}
								}
							}
							
							$data['dop_contacts'][] = array(
								'icon' 		=> $result_icon,
								'number' 	=> $number,
								'href' 		=> $result['href'][$this->config->get('config_language_id')],
								'sort'  	=> $result['sort']
							);
						}
						
						foreach ($data['dop_contacts'] as $key => $value) {
							$sort_dop_contacts2[$key] = $value['sort'];
						}
						if (count($data['dop_contacts']) > 1) {
							array_multisort($sort_dop_contacts2, SORT_ASC, $data['dop_contacts']);
						}

					} else {
						$data['dop_contacts'] = false;
					}
				} else {
						$data['dop_contacts'] = false;
				}
				$data['settings_all_settings'] = $this->config->get('revtheme_all_settings');
				$data['yamap'] = html_entity_decode($settings_all_settings['yamap'], ENT_QUOTES, 'UTF-8');
				$this->load->language('revolution/revolution');
				$data['text_contact_ourcontacts'] = $this->language->get('text_contact_ourcontacts');
				$data['descript'] = $settings_all_settings[$this->config->get('config_language_id')]['description'];
				if ($this->config->get('revtheme_all_settings')['pol_konf']) {
					$this->load->model('catalog/information');
					$information_info = $this->model_catalog_information->getInformation($this->config->get('revtheme_all_settings')['pol_konf']);
					if ($information_info) {
						if ($this->config->get('revtheme_all_settings')['pol_konf_tvivod']) {
							$data['text_agree_pol_konf'] = sprintf($this->language->get('text_agree_pol_konf_st'), $this->url->link('information/information', 'information_id=' . $this->config->get('revtheme_all_settings')['pol_konf'], true), $information_info['title'], $information_info['title']);
						} else {
							$data['text_agree_pol_konf'] = sprintf($this->language->get('text_agree_pol_konf'), $this->url->link('information/information', 'information_id=' . $this->config->get('revtheme_all_settings')['pol_konf'], true), $information_info['title']);
						}
					} else {
						$data['text_agree_pol_konf'] = '';
					}
				} else {
					$data['text_agree_pol_konf'] = '';
				}
				if (isset($this->error['agree_pol_konf'])) {
					$data['agree_pol_konf'] = $this->error['agree_pol_konf'];
				} else {
					$data['agree_pol_konf'] = '';
				}
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[if ((utf8_strlen($this->request->post['name']]]></search>
			<add position="before"><![CDATA[
				if ($this->config->get('revtheme_all_settings')['pol_konf']) {
					$this->load->language('revolution/revolution');
					$this->load->model('catalog/information');
					$information_info = $this->model_catalog_information->getInformation($this->config->get('revtheme_all_settings')['pol_konf']);
					if ($information_info && !isset($this->request->post['agree_pol_konf'])) {
						if ($this->config->get('revtheme_all_settings')['pol_konf_tvivod']) {
							$this->error['agree_pol_konf'] = sprintf($this->language->get('error_agree_pol_konf_st'), $information_info['title']);
						} else {
							$this->error['agree_pol_konf'] = $this->language->get('error_agree_pol_konf');
						}
					}
				}
			]]></add>
		</operation>
	</file>
	<file path="catalog/controller/common/home.php">
		<operation>
			<search><![CDATA[$data['content_bottom']]]></search>
			<add position="before"><![CDATA[
				$data['slideshow'] = $this->load->controller('revolution/revslideshow');
				$data['revcategorywall'] = $this->load->controller('revolution/revcategorywall');
				$data['ptabs'] = $this->load->controller('revolution/revpmod/ptabs');
				$data['pbest'] = $this->load->controller('revolution/revpmod/pbest');
				$data['plast'] = $this->load->controller('revolution/revpmod/plast');
				$data['pspec'] = $this->load->controller('revolution/revpmod/pspec');
				$data['slider_1'] = $this->load->controller('revolution/revslider/slider1');
				$data['slider_2'] = $this->load->controller('revolution/revslider/slider2');
				$data['slider_3'] = $this->load->controller('revolution/revslider/slider3');
				$data['slider_4'] = $this->load->controller('revolution/revslider/slider4');
				$data['slider_5'] = $this->load->controller('revolution/revslider/slider5');
				$data['blog'] = $this->load->controller('revolution/revblogmod');
				$data['blocks'] = $this->load->controller('revolution/revblocks');
				$data['aboutstore'] = $this->load->controller('revolution/revaboutstore');
				$data['socv'] = $this->load->controller('revolution/revsocv');
				$data['socfb'] = $this->load->controller('revolution/revsocfb');
				$data['socok'] = $this->load->controller('revolution/revsocok');
				$data['socvinsta'] = $this->load->controller('revolution/revsocvinsta');
				$setting_socv = $this->config->get('revtheme_home_socv');
				$data['right_insta'] = $setting_socv['right_insta'];
				$data['storereview'] = $this->load->controller('revolution/revstorereviewmod');
				$data['viewed_products'] = $this->load->controller('revolution/revviewed_products');
				$setting_allwide = $this->config->get('revtheme_header_menu');
				if ($setting_allwide['inhome']) {
					$data['allwide'] = true;
				} else {
					$data['allwide'] = false;
				}
				$setting_header_menu = $this->config->get('revtheme_header_menu');
				if ($setting_header_menu['type']) {
					$data['amazon'] = true;
				} else {
					$data['amazon'] = false;
				}
				$setting_home_all = $this->config->get('revtheme_home_all');
				$data['h1_home'] = $setting_home_all[$this->config->get('config_language_id')]['h1_home'];
				if ($this->config->get('revtheme_geo_set')['status']) {
					require_once(DIR_SYSTEM . 'library/revolution/SxGeo.php');
					$SxGeo = new SxGeo();
					if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
						$ip = $_SERVER['HTTP_CLIENT_IP'];
					} else if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
						$ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
					} else {
						$ip = $_SERVER['REMOTE_ADDR'];
					}
					$ip_city = $SxGeo->getCity($ip)['city']['name_ru'];
					$ip_region = $SxGeo->getCityFull($ip)['region']['name_ru'];
					$rev_geo_data = $this->config->get('revtheme_geo');
					$data['rev_geos'] = array();
					if (!empty($rev_geo_data)){
						foreach ($rev_geo_data as $rev_geo) {
							if ($ip_city == $rev_geo['city'] || $ip_region == $rev_geo['city']) {
								$data['rev_geos'][] = array(
									'code' => $rev_geo['code'],
									'text' => $rev_geo['text'][$this->config->get('config_language_id')]
								);
							}
						}
					}
					foreach ($data['rev_geos'] as $rev_geo) {
						if (strpos($data['h1_home'], $rev_geo['code'])) {
							$data['h1_home'] = html_entity_decode(str_replace($rev_geo['code'], $rev_geo['text'], $data['h1_home']), ENT_QUOTES, 'UTF-8');
						}
					}
				}
				$data['setting_home_slideshow'] = $this->config->get('revtheme_home_slideshow');
			]]></add>
		</operation>
	</file>
	<file path="catalog/controller/common/header.php">
		<operation>
			<search><![CDATA[$this->load->language('common/header');]]></search>
			<add position="before"><![CDATA[
				$data['og_url'] = (isset($this->request->server['HTTPS']) ? HTTPS_SERVER : HTTP_SERVER) . substr($this->request->server['REQUEST_URI'], 1, (strlen($this->request->server['REQUEST_URI'])-1));
				$data['og_image'] = false;
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['base'] = $server;]]></search>
			<add position="before"><![CDATA[
				$this->load->model('tool/image');
				if ($this->config->get('revtheme_geo_set')['status']) {
					require_once(DIR_SYSTEM . 'library/revolution/SxGeo.php');
					$SxGeo = new SxGeo();
					if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
						$ip = $_SERVER['HTTP_CLIENT_IP'];
					} else if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
						$ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
					} else {
						$ip = $_SERVER['REMOTE_ADDR'];
					}
					$ip_city = $SxGeo->getCity($ip)['city']['name_ru'];
					$ip_region = $SxGeo->getCityFull($ip)['region']['name_ru'];
					$rev_geo_data = $this->config->get('revtheme_geo');
					$data['rev_geos'] = array();
					if (!empty($rev_geo_data)){
						foreach ($rev_geo_data as $rev_geo) {
							if ($ip_city == $rev_geo['city'] || $ip_region == $rev_geo['city']) {
								$data['rev_geos'][] = array(
									'code' => $rev_geo['code'],
									'text' => $rev_geo['text'][$this->config->get('config_language_id')]
								);
							}
						}
					}
				}
				$data['config_customer_price'] = $this->config->get('config_customer_price');
				$data['stikers_settings'] = $this->config->get('revtheme_catalog_stiker');
				$setting_header_search = $this->config->get('revtheme_header_search');
				$setting_all_settings = $this->config->get('revtheme_all_settings');
				$data['setting_all_settings'] = $this->config->get('revtheme_all_settings');
				$data['revtheme_cat_attributes'] = $this->config->get('revtheme_cat_attributes');
				$data['revtheme_product_all'] = $this->config->get('revtheme_product_all');
				$data['header_search_doptext'] = '';
				if ($setting_header_search['ch_text']) {
					$data['header_search_doptext'] = html_entity_decode($setting_header_search[$this->config->get('config_language_id')]['doptext'], ENT_QUOTES, 'UTF-8');
				}
				if ($setting_header_search['ajax_search_status']) {
					$this->document->addScript('catalog/view/javascript/revolution/ajax_search.js');
				}
				$setting_header_menu = $this->config->get('revtheme_header_menu');
				$data['cats_status'] = $setting_header_menu['cats_status'];
				if ($setting_header_menu['type']) {
					$data['amazon'] = true;
				} else {
					$data['amazon'] = false;
				}
				if ($setting_header_menu['image_in_ico']) {
					$data['image_in_ico'] = true;
				} else {
					$data['image_in_ico'] = false;
				}
				if ($setting_header_menu['tri_level']) {
					$data['tri_level'] = true;
				} else {
					$data['tri_level'] = false;
				}
				if ($setting_header_menu['image_in_ico_m']) {
					$data['image_in_ico_m'] = true;
				} else {
					$data['image_in_ico_m'] = false;
				}
				$this->load->language('revolution/revolution');
				$data['text_header_back'] = $this->language->get('text_header_back');
				$data['text_header_information'] = $this->language->get('text_header_information');
				$data['text_header_revpopup_phone'] = $this->language->get('text_header_revpopup_phone');
				$data['text_header_menu2_heading'] = $this->language->get('text_header_menu2_heading');
				$data['text_rev_text_order'] = $this->language->get('text_rev_text_order');
				$data['text_rev_text_download'] = $this->language->get('text_rev_text_download');
				$data['revmenu'] = $this->load->controller('revolution/revmenu');
				$settings_popupphone = $this->config->get('revtheme_header_popupphone');
				$data['revtheme_header_popupphone'] = $settings_popupphone;
				$settings_header_standart_links = $this->config->get('revtheme_header_standart_links');
				$data['popup_login'] = $settings_header_standart_links['popup_login'];
				$data['rev_lang'] = $settings_header_standart_links['rev_lang'];
				$data['rev_curr'] = $settings_header_standart_links['rev_curr'];
				$data['rev_srav'] = $settings_header_standart_links['rev_srav'];
				$data['rev_wish'] = $settings_header_standart_links['rev_wish'];
				$data['rev_acc'] = $settings_header_standart_links['rev_acc'];
				
				$data['microdata_status'] = $setting_all_settings['microdata_status'];
				$data['microdata_postcode'] = $setting_all_settings['microdata_postcode'];
				$data['microdata_city'] = $setting_all_settings['microdata_city'];
				$data['microdata_adress'] = $setting_all_settings['microdata_adress'];
				$data['microdata_email'] = $setting_all_settings['microdata_email'];
				if ($setting_all_settings['microdata_phones']) {
					$microdata_phones = explode(",", $setting_all_settings['microdata_phones']);
					$microdata_phones = array_map('trim',$microdata_phones);
					$data['microdata_phones'] = array_diff($microdata_phones, array(''));
				} else {
					$data['microdata_phones'] = false;
				}		
				if ($setting_all_settings['microdata_social']) {
					$microdata_social = explode(",", $setting_all_settings['microdata_social']);
					$microdata_social = array_map('trim',$microdata_social);
					$data['microdata_social'] = array_diff($microdata_social, array(''));
				} else {
					$data['microdata_social'] = false;
				}
				$data['setting_catalog_all'] = $this->config->get('revtheme_catalog_all');

				$dop_contact_status = $this->config->get('revtheme_header_dop_contacts_status');
				if ($dop_contact_status){
					$dop_contact = $this->config->get('revtheme_header_dop_contact');
					if (!empty($dop_contact)){
						foreach ($dop_contact as $result) {
							$style = '';
							if ($result['icontype']) {
								if ($result['icon'] == 'fa none') {
									$style = ' hidden';
								}
								$result_icon = '<i class="'.$result['icon'].$style.'"></i>';
							} else {
								if (!$result['image'] || $result['image'] == 'no_image.png') {
									$style = ' hidden';
								}
								$result_icon = '<span class="mask"></span><img class="'.$style.'" src="'.$this->model_tool_image->resize($result['image'], 21, 21).'" alt=""/>';
							}
							$number = $result['number'][$this->config->get('config_language_id')];
							if ($this->config->get('revtheme_geo_set')['status']) {
								foreach ($data['rev_geos'] as $rev_geo) {
									if ($number == $rev_geo['code']) {
										$number = $rev_geo['text'];
									}
								}
							}
							
							$data['dop_contacts'][] = array(
								'icon' 		=> $result_icon,
								'number' 	=> $number,
								'href' 		=> $result['href'][$this->config->get('config_language_id')],
								'sort'  	=> $result['sort']
							);
						}
						
						foreach ($data['dop_contacts'] as $key => $value) {
							$sort_dop_contacts[$key] = $value['sort'];
						}
						if (count($data['dop_contacts']) > 1) {
							array_multisort($sort_dop_contacts, SORT_ASC, $data['dop_contacts']);
						}

					} else {
						$data['dop_contacts'] = false;
					}
				} else {
					$data['dop_contacts'] = false;
				}
				$header_phone = $this->config->get('revtheme_header_phone');
				$data['header_phone_text'] = $header_phone[$this->config->get('config_language_id')]['text'];
				if ($this->config->get('revtheme_geo_set')['status']) {
					foreach ($data['rev_geos'] as $rev_geo) {
						if ($data['header_phone_text'] == $rev_geo['code']) {
							$data['header_phone_text'] = $rev_geo['text'];
						}
					}
				}
				$data['header_phone_text2'] = $header_phone[$this->config->get('config_language_id')]['text2'];
				if ($this->config->get('revtheme_geo_set')['status']) {
					foreach ($data['rev_geos'] as $rev_geo) {
						if ($data['header_phone_text2'] == $rev_geo['code']) {
							$data['header_phone_text2'] = $rev_geo['text'];
						}
					}
				}
				$data['header_phone_cod'] = $header_phone[$this->config->get('config_language_id')]['cod'];
				$data['header_phone_number'] = $header_phone[$this->config->get('config_language_id')]['number'];
				if ($this->config->get('revtheme_geo_set')['status']) {
					foreach ($data['rev_geos'] as $rev_geo) {
						if ($data['header_phone_number'] == $rev_geo['code']) {
							$data['header_phone_number'] = $rev_geo['text'];
						}
					}
				}
				$data['header_phone_cod2'] = $header_phone[$this->config->get('config_language_id')]['cod2'];
				$data['header_phone_number2'] = $header_phone[$this->config->get('config_language_id')]['number2'];
				if ($this->config->get('revtheme_geo_set')['status']) {
					foreach ($data['rev_geos'] as $rev_geo) {
						if ($data['header_phone_number2'] == $rev_geo['code']) {
							$data['header_phone_number2'] = $rev_geo['text'];
						}
					}
				}
				if ($header_phone['icontype']) {
					if ($header_phone['icon'] == 'fa none') {
						$data['header_phone_image'] = '';
					}
					$data['header_phone_image'] = '<i class="'.$header_phone['icon'].'"></i>';
				} else {
					if (!$header_phone['image'] || $header_phone['image'] == 'no_image.png') {
						$data['header_phone_image'] = '';
					}
					$data['header_phone_image'] = '<img src="'.$this->model_tool_image->resize($header_phone['image'], 32, 32).'" alt=""/>';
				}
				
				$this->load->model('catalog/information');

				$data['informations'] = array();
				$data['informations2'] = array();

				foreach ($this->model_catalog_information->getInformations() as $result) {
					if ($result['top']) {
						$data['informations'][] = array(
							'title' => $result['title'],
							'href'  => $this->url->link('information/information', 'information_id=' . $result['information_id'])
						);
					}
					if ($result['top2']) {
						$data['informations2'][] = array(
							'title' => $result['title'],
							'href'  => $this->url->link('information/information', 'information_id=' . $result['information_id'])
						);
					}
				}

				$results_h_links = $this->config->get('revtheme_header_link');
				if (!empty($results_h_links)){
					foreach ($results_h_links as $result) {
						$data['revtheme_header_links'][] = array(
							'link'  => $result['link'][$this->config->get('config_language_id')],
							'title' => $result['title'][$this->config->get('config_language_id')],
							'sort'  => $result['sort']
						);
					}
				} else {
					$data['revtheme_header_links'] = false;
				}
				if (!empty($data['revtheme_header_links'])){
					foreach ($data['revtheme_header_links'] as $key => $value) {
						$sort[$key] = $value['sort'];
					}
					if (count($data['revtheme_header_links']) > 1) {
					array_multisort($sort, SORT_ASC, $data['revtheme_header_links']);
					}
				}
				
				$results_h_links2 = $this->config->get('revtheme_header_link2');
				if (!empty($results_h_links2)){
					foreach ($results_h_links2 as $result) {
						$style = '';
						if ($result['icontype']) {
							if ($result['icon'] == 'fa none') {
								$style = ' hidden';
							}
							$image = '<i class="hidden-md '.$result['icon'].$style.'"></i>';
						} else {
							if (!$result['image'] || $result['image'] == 'no_image.png') {
								$style = ' hidden';
							}
							$image = '<span class="hidden-md '.$style.'"><img src="'.$this->model_tool_image->resize($result['image'], 21, 21).'" alt=""/></span>';
						}
						$result_title = ($image . $result['title'][$this->config->get('config_language_id')]);
						
						$data['revtheme_header_links2'][] = array(
							'link'  => $result['link'][$this->config->get('config_language_id')],
							'title' => $result_title,
							'sort'  => $result['sort']
						);
					}
				} else {
					$data['revtheme_header_links2'] = false;
				}
				if (!empty($data['revtheme_header_links2'])){
					foreach ($data['revtheme_header_links2'] as $key => $value) {
						$sort2[$key] = $value['sort'];
					}
					if (count($data['revtheme_header_links2']) > 1) {
					array_multisort($sort2, SORT_ASC, $data['revtheme_header_links2']);
					}
				}

				$data['text_compare'] = sprintf($this->language->get('text_revcompare'), (isset($this->session->data['compare']) ? count($this->session->data['compare']) : 0));
				$data['compare'] = $this->url->link('product/compare');
				$data['manuf_status'] = $setting_header_menu['manuf'];
				if (VERSION >= 2.2) {
					$config_image_category_width = $this->config->get($this->config->get('config_theme') . '_image_category_width');
					$config_image_category_height = $this->config->get($this->config->get('config_theme') . '_image_category_height');
				} else {
					$config_image_category_width = $this->config->get('config_image_category_width');
					$config_image_category_height = $this->config->get('config_image_category_height');
				}
				if ($setting_header_menu['manuf']) {
					$data['text_revmenu_manufs'] = $this->language->get('text_revmenu_manufs');
					$data['url_revmenu_manufs'] = $this->url->link('product/manufacturer');
					$data['n_column'] = $setting_header_menu['n_column'];
					$this->load->model('catalog/manufacturer');
					$data['categories_m'] = array();
					$results = $this->model_catalog_manufacturer->getManufacturers();
					foreach ($results as $result) {
						$name = $result['name'];
						if (is_numeric(utf8_substr($name, 0, 1))) {
							$key = '0 - 9';
						} else {
							$key = utf8_substr(utf8_strtoupper($name), 0, 1);
						}
						if (!isset($data['categories_m'][$key])) {
							$data['categories_m'][$key]['name'] = $key;
						}
						if ($result['image']) {
							$thumb = $this->model_tool_image->resize($result['image'], $config_image_category_width, $config_image_category_height);
						} else {
							$thumb = $this->model_tool_image->resize('no_image.png', $config_image_category_width, $config_image_category_height);
						}
						$data['categories_m'][$key]['manufacturer'][] = array(
							'thumb' => $thumb,
							'name' => $name,
							'href' => $this->url->link('product/manufacturer/info', 'manufacturer_id=' . $result['manufacturer_id'])
						);
					}
				}
				$results_amazon_links = $this->config->get('revtheme_header_menu_link');
				if ($setting_header_menu['type'] && !empty($results_amazon_links)){
					foreach ($results_amazon_links as $result) {
						$data['revtheme_header_menu_links'][] = array(
							'link'  => $result['link'][$this->config->get('config_language_id')],
							'title' => $result['title'][$this->config->get('config_language_id')],
							'sort'  => $result['sort']
						);
					}
				} else {
					$data['revtheme_header_menu_links'] = false;
				}
				if (!empty($data['revtheme_header_menu_links'])){
					foreach ($data['revtheme_header_menu_links'] as $key => $value) {
						$sort[$key] = $value['sort'];
					}
					if (count($data['revtheme_header_menu_links']) > 1) {
					array_multisort($sort, SORT_ASC, $data['revtheme_header_menu_links']);
					}
				}
				if ($setting_all_settings['opacity_cont']) {
					$data['opacity_cont_class'] = 'opacity_minus';
				} else {
					$data['opacity_cont_class'] = 'opacity_minus_products';
				}
				$revtheme_dop_menu = $this->config->get('revtheme_dop_menu');
				if (!empty($revtheme_dop_menu)){
					$data['revtheme_dop_menus'] = json_decode(htmlspecialchars_decode($revtheme_dop_menu), true);
					$data['config_language_id'] = $this->config->get('config_language_id');
					foreach($data['revtheme_dop_menus'] as $key => $val){
						if (!empty($data['revtheme_dop_menus'][$key]['dop_menu_image'])){
							$data['revtheme_dop_menus'][$key]['dop_menu_image'] = $this->model_tool_image->resize($data['revtheme_dop_menus'][$key]['dop_menu_image'], $config_image_category_width, $config_image_category_height);
						} else {
							$data['revtheme_dop_menus'][$key]['dop_menu_image'] = false;
						}
						if (isset($data['revtheme_dop_menus'][$key]['children'])){
							$children = $data['revtheme_dop_menus'][$key]['children'];
							foreach($children as $key2 => $val2){
								if (!empty($data['revtheme_dop_menus'][$key]['children'][$key2]['dop_menu_image'])){
									$data['revtheme_dop_menus'][$key]['children'][$key2]['dop_menu_image'] = $this->model_tool_image->resize($data['revtheme_dop_menus'][$key]['children'][$key2]['dop_menu_image'], $config_image_category_width, $config_image_category_height);
								} else {
									$data['revtheme_dop_menus'][$key]['children'][$key2]['dop_menu_image'] = false;
								}
							}
						}
						if (!empty($data['revtheme_dop_menus'][$key]['column'])){
							$data['revtheme_dop_menus'][$key]['column'] = $data['revtheme_dop_menus'][$key]['column'];
						} else {
							$data['revtheme_dop_menus'][$key]['column'] = 1;
						}
					}
				} else {
					$data['revtheme_dop_menus'] = false;
				}
				$revtheme_dop_menu_2 = $this->config->get('revtheme_dop_menu_2');
				if (!empty($revtheme_dop_menu_2)){
					$data['revtheme_dop_menus_2'] = json_decode(htmlspecialchars_decode($revtheme_dop_menu_2), true);
					$data['config_language_id'] = $this->config->get('config_language_id');
				} else {
					$data['revtheme_dop_menus_2'] = false;
				}
				$revtheme_dop_menu_3 = $this->config->get('revtheme_dop_menu_3');
				if (!empty($revtheme_dop_menu_3)){
					$data['revtheme_dop_menus_3'] = json_decode(htmlspecialchars_decode($revtheme_dop_menu_3), true);
					$data['config_language_id'] = $this->config->get('config_language_id');
					foreach($data['revtheme_dop_menus_3'] as $key => $val){
						if (!empty($data['revtheme_dop_menus_3'][$key]['dop_menu_image_3'])){
							$data['revtheme_dop_menus_3'][$key]['dop_menu_image_3'] = $this->model_tool_image->resize($data['revtheme_dop_menus_3'][$key]['dop_menu_image_3'], 25, 25);
						} else {
							$data['revtheme_dop_menus_3'][$key]['dop_menu_image_3'] = false;
						}
						if (isset($data['revtheme_dop_menus_3'][$key]['children'])){
							$children = $data['revtheme_dop_menus_3'][$key]['children'];
							foreach($children as $key2 => $val2){
								if (!empty($data['revtheme_dop_menus_3'][$key]['children'][$key2]['dop_menu_image_3'])){
									$data['revtheme_dop_menus_3'][$key]['children'][$key2]['dop_menu_image_3'] = $this->model_tool_image->resize($data['revtheme_dop_menus_3'][$key]['children'][$key2]['dop_menu_image_3'], 25, 25);
								} else {
									$data['revtheme_dop_menus_3'][$key]['children'][$key2]['dop_menu_image_3'] = false;
								}
							}
						}
						if (!empty($data['revtheme_dop_menus_3'][$key]['column'])){
							$data['revtheme_dop_menus_3'][$key]['column'] = $data['revtheme_dop_menus_3'][$key]['column'];
						} else {
							$data['revtheme_dop_menus_3'][$key]['column'] = 1;
						}
					}
				} else {
					$data['revtheme_dop_menus_3'] = false;
				}
				$data['phone_dop_text'] = $header_phone[$this->config->get('config_language_id')]['doptext'];
				if ($this->config->get('revtheme_geo_set')['status']) {
					foreach ($data['rev_geos'] as $rev_geo) {
						if (strpos($data['phone_dop_text'], $rev_geo['code'])) {
							$data['phone_dop_text'] = str_replace($rev_geo['code'], $rev_geo['text'], $header_phone[$this->config->get('config_language_id')]['doptext2']);
						}
					}
				}
				$data['phone_dop_text2'] = $header_phone[$this->config->get('config_language_id')]['doptext2'];
				if ($this->config->get('revtheme_geo_set')['status']) {
					foreach ($data['rev_geos'] as $rev_geo) {
						if (strpos($data['phone_dop_text2'], $rev_geo['code'])) {
							$data['phone_dop_text2'] = str_replace($rev_geo['code'], $rev_geo['text'], $header_phone[$this->config->get('config_language_id')]['doptext2']);
						}
					}
				}
				$data['revtheme_header_cart'] = $revtheme_header_cart = $this->config->get('revtheme_header_cart');
				if ($revtheme_header_cart['cart_size'] == 'small') {
					$data['cart_size_class_1'] = 'col-md-7';
					$data['cart_size_class_2'] = 'col-xs-6 col-md-2';
					$data['cart_size_class_3'] = 'col-md-10';
				} else if ($revtheme_header_cart['cart_size'] == 'mini') {
					$data['cart_size_class_1'] = 'col-md-8';
					$data['cart_size_class_2'] = 'col-xs-6 col-md-1';
					$data['cart_size_class_3'] = 'col-md-11';
				} else {
					$data['cart_size_class_1'] = 'col-md-6';
					$data['cart_size_class_2'] = 'col-xs-6 col-md-3';
					$data['cart_size_class_3'] = 'col-md-9';
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$this->load->model('catalog/category');]]></search>
			<add position="before"><![CDATA[
				if ($settings_header_standart_links['rev_acc_zagolovok'] == 'name') {
					$data['text_revlogged'] = sprintf('%s', $this->customer->getFirstName());
				} else if ($settings_header_standart_links['rev_acc_zagolovok'] == 'email') {
					$data['text_revlogged'] = sprintf('%s', $this->customer->getEmail());
				} else {
					$data['text_revlogged'] = $this->language->get('text_account');
				}
				$cache_data = $this->cache->get('revmenu.' . (int)$this->config->get('config_language_id') . '.' . (int)$this->config->get('config_store_id'));
				if ($cache_data) {
					$data['categories'] = $cache_data;
				} else {
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[foreach ($children as $child) {]]></search>
			<add position="replace" offset="18"><![CDATA[
				foreach ($children as $child) {
					$children_data_level2 = array();
					if (!$setting_header_menu['image_in_ico'] || $setting_header_menu['tri_level']) {
						$children_level2 = $this->model_catalog_category->getCategories($child['category_id']);
						foreach ($children_level2 as $child_level2) {
							$data_level2 = array(
								'filter_category_id'  => $child_level2['category_id'],
								'filter_sub_category' => true
							);
							
							$filter_data_2 = array(
								'filter_category_id'  => $child_level2['category_id'],
								'filter_sub_category' => true
							);

							$children_data_level2[] = array(
								'name'  =>  $child_level2['name'] . ($this->config->get('config_product_count') ? ' <sup>' . $this->model_catalog_product->getTotalProducts($filter_data_2) . '</sup>' : ''),
								'category_id' => $child_level2['category_id'],
								'href'  => $this->url->link('product/category', 'path=' . $child['category_id'] . '_' . $child_level2['category_id']),
								
							);
						}
					}
					
					$filter_data_1 = array(
						'filter_category_id'  => $child['category_id'],
						'filter_sub_category' => true
					);

					$child_info = $this->model_catalog_category->getCategory($child['category_id']);
					if ($child_info) {
						if ($child_info['image']) {
							$thumb = $this->model_tool_image->resize($child_info['image'], $config_image_category_width, $config_image_category_height);
						} else {
							$thumb = $this->model_tool_image->resize('no_image.png', $config_image_category_width, $config_image_category_height);
						}
						if ($setting_header_menu['image_in_ico']) {
							$style = ' hidden';
						} else {
							$style = '';
						}
						if ($child_info['category_icontype']) {
							if ($child_info['category_icon'] == 'fa none') {
								$style = ' hidden';
							}
							$category_image = '<i class="am_category_icon '.$child_info['category_icon'].$style.'"></i>';
						} else {
							if (!$child_info['category_image'] || $child_info['category_image'] == 'no_image.png') {
								$style = 'hidden';
							}
							$category_image = '<span class="'.$style.'"><img src="'.$this->model_tool_image->resize($child_info['category_image'], 21, 21).'" alt=""/></span>';
						}
					}
					
					$children_data[] = array(
						'name'        	 => $child['name'] . ($this->config->get('config_product_count') ? ' <sup>' . $this->model_catalog_product->getTotalProducts($filter_data_1) . '</sup>' : ''),
						'thumb' 		 => $thumb,
						'category_image' => $category_image,
						'category_id' 	 => $child['category_id'],
						'children'   	 => $children_data_level2,
						'href'        	 => $this->url->link('product/category', 'path=' . $category['category_id'] . '_' . $child['category_id'])
					);
				}
				
				$category_info = $this->model_catalog_category->getCategory($category['category_id']);
				if ($category_info) {
					if ($category_info['image2']) {
						$thumb2 = $this->model_tool_image->resize($category_info['image2'], 300, 300);
					} else {
						$thumb2 = '';
					}
					$style = '';
					if ($category_info['category_icontype']) {
						if ($category_info['category_icon'] == 'fa none') {
							$style = ' hidden';
						}
						$category_image = '<i class="am_category_icon hidden-md '.$category_info['category_icon'].$style.'"></i>';
					} else {
						if (!$category_info['category_image'] || $category_info['category_image'] == 'no_image.png') {
							$style = ' hidden';
						}
						$category_image = '<span class="hidden-md'.$style.'"><img src="'.$this->model_tool_image->resize($category_info['category_image'], 21, 21).'" alt=""/></span>';
					}
				}
				
				$data['categories'][] = array(
					'category_id' 	 => $category['category_id'],
					'name'     		 => $category['name'],
					'thumb2'   		 => $thumb2,
					'category_image' => $category_image,
					'children' 		 => $children_data,
					'column'   		 => $category['column'] ? $category['column'] : 1,
					'href'    		 => $this->url->link('product/category', 'path=' . $category['category_id'])
				);
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$data['language']]]></search>
			<add position="before"><![CDATA[
					if ($setting_all_settings['cache_on']) {
						$this->cache->set('revmenu.' . (int)$this->config->get('config_language_id') . '.' . (int)$this->config->get('config_store_id'), $data['categories']);
					}
				}
			]]></add>
		</operation>
	</file>
	<file path="catalog/controller/common/footer.php">
		<operation>
			<search><![CDATA[$data['informations'] = array();]]></search>
			<add position="before"><![CDATA[
				if (VERSION >= 2.2) {
					$data['catalog_img_width'] = $this->config->get($this->config->get('config_theme') . '_image_product_width');
				} else {
					$data['catalog_img_width'] = $this->config->get('config_image_product_width');
				}
				$data['revfilter_route'] = false;
				if (isset($this->request->get['route']) && $this->request->get['route'] != 'product/category') {
					$data['revfilter_route'] = true;
				}
				if ($this->config->get('revtheme_geo_set')['status']) {
					require_once(DIR_SYSTEM . 'library/revolution/SxGeo.php');
					$SxGeo = new SxGeo();
					if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
						$ip = $_SERVER['HTTP_CLIENT_IP'];
					} else if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
						$ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
					} else {
						$ip = $_SERVER['REMOTE_ADDR'];
					}
					$ip_city = $SxGeo->getCity($ip)['city']['name_ru'];
					$ip_region = $SxGeo->getCityFull($ip)['region']['name_ru'];
					$rev_geo_data = $this->config->get('revtheme_geo');
					$data['rev_geos'] = array();
					if (!empty($rev_geo_data)){
						foreach ($rev_geo_data as $rev_geo) {
							if ($ip_city == $rev_geo['city'] || $ip_region == $rev_geo['city']) {
								$data['rev_geos'][] = array(
									'code' => $rev_geo['code'],
									'text' => $rev_geo['text'][$this->config->get('config_language_id')]
								);
							}
						}
					}
				}
				$data['config_email'] = $this->config->get('config_email');
				$header_phone = $this->config->get('revtheme_header_phone');
				$data['header_phone_cod'] = $header_phone[$this->config->get('config_language_id')]['cod'];
				$data['header_phone_number'] = $header_phone[$this->config->get('config_language_id')]['number'];
				if ($this->config->get('revtheme_geo_set')['status']) {
					foreach ($data['rev_geos'] as $rev_geo) {
						if ($data['header_phone_number'] == $rev_geo['code']) {
							$data['header_phone_number'] = $rev_geo['text'];
						}
					}
				}
				$data['header_phone_cod2'] = $header_phone[$this->config->get('config_language_id')]['cod2'];
				$data['header_phone_number2'] = $header_phone[$this->config->get('config_language_id')]['number2'];
				if ($this->config->get('revtheme_geo_set')['status']) {
					foreach ($data['rev_geos'] as $rev_geo) {
						if ($data['header_phone_number2'] == $rev_geo['code']) {
							$data['header_phone_number2'] = $rev_geo['text'];
						}
					}
				}
				$results = $this->config->get('revtheme_footer_icon');
				if (!empty($results)){
					$this->load->model('tool/image');
					foreach ($results as $result) {
						$image = $this->model_tool_image->resize($result['image'], 50, 30);
						$data['revtheme_footer_icons'][] = array(
							'image' => $image,
							'href'  => $result['href'],
							'sort'  => $result['sort']
						);
					}
				} else {			
					$data['revtheme_footer_icons'] = false;
				}
				if (!empty($data['revtheme_footer_icons'])){
					foreach ($data['revtheme_footer_icons'] as $key => $value) {
						$sort[$key] = $value['sort'];
					}
					array_multisort($sort, SORT_ASC, $data['revtheme_footer_icons']);
				}				
				$results2 = $this->config->get('revtheme_footer_soc');
				if (!empty($results2)){
					foreach ($results2 as $result) {
						$data['revtheme_footer_socs'][] = array(
							'image' => $result['image'],
							'link'  => $result['link'][$this->config->get('config_language_id')],
							'title' => $result['title'][$this->config->get('config_language_id')],
							'sort'  => $result['sort']
						);
					}
				} else {
					$data['revtheme_footer_socs'] = false;
				}
				if (!empty($data['revtheme_footer_socs'])){
					foreach ($data['revtheme_footer_socs'] as $key => $value) {
						$sort2[$key] = $value['sort'];
					}
					array_multisort($sort2, SORT_ASC, $data['revtheme_footer_socs']);
				}
				$results_f_links = $this->config->get('revtheme_footer_link');
				if (!empty($results_f_links)){
					foreach ($results_f_links as $result) {
						$data['revtheme_footer_links'][] = array(
							'link'  => $result['link'][$this->config->get('config_language_id')],
							'title' => $result['title'][$this->config->get('config_language_id')],
							'sort'  => $result['sort']
						);
					}
				} else {
					$data['revtheme_footer_links'] = false;
				}
				if (!empty($data['revtheme_footer_links'])){
					foreach ($data['revtheme_footer_links'] as $key => $value) {
						$sort3[$key] = $value['sort'];
					}
					if (count($data['revtheme_footer_links']) > 1) {
					array_multisort($sort3, SORT_ASC, $data['revtheme_footer_links']);
					}
				}
				$setting_menu = $this->config->get('revtheme_header_menu');
				$data['up_menu_height'] = $setting_menu['up_menu_height'];
				$data['sticky'] = $setting_menu['sticky'];
				$data['image_in_ico'] = $setting_menu['image_in_ico'];
				$data['header_menu_type'] = $setting_menu['type'];
				$data['zadergka'] = false;
				if ($setting_menu['zadergka']) {
					$data['zadergka'] = true;
				}
				$setting_footer_all = $this->config->get('revtheme_footer_all');
				$data['in_top'] = $setting_footer_all['in_top'];
				$data['popup_phone'] = $setting_footer_all['popup_phone'];
				$data['f_map'] = $setting_footer_all['f_map'];
				$setting_footer_user_set = $this->config->get('revtheme_footer_user_set');
				$data['user_scripts'] = html_entity_decode($setting_footer_user_set['scripts'], ENT_QUOTES, 'UTF-8');
				$settings_all_settings = $this->config->get('revtheme_all_settings');
				$data['modal_status'] = $settings_all_settings['modal_status'];
				$data['modal_buttons'] = $settings_all_settings['modal_buttons'];
				$data['n_progres'] = $settings_all_settings['n_progres'];
				$this->load->language('revolution/revolution');
				$data['text_footer_popup_phone_tooltip'] = $this->language->get('text_footer_popup_phone_tooltip');
				$data['text_loadmore'] = $this->language->get('text_loadmore');
				$data['description_options'] = $this->config->get('revtheme_cat_attributes');
				$data['setting_catalog_all'] = $this->config->get('revtheme_catalog_all');
				$data['revtheme_header_cart'] = $this->config->get('revtheme_header_cart');
				$data['setting_all_settings'] = $this->config->get('revtheme_all_settings');
				$data['revsubscribe'] = $this->load->controller('revolution/revsubscribe');
				$data['revtheme_filter'] = $this->config->get('revtheme_filter');
				if ($setting_footer_all['f_map']) {
					$data['yamap'] = html_entity_decode($settings_all_settings['yamap'], ENT_QUOTES, 'UTF-8');
					$data['telephone'] = $this->config->get('config_telephone');
					$data['store'] = $this->config->get('config_name');
					$data['address'] = nl2br($this->config->get('config_address'));
					$data['text_contact_ourcontacts'] = $this->language->get('text_contact_ourcontacts');
					$data['settings_all_settings'] = $this->config->get('revtheme_all_settings');
					$results3 = $this->config->get('revtheme_footer_soc');
					if (!empty($results3)){
						$http_s = array("http://", "https://");
						foreach ($results3 as $result) {
							if ($settings_all_settings['soc_conts_url']) {
								$link_t = explode('/', str_replace($http_s,'',$result['link'][$this->config->get('config_language_id')]));
								$link_t = $link_t[0];
							} else {
								$link_t = $result['title'][$this->config->get('config_language_id')];
							}
							$data['revtheme_footer_socs_p'][] = array(
								'image'  => $result['image'],
								'link'   => $result['link'][$this->config->get('config_language_id')],
								'link_t' => $link_t,
								'title'  => $result['title'][$this->config->get('config_language_id')],
								'sort'   => $result['sort']
							);
						}
					} else {
						$data['revtheme_footer_socs_p'] = false;
					}
					if (!empty($data['revtheme_footer_socs_p'])){
						foreach ($data['revtheme_footer_socs_p'] as $key => $value) {
							$sort3[$key] = $value['sort'];
						}
						array_multisort($sort3, SORT_ASC, $data['revtheme_footer_socs_p']);
					}
					$dop_contact_status = $this->config->get('revtheme_header_dop_contacts_status');
					if ($dop_contact_status){
						$dop_contact = $this->config->get('revtheme_header_dop_contact');
						if (!empty($dop_contact)){
							foreach ($dop_contact as $result) {
								
								$style = '';
								$this->load->model('tool/image');
								if ($result['icontype']) {
									if ($result['icon'] == 'fa none') {
										$style = ' hidden';
									}
									$result_icon = '<i class="'.$result['icon'].$style.'"></i>';
								} else {
									if (!$result['image'] || $result['image'] == 'no_image.png') {
										$style = ' hidden';
									}
									$result_icon = '<img class="'.$style.'" src="'.$this->model_tool_image->resize($result['image'], 21, 21).'" alt=""/>';
								}
								$number = $result['number'][$this->config->get('config_language_id')];
								if ($this->config->get('revtheme_geo_set')['status']) {
									foreach ($data['rev_geos'] as $rev_geo) {
										if ($number == $rev_geo['code']) {
											$number = $rev_geo['text'];
										}
									}
								}
								
								$data['dop_contacts'][] = array(
									'icon' 		=> $result_icon,
									'number' 	=> $number,
									'href' 		=> $result['href'][$this->config->get('config_language_id')],
									'sort'  	=> $result['sort']
								);
							}
							
							foreach ($data['dop_contacts'] as $key => $value) {
								$sort_dop_contacts3[$key] = $value['sort'];
							}
							if (count($data['dop_contacts']) > 1) {
								array_multisort($sort_dop_contacts3, SORT_ASC, $data['dop_contacts']);
							}

						} else {
							$data['dop_contacts'] = false;
						}
					} else {
							$data['dop_contacts'] = false;
					}
				}
				$data['revtheme_product_all'] = $this->config->get('revtheme_product_all');
				
				$data['revtheme_custom_footer'] = $revtheme_custom_footer = $this->config->get('revtheme_custom_footer');
				$img_cf_wh = 18;
				$data['config_language_id'] = $this->config->get('config_language_id');
				$revtheme_dop_menu_cf = $this->config->get('revtheme_dop_menu_cf');
				if (!empty($revtheme_dop_menu_cf)){
					$data['revtheme_dop_menus_cf'] = json_decode(htmlspecialchars_decode($revtheme_dop_menu_cf), true);
					foreach($data['revtheme_dop_menus_cf'] as $key => $val){
						if (!empty($data['revtheme_dop_menus_cf'][$key]['dop_menu_image_cf'])){
							$data['revtheme_dop_menus_cf'][$key]['dop_menu_image_cf'] = $this->model_tool_image->resize($data['revtheme_dop_menus_cf'][$key]['dop_menu_image_cf'], $img_cf_wh, $img_cf_wh);
						} else {
							$data['revtheme_dop_menus_cf'][$key]['dop_menu_image_cf'] = false;
						}
						if (isset($data['revtheme_dop_menus_cf'][$key]['children'])){
							$children = $data['revtheme_dop_menus_cf'][$key]['children'];
							foreach($children as $key2 => $val2){
								if (!empty($data['revtheme_dop_menus_cf'][$key]['children'][$key2]['dop_menu_image_cf'])){
									$data['revtheme_dop_menus_cf'][$key]['children'][$key2]['dop_menu_image_cf'] = $this->model_tool_image->resize($data['revtheme_dop_menus_cf'][$key]['children'][$key2]['dop_menu_image_cf'], $img_cf_wh, $img_cf_wh);
								} else {
									$data['revtheme_dop_menus_cf'][$key]['children'][$key2]['dop_menu_image_cf'] = false;
								}
							}
						}
					}
				} else {
					$data['revtheme_dop_menus_cf'] = false;
				}
				$data['cf_1_width'] = 'class="hidden-xs hidden-sm col-sm-12 cf_1_width" style="width:'.$revtheme_custom_footer['cf_1_width'].'%"';
				$data['cf_1_description'] = html_entity_decode($revtheme_custom_footer[$this->config->get('config_language_id')]['cf_1_description'], ENT_QUOTES, 'UTF-8');
				
				$revtheme_dop_menu_cf_2 = $this->config->get('revtheme_dop_menu_cf_2');
				if (!empty($revtheme_dop_menu_cf_2)){
					$data['revtheme_dop_menus_cf_2'] = json_decode(htmlspecialchars_decode($revtheme_dop_menu_cf_2), true);
					foreach($data['revtheme_dop_menus_cf_2'] as $key => $val){
						if (!empty($data['revtheme_dop_menus_cf_2'][$key]['dop_menu_image_cf'])){
							$data['revtheme_dop_menus_cf_2'][$key]['dop_menu_image_cf'] = $this->model_tool_image->resize($data['revtheme_dop_menus_cf_2'][$key]['dop_menu_image_cf'], $img_cf_wh, $img_cf_wh);
						} else {
							$data['revtheme_dop_menus_cf_2'][$key]['dop_menu_image_cf'] = false;
						}
						if (isset($data['revtheme_dop_menus_cf_2'][$key]['children'])){
							$children = $data['revtheme_dop_menus_cf_2'][$key]['children'];
							foreach($children as $key2 => $val2){
								if (!empty($data['revtheme_dop_menus_cf_2'][$key]['children'][$key2]['dop_menu_image_cf'])){
									$data['revtheme_dop_menus_cf_2'][$key]['children'][$key2]['dop_menu_image_cf'] = $this->model_tool_image->resize($data['revtheme_dop_menus_cf_2'][$key]['children'][$key2]['dop_menu_image_cf'], $img_cf_wh, $img_cf_wh);
								} else {
									$data['revtheme_dop_menus_cf_2'][$key]['children'][$key2]['dop_menu_image_cf'] = false;
								}
							}
						}
					}
				} else {
					$data['revtheme_dop_menus_cf_2'] = false;
				}
				$data['cf_2_width'] = 'class="hidden-xs hidden-sm col-sm-12 cf_2_width" style="width:'.$revtheme_custom_footer['cf_2_width'].'%"';
				$data['cf_2_description'] = html_entity_decode($revtheme_custom_footer[$this->config->get('config_language_id')]['cf_2_description'], ENT_QUOTES, 'UTF-8');
				
				$revtheme_dop_menu_cf_3 = $this->config->get('revtheme_dop_menu_cf_3');
				if (!empty($revtheme_dop_menu_cf_3)){
					$data['revtheme_dop_menus_cf_3'] = json_decode(htmlspecialchars_decode($revtheme_dop_menu_cf_3), true);
					foreach($data['revtheme_dop_menus_cf_3'] as $key => $val){
						if (!empty($data['revtheme_dop_menus_cf_3'][$key]['dop_menu_image_cf'])){
							$data['revtheme_dop_menus_cf_3'][$key]['dop_menu_image_cf'] = $this->model_tool_image->resize($data['revtheme_dop_menus_cf_3'][$key]['dop_menu_image_cf'], $img_cf_wh, $img_cf_wh);
						} else {
							$data['revtheme_dop_menus_cf_3'][$key]['dop_menu_image_cf'] = false;
						}
						if (isset($data['revtheme_dop_menus_cf_3'][$key]['children'])){
							$children = $data['revtheme_dop_menus_cf_3'][$key]['children'];
							foreach($children as $key2 => $val2){
								if (!empty($data['revtheme_dop_menus_cf_3'][$key]['children'][$key2]['dop_menu_image_cf'])){
									$data['revtheme_dop_menus_cf_3'][$key]['children'][$key2]['dop_menu_image_cf'] = $this->model_tool_image->resize($data['revtheme_dop_menus_cf_3'][$key]['children'][$key2]['dop_menu_image_cf'], $img_cf_wh, $img_cf_wh);
								} else {
									$data['revtheme_dop_menus_cf_3'][$key]['children'][$key2]['dop_menu_image_cf'] = false;
								}
							}
						}
					}
				} else {
					$data['revtheme_dop_menus_cf_3'] = false;
				}
				$data['cf_3_width'] = 'class="hidden-xs hidden-sm col-sm-12 cf_3_width" style="width:'.$revtheme_custom_footer['cf_3_width'].'%"';
				$data['cf_3_description'] = html_entity_decode($revtheme_custom_footer[$this->config->get('config_language_id')]['cf_3_description'], ENT_QUOTES, 'UTF-8');
				
				$revtheme_dop_menu_cf_4 = $this->config->get('revtheme_dop_menu_cf_4');
				if (!empty($revtheme_dop_menu_cf_4)){
					$data['revtheme_dop_menus_cf_4'] = json_decode(htmlspecialchars_decode($revtheme_dop_menu_cf_4), true);
					foreach($data['revtheme_dop_menus_cf_4'] as $key => $val){
						if (!empty($data['revtheme_dop_menus_cf_4'][$key]['dop_menu_image_cf'])){
							$data['revtheme_dop_menus_cf_4'][$key]['dop_menu_image_cf'] = $this->model_tool_image->resize($data['revtheme_dop_menus_cf_4'][$key]['dop_menu_image_cf'], $img_cf_wh, $img_cf_wh);
						} else {
							$data['revtheme_dop_menus_cf_4'][$key]['dop_menu_image_cf'] = false;
						}
						if (isset($data['revtheme_dop_menus_cf_4'][$key]['children'])){
							$children = $data['revtheme_dop_menus_cf_4'][$key]['children'];
							foreach($children as $key2 => $val2){
								if (!empty($data['revtheme_dop_menus_cf_4'][$key]['children'][$key2]['dop_menu_image_cf'])){
									$data['revtheme_dop_menus_cf_4'][$key]['children'][$key2]['dop_menu_image_cf'] = $this->model_tool_image->resize($data['revtheme_dop_menus_cf_4'][$key]['children'][$key2]['dop_menu_image_cf'], $img_cf_wh, $img_cf_wh);
								} else {
									$data['revtheme_dop_menus_cf_4'][$key]['children'][$key2]['dop_menu_image_cf'] = false;
								}
							}
						}
					}
				} else {
					$data['revtheme_dop_menus_cf_4'] = false;
				}
				$data['cf_4_width'] = 'class="hidden-xs hidden-sm col-sm-12 cf_4_width" style="width:'.$revtheme_custom_footer['cf_4_width'].'%"';
				$data['cf_4_description'] = html_entity_decode($revtheme_custom_footer[$this->config->get('config_language_id')]['cf_4_description'], ENT_QUOTES, 'UTF-8');
				
				$revtheme_dop_menu_cf_5 = $this->config->get('revtheme_dop_menu_cf_5');
				if (!empty($revtheme_dop_menu_cf_5)){
					$data['revtheme_dop_menus_cf_5'] = json_decode(htmlspecialchars_decode($revtheme_dop_menu_cf_5), true);
					foreach($data['revtheme_dop_menus_cf_5'] as $key => $val){
						if (!empty($data['revtheme_dop_menus_cf_5'][$key]['dop_menu_image_cf'])){
							$data['revtheme_dop_menus_cf_5'][$key]['dop_menu_image_cf'] = $this->model_tool_image->resize($data['revtheme_dop_menus_cf_5'][$key]['dop_menu_image_cf'], $img_cf_wh, $img_cf_wh);
						} else {
							$data['revtheme_dop_menus_cf_5'][$key]['dop_menu_image_cf'] = false;
						}
						if (isset($data['revtheme_dop_menus_cf_5'][$key]['children'])){
							$children = $data['revtheme_dop_menus_cf_5'][$key]['children'];
							foreach($children as $key2 => $val2){
								if (!empty($data['revtheme_dop_menus_cf_5'][$key]['children'][$key2]['dop_menu_image_cf'])){
									$data['revtheme_dop_menus_cf_5'][$key]['children'][$key2]['dop_menu_image_cf'] = $this->model_tool_image->resize($data['revtheme_dop_menus_cf_5'][$key]['children'][$key2]['dop_menu_image_cf'], $img_cf_wh, $img_cf_wh);
								} else {
									$data['revtheme_dop_menus_cf_5'][$key]['children'][$key2]['dop_menu_image_cf'] = false;
								}
							}
						}
					}
				} else {
					$data['revtheme_dop_menus_cf_5'] = false;
				}
				$data['cf_5_width'] = 'class="hidden-xs hidden-sm col-sm-12 cf_5_width" style="width:'.$revtheme_custom_footer['cf_5_width'].'%"';
				$data['cf_5_description'] = html_entity_decode($revtheme_custom_footer[$this->config->get('config_language_id')]['cf_5_description'], ENT_QUOTES, 'UTF-8');
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$data['powered'] = sprintf($this->language->get('text_powered'), $this->config->get('config_name'), date('Y', time()));]]></search>
			<add position="replace"><![CDATA[
				if ($setting_footer_all['copy']) {
					$domen = $_SERVER['HTTP_HOST'];
					if(stristr($domen, 'xn--')) {
						require_once('catalog/controller/revolution/idna_convert.class.php');
						$idn = new idna_convert(array('idn_version'=>2008));
						$domen = (stripos($domen, 'xn--')!==false) ? $idn->decode($domen) : $idn->encode($domen);
					} else {					
						$domen = $_SERVER['HTTP_HOST'];
					}
					$data['powered'] = sprintf($this->language->get('text_powered_rev'), $domen, $this->config->get('config_name'), date('Y', time()));
				} else {
					$data['powered'] = $setting_footer_all[$this->config->get('config_language_id')]['copy_text'];
				}
			]]></add>
		</operation>
	</file>
	<file path="catalog/controller/common/cart.php">
		<operation>
			<search><![CDATA[$this->load->language('common/cart');]]></search>
			<add position="after"><![CDATA[
				$data['setting_header_cart'] = $revtheme_header_cart = $this->config->get('revtheme_header_cart');
				$data['setting_revtheme_header_menu'] = $this->config->get('revtheme_header_menu');
				$revtheme_all_settings = $this->config->get('revtheme_all_settings');
				$this->load->language('revolution/revolution');
				$data['text_rev_buy_quick'] = $this->language->get('text_rev_buy_quick');

				$style = '';
				$this->load->model('tool/image');
				if ($data['setting_header_cart']['icontype']) {
					if ($data['setting_header_cart']['icon'] == 'fa none') {
						$style = ' hidden';
					}
					$image = '<i class="'.$data['setting_header_cart']['icon'].$style.'"></i>';
				} else {
					if (!$data['setting_header_cart']['image'] || $data['setting_header_cart']['image'] == 'no_image.png') {
						$style = ' hidden';
					}
					$image = '<span class="heading_ico_image'.$style.'"><img src="'.$this->model_tool_image->resize($data['setting_header_cart']['image'], 21, 21).'" alt=""/></span>';
				}
				$data['mini_header_cart_class'] = '';
				if ($revtheme_header_cart['cart_size'] == 'small') {
					$heading_title = ($image . $this->language->get('text_rev_items_small'));
				} else if ($revtheme_header_cart['cart_size'] == 'mini') {
					$heading_title = ($image . $this->language->get('text_rev_items_mini'));
					$data['mini_header_cart_class'] = 'mini_header_cart';
				} else {
					$heading_title = ($image . $this->language->get('text_rev_items'));
				}
				if (VERSION >= 2.2) {
					$config_image_cart_width = $this->config->get($this->config->get('config_theme') . '_image_cart_width');
					$config_image_cart_height = $this->config->get($this->config->get('config_theme') . '_image_cart_height');
				} else {
					$config_image_cart_width = $this->config->get('config_image_cart_width');
					$config_image_cart_height = $this->config->get('config_image_cart_height');
				}
				$product_settings = $this->config->get('revtheme_product_all');
				$data['q_zavisimost'] = $product_settings['q_zavisimost'];
				$this->load->model('catalog/product');
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[sprintf($this->language->get('text_items')]]></search>
			<add position="replace"><![CDATA[sprintf($heading_title]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$image = '';]]></search>
			<add position="replace"><![CDATA[$image = $this->model_tool_image->resize('no_image.png', $config_image_cart_width, $config_image_cart_height);]]></add>
		</operation>
		<operation>
			<search><![CDATA[$option_data[] = array(]]></search>
			<add position="before"><![CDATA[
				if (isset($option['opt_image'])) {
					if ($option['opt_image']) {
						$image = $option['opt_image'] ? $this->model_tool_image->resize($option['opt_image'], $config_image_cart_width, $config_image_cart_height) : '';
					} else {
						$image = $image;
					}
				}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA['checkout/checkout']]></search>
			<add position="replace" error="skip"><![CDATA[isset($this->config->get('revtheme_all_settings')['revcheckout_status']) && $this->config->get('revtheme_all_settings')['revcheckout_status'] ? 'revolution/revcheckout' : 'checkout/checkout'
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$option_data = array();]]></search>
			<add position="before" error="skip"><![CDATA[$quantity_pr = $this->model_catalog_product->getProduct($product['product_id'])['quantity'];]]></add>
		</operation>
		<operation>
			<search><![CDATA[$product['model'],]]></search>
			<add position="replace" error="skip"><![CDATA[$product['model'], 'minimum'  => $product['minimum'], 'quantity_pr'  => $quantity_pr, 'product_id' => $product['product_id'],]]></add>
		</operation>
	</file>
	<file path="catalog/language/{ru-ru,russian}/captcha/basic_captcha.php">
		<operation error="skip">
			<search><![CDATA[Enter the code in the box below]]></search>
			<add position="replace"><![CDATA[Код с картинки]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[Verification code does not match the image!]]></search>
			<add position="replace"><![CDATA[Проверочный код не совпадает с кодом с картинки!]]></add>
		</operation>
	</file>
	<file path="catalog/language/{ru-ru,russian}/captcha/google_captcha.php">
		<operation error="skip">
			<search><![CDATA[Enter the code in the box below]]></search>
			<add position="replace"><![CDATA[Код с картинки]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[Verification code does not match the image!]]></search>
			<add position="replace"><![CDATA[Проверочный код не совпадает с кодом с картинки!]]></add>
		</operation>
	</file>
	<file path="admin/controller/catalog/review.php">
		<operation>
			<search><![CDATA[$data['entry_text'] = $this->language->get('entry_text');]]></search>
			<add position="after"><![CDATA[
				$data['entry_answer'] = $this->language->get('entry_answer');
				$data['entry_answer_from'] = $this->language->get('entry_answer_from');

				if (isset($this->request->post['answer'])) {
					$data['answer'] = $this->request->post['answer'];
				} elseif (!empty($review_info)) {
					$data['answer'] = $review_info['answer'];
				} else {
					$data['answer'] = '';
				}
				if (isset($this->request->post['answer_from'])) {
					$data['answer_from'] = $this->request->post['answer_from'];
				} elseif (!empty($review_info['answer_from'])) {
					$data['answer_from'] = $review_info['answer_from'];
				} else {
					$data['answer_from'] = 'Администратор';
				}
			]]></add>
		</operation>
	</file>
	<file path="admin/language/{ru-ru,russian}/catalog/review.php">
		<operation error="skip">
			<search><![CDATA[$_['entry_product']]]></search>
			<add position="before"><![CDATA[
				$_['entry_answer'] = 'Ответ:';
				$_['entry_answer_from'] = 'Автор ответа:';
			]]></add>
		</operation>
	</file>
	<file path="admin/model/catalog/review.php">
		<operation error="skip">
			<search><![CDATA[$this->db->query("INSERT INTO " . DB_PREFIX . "review SET author = '" . $this->db->escape($data['author']) . "', product_id = '" . (int)$data['product_id'] . "', text = '" . $this->db->escape(strip_tags($data['text'])) . "', rating = '" . (int)$data['rating'] . "', status = '" . (int)$data['status'] . "', date_added = NOW()");]]></search>
			<add position="replace"><![CDATA[$this->db->query("INSERT INTO " . DB_PREFIX . "review SET author = '" . $this->db->escape($data['author']) . "', product_id = '" . (int)$data['product_id'] . "', text = '" . $this->db->escape(strip_tags($data['text'])) . "', answer = '" . $this->db->escape(strip_tags($data['answer'])) . "', answer_from = '" . $this->db->escape($data['answer_from']) . "', rating = '" . (int)$data['rating'] . "', status = '" . (int)$data['status'] . "', date_added = NOW()");]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$this->db->query("UPDATE " . DB_PREFIX . "review SET author = '" . $this->db->escape($data['author']) . "', product_id = '" . (int)$data['product_id'] . "', text = '" . $this->db->escape(strip_tags($data['text'])) . "', rating = '" . (int)$data['rating'] . "', status = '" . (int)$data['status'] . "', date_modified = NOW() WHERE review_id = '" . (int)$review_id . "'");]]></search>
			<add position="replace"><![CDATA[$this->db->query("UPDATE " . DB_PREFIX . "review SET author = '" . $this->db->escape($data['author']) . "', product_id = '" . (int)$data['product_id'] . "', text = '" . $this->db->escape(strip_tags($data['text'])) . "', answer = '" . $this->db->escape(strip_tags($data['answer'])) . "', answer_from = '" . $this->db->escape($data['answer_from']) . "', rating = '" . (int)$data['rating'] . "', status = '" . (int)$data['status'] . "', date_modified = NOW() WHERE review_id = '" . (int)$review_id . "'");]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$this->db->query("INSERT INTO " . DB_PREFIX . "review SET author = '" . $this->db->escape($data['author']) . "', product_id = '" . (int)$data['product_id'] . "', text = '" . $this->db->escape(strip_tags($data['text'])) . "', rating = '" . (int)$data['rating'] . "', status = '" . (int)$data['status'] . "', date_added = '" . $this->db->escape($data['date_added']) . "'");]]></search>
			<add position="replace"><![CDATA[$this->db->query("INSERT INTO " . DB_PREFIX . "review SET author = '" . $this->db->escape($data['author']) . "', product_id = '" . (int)$data['product_id'] . "', text = '" . $this->db->escape(strip_tags($data['text'])) . "', answer = '" . $this->db->escape(strip_tags($data['answer'])) . "', answer_from = '" . $this->db->escape($data['answer_from']) . "', rating = '" . (int)$data['rating'] . "', status = '" . (int)$data['status'] . "', date_added = '" . $this->db->escape($data['date_added']) . "'");]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$this->db->query("UPDATE " . DB_PREFIX . "review SET author = '" . $this->db->escape($data['author']) . "', product_id = '" . (int)$data['product_id'] . "', text = '" . $this->db->escape(strip_tags($data['text'])) . "', rating = '" . (int)$data['rating'] . "', status = '" . (int)$data['status'] . "', date_added = '" . $this->db->escape($data['date_added']) . "', date_modified = NOW() WHERE review_id = '" . (int)$review_id . "'");]]></search>
			<add position="replace"><![CDATA[$this->db->query("UPDATE " . DB_PREFIX . "review SET author = '" . $this->db->escape($data['author']) . "', product_id = '" . (int)$data['product_id'] . "', text = '" . $this->db->escape(strip_tags($data['text'])) . "', answer = '" . $this->db->escape(strip_tags($data['answer'])) . "', answer_from = '" . $this->db->escape($data['answer_from']) . "', rating = '" . (int)$data['rating'] . "', status = '" . (int)$data['status'] . "', date_added = '" . $this->db->escape($data['date_added']) . "', date_modified = NOW() WHERE review_id = '" . (int)$review_id . "'");]]></add>
		</operation>
	</file>
	<file path="admin/view/template/catalog/review_form.tpl">
		<operation>
			<search><![CDATA[<label class="col-sm-2 control-label" for="input-name"><?php echo $entry_rating; ?></label>]]></search>
			<add position="before" offset="1"><![CDATA[
				<div class="form-group">
					<label class="col-sm-2 control-label" for="input-answer"><?php echo $entry_answer; ?></label>
					<div class="col-sm-10">
						<textarea name="answer" cols="60" rows="8" placeholder="<?php echo $entry_answer; ?>" id="input-answer" class="form-control"><?php echo $answer; ?></textarea>
					</div>
				</div>
				<div class="form-group required">
					<label class="col-sm-2 control-label" for="input-answer_from"><?php echo $entry_answer_from; ?></label>
					<div class="col-sm-10">
						<input type="text" name="answer_from" value="<?php echo $answer_from; ?>" id="input-answer_from" class="form-control" />
					</div>
				</div>
			]]></add>
		</operation>
	</file>
	<file path="catalog/model/catalog/review.php">
		<operation>
			<search><![CDATA[$query = $this->db->query("SELECT r.review_id, r.author, r.rating, r.text, p.product_id, pd.name, p.price, p.image, r.date_added FROM " . DB_PREFIX . "review r LEFT JOIN " . DB_PREFIX . "product p ON (r.product_id = p.product_id) LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) WHERE p.product_id = '" . (int)$product_id . "' AND p.date_available <= NOW() AND p.status = '1' AND r.status = '1' AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "' ORDER BY r.date_added DESC LIMIT " . (int)$start . "," . (int)$limit);]]></search>
			<add position="replace"><![CDATA[$query = $this->db->query("SELECT r.review_id, r.author, r.rating, r.text, r.answer, r.answer_from, p.product_id, pd.name, p.price, p.image, r.date_added FROM " . DB_PREFIX . "review r LEFT JOIN " . DB_PREFIX . "product p ON (r.product_id = p.product_id) LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) WHERE p.product_id = '" . (int)$product_id . "' AND p.date_available <= NOW() AND p.status = '1' AND r.status = '1' AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "' ORDER BY r.date_added DESC LIMIT " . (int)$start . "," . (int)$limit);]]></add>
		</operation>
	</file>
	<file path="catalog/controller/error/not_found.php">
		<operation error="skip">
			<search><![CDATA[$this->response->setOutput($this->load->view($this->config->get('config_template') . '/template/error/not_found.tpl', $data));]]></search>
			<add position="replace"><![CDATA[
				$this->load->language('revolution/revolution');
				$data['text_not_found_message'] = $this->language->get('text_not_found_message');	
				$setting_all_settings = $this->config->get('revtheme_all_settings');
				$error404 = $setting_all_settings['error404'];
				if ($error404) {
					$this->response->setOutput($this->load->view($this->config->get('config_template') . '/template/error/not_found_alt.tpl', $data));
				} else {	
					$this->response->setOutput($this->load->view($this->config->get('config_template') . '/template/error/not_found.tpl', $data));
				}
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$this->response->setOutput($this->load->view('error/not_found', $data));]]></search>
			<add position="replace"><![CDATA[
				$this->load->language('revolution/revolution');
				$data['text_not_found_message'] = $this->language->get('text_not_found_message');	
				$setting_all_settings = $this->config->get('revtheme_all_settings');
				$error404 = $setting_all_settings['error404'];
				if ($error404) {
					$this->response->setOutput($this->load->view('error/not_found_alt', $data));
				} else {	
					$this->response->setOutput($this->load->view('error/not_found', $data));
				}
			]]></add>
		</operation>
	</file>
	<file path="admin/language/{ru-ru,russian}/catalog/product.php">
		<operation error="skip">
			<search><![CDATA[$_['heading_title']]]></search>
			<add position="before"><![CDATA[$_['entry_video'] = 'Ссылка на видео:';]]></add>
		</operation>
	</file>
	<file path="catalog/language/{ru-ru,russian}/{ru-ru,russian}.php">
		<operation error="skip">
			<search><![CDATA[<i class="fa fa-home"></i>]]></search>
			<add position="replace"><![CDATA[Главная]]></add>
		</operation>
	</file>
	<file path="catalog/language/*/*.php">
		<operation error="skip">
			<search><![CDATA[<i class="fa fa-home"></i>]]></search>
			<add position="replace"><![CDATA[Home]]></add>
		</operation>
	</file>
	<file path="catalog/controller/information/information.php">
		<operation>
			<search><![CDATA[$data['column_left']]]></search>
			<add position="before"><![CDATA[
				if ($this->config->get('revtheme_geo_set')['status']) {
					require_once(DIR_SYSTEM . 'library/revolution/SxGeo.php');
					$SxGeo = new SxGeo();
					if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
						$ip = $_SERVER['HTTP_CLIENT_IP'];
					} else if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
						$ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
					} else {
						$ip = $_SERVER['REMOTE_ADDR'];
					}
					$ip_city = $SxGeo->getCity($ip)['city']['name_ru'];
					$ip_region = $SxGeo->getCityFull($ip)['region']['name_ru'];
					$rev_geo_data = $this->config->get('revtheme_geo');
					$data['rev_geos'] = array();
					if (!empty($rev_geo_data)){
						foreach ($rev_geo_data as $rev_geo) {
							if ($ip_city == $rev_geo['city'] || $ip_region == $rev_geo['city']) {
								$data['rev_geos'][] = array(
									'code' => $rev_geo['code'],
									'text' => $rev_geo['text'][$this->config->get('config_language_id')]
								);
							}
						}
					}
					foreach ($data['rev_geos'] as $rev_geo) {
						if (strpos($information_info['description'], $rev_geo['code'])) {
							$data['description'] = html_entity_decode(str_replace($rev_geo['code'], $rev_geo['text'], $information_info['description']), ENT_QUOTES, 'UTF-8');
						}
					}
				}
				$data['logo'] = '';
				$data['logo_width'] = '120';
				$data['logo_height'] = '120';
				$data['microdata_author'] = $data['microdata_name'] = $this->config->get('config_name');
				$data['microdata_date_info'] = date('Y-m-d', filectime(DIR_APPLICATION . 'model/revolution/revolution.php'));
				$data['microdata_url_info'] = $this->url->link('information/information', 'information_id=' .  $information_id);
			]]></add>
		</operation>
	</file>
	<file path="catalog/controller/account/account.php">
		<operation>
			<search><![CDATA[if ($this->config->get('reward_status')) {]]></search>
			<add position="before"><![CDATA[
				$this->load->language('revolution/revolution');
				$data['text_account_account'] = $this->language->get('text_account_account');
			]]></add>
		</operation>
	</file>
	<file path="catalog/controller/module/*.php|catalog/controller/extension/module/*.php">
		<operation error="skip">
			<search><![CDATA[$this->document->addStyle('catalog/view/javascript/jquery/owl-carousel/owl.carousel.css');]]></search>
			<add position="replace"><![CDATA[]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$this->document->addScript('catalog/view/javascript/jquery/owl-carousel/owl.carousel.min.js');]]></search>
			<add position="replace"><![CDATA[]]></add>
		</operation>
	</file>
	<file path="system/library/cart.php|system/library/cart/cart.php">
		<operation error="skip">
			<search><![CDATA[$option_data = array();]]></search>
			<add position="before"><![CDATA[
				$option_price_pl = false;
				$option_price1 = 0;
				$option_weight2 = 0;
				$opt_image = false;
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[} elseif ($option_value_query->row['price_prefix'] == '-') {]]></search>
			<add position="before"><![CDATA[
				} elseif ($option_value_query->row['price_prefix'] == '=') {
					$option_price1 = $option_value_query->row['price'];
					$option_price_pl = true;
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$product_data[] = array(]]></search>
			<add position="before"><![CDATA[
				if ($option_price_pl) {
					$allprice = $option_price1 + $option_price;
				} else {
					$allprice = $price + $option_price;
				}
				if ($option_weight2) {
					$option_weight = $option_weight2 + $option_weight;
				} else {
					$option_weight = $product_query->row['weight'] + $option_weight;
				}
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[($price + $option_price)]]></search>
			<add position="replace"><![CDATA[$allprice]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[} elseif ($option_value_query->row['weight_prefix'] == '-') {]]></search>
			<add position="before"><![CDATA[
				} elseif ($option_value_query->row['weight_prefix'] == '=') {
					$option_weight2 = $option_value_query->row['weight'];
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[($product_query->row['weight'] + $option_weight)]]></search>
			<add position="replace"><![CDATA[$option_weight]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[pov.weight_prefix]]></search>
			<add position="replace"><![CDATA[pov.weight_prefix, pov.opt_image, pov.model]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$option_value_query->row['option_value_id'],]]></search>
			<add position="after"><![CDATA['opt_image' => $opt_image, 'model' => $option_value_query->row['model'],]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[if ($option_value_query->num_rows) {]]></search>
			<add position="after"><![CDATA[
				if($option_value_query->row['opt_image']) {
					$opt_image = $option_value_query->row['opt_image'];
				}
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[if ($option_query->row['type'] == 'select' || $option_query->row['type'] == 'radio') {]]></search>
			<add position="replace"><![CDATA[if ($option_query->row['type'] == 'select' || $option_query->row['type'] == 'radio' || $option_query->row['type'] == 'image') {]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$product_query->row['model'],]]></search>
			<add position="replace"><![CDATA[$product_query->row['model'], 'sku' => $product_query->row['sku'],]]></add>
		</operation>
	</file>
	<file path="catalog/controller/module/{featured,bestseller,latest,special}.php|catalog/controller/extension/module/{featured,bestseller,latest,special}.php">
		<operation error="skip">
			<search><![CDATA[$product_info]]></search>
			<add position="replace"><![CDATA[$result]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$this->language->get('heading_title');]]></search>
			<add position="replace"><![CDATA['<i class="fa fa-thumbs-o-up"></i>' . $this->language->get('heading_title');]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$this->load->model('catalog/product');]]></search>
			<add position="before"><![CDATA[
				$this->load->language('revolution/revolution');
				$data['revpopuporder_settings'] = $revpopuporder_settings = $this->config->get('revtheme_catalog_popuporder');
				$data['revpopuporder'] = $revpopuporder_settings['status'];
				$product_settings = $this->config->get('revtheme_product_all');
				$data['zakaz'] = $product_settings['zakaz'];
				$data['zakaz_price_null'] = $product_settings['zakaz_price_null'];
				$data['text_catalog_stiker_netu_2'] = $this->language->get('text_catalog_stiker_netu');
				$data['recalc_price'] = $product_settings['recalc_price'];
				$data['q_zavisimost'] = $product_settings['q_zavisimost'];
				$data['opt_price'] = $product_settings['opt_price'];
				$data['setting_catalog_all'] = $setting_catalog_all = $this->config->get('revtheme_catalog_all');
				$data['popup_view'] = $setting_catalog_all['popup_view'];
				$data['img_slider'] = $setting_catalog_all['img_slider'];
				$data['rev_srav_prod'] = $setting_catalog_all['rev_srav_prod'];
				$data['rev_wish_prod'] = $setting_catalog_all['rev_wish_prod'];
				$data['ch_quantity'] = $setting_catalog_all['ch_quantity'];
				$data['chislo_ryad'] = $setting_catalog_all['chislo_ryad'];
				$data['text_catalog_stiker_last'] = $this->language->get('text_catalog_stiker_last');
				$data['text_catalog_stiker_best'] = $this->language->get('text_catalog_stiker_best');
				$data['text_catalog_revpopup_purchase'] = $this->language->get('text_catalog_revpopup_purchase');
				$data['text_catalog_revpopup_view'] = $this->language->get('text_catalog_revpopup_view');
				$data['text_catalog_price_na_zakaz'] = $this->language->get('text_catalog_price_na_zakaz');
				$description_options = $this->config->get('revtheme_cat_attributes');
				$data['description_options'] = $this->config->get('revtheme_cat_attributes');
				$data['text_select'] = $this->language->get('text_select');
				$data['revtheme_product_all'] = $this->config->get('revtheme_product_all');
				$data['text_option_option'] = $this->language->get('text_option_option');
				$revtheme_home_all = $this->config->get('revtheme_home_all');
				$data['setting_img_width'] = $setting['width'];
				$revpopuppredzakaz_settings = $this->config->get('revtheme_predzakaz');
				$data['predzakaz_button'] = $revpopuppredzakaz_settings['status'];
				$data['text_predzakaz'] = $this->language->get('text_predzakaz');
				
				if (VERSION >= 2.2) {
					$config_image_popup_width = $this->config->get($this->config->get('config_theme') . '_image_popup_width');
					$config_image_popup_height = $this->config->get($this->config->get('config_theme') . '_image_popup_height');
					$config_image_product_width = $this->config->get($this->config->get('config_theme') . '_image_product_width');
					$config_image_product_height = $this->config->get($this->config->get('config_theme') . '_image_product_height');
					$currency = $this->session->data['currency'];
					$config_product_description_length = $this->config->get($this->config->get('config_theme') . '_product_description_length');
				} else {
					$config_image_popup_width = $this->config->get('config_image_popup_width');
					$config_image_popup_height = $this->config->get('config_image_popup_height');
					$config_image_product_width = $this->config->get('config_image_product_width');
					$config_image_product_height = $this->config->get('config_image_product_height');
					$currency = '';
					$config_product_description_length = $this->config->get('config_product_description_length');
				}
				$data['currency_code'] = $this->session->data['currency'];
				$var_currency = array();
				$var_currency['value'] = $this->currency->getValue($currency);
				$var_currency['symbol_left'] = $this->currency->getSymbolLeft($currency);
				$var_currency['symbol_right'] = $this->currency->getSymbolRight($currency);
				$var_currency['decimals'] = $this->currency->getDecimalPlace($currency);
				$var_currency['decimal_point'] = $this->language->get('decimal_point');
				$var_currency['thousand_point'] = $this->language->get('thousand_point');
				$data['currency'] = $var_currency;
				
				$this->load->model('revolution/revolution');
				$settings_stikers = $this->config->get('revtheme_catalog_stiker');
				if ($settings_stikers['status']) {
					$data['stikers_status'] = true;

					if ($settings_stikers['new_status']) {
						$settings_last = $this->config->get('revtheme_catalog_last');
						if ($settings_last['last_products'] != '') {
							$date_added = array_flip(explode(',', $settings_last['last_products']));
						} else {
							if ($settings_last['filter_day']) {
								$filter_day = date('Y-m-d H:i:s', strtotime('now - ' . $settings_last['filter_day'] . ' days'));
							} else {
								$filter_day = false;
							}
							$data_last = array(
								'sort'  => 'p.date_added',
								'order' => 'DESC',
								'start' => 0,
								'limit' => $settings_last['limit'],
								'filter_day' => $filter_day
								);
							$date_added = $this->model_revolution_revolution->getLastProducts($data_last);
						}
					}

					if ($settings_stikers['best_status']) {
						$settings_best = $this->config->get('revtheme_catalog_best');
						if ($settings_best['best_products'] != '') {
							$best_seller = array_flip(explode(',', $settings_best['best_products']));
						} else {
							$data_best = array(
								'sort'  => 'p.sales',
								'order' => 'DESC',
								'start' => 0,
								'limit' => $settings_best['limit'],
								'filter_buy' => $settings_best['filter_buy']
							);
							$best_seller = $this->model_revolution_revolution->getBestProducts($data_best);
						}
					}
				} else {
					$data['stikers_status'] = false;
				}
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$price = $this]]></search>
			<add position="before"><![CDATA[$price_number = round($result['price'], 2);]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$price = false;]]></search>
			<add position="before"><![CDATA[$price_number = false;]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$special = $this]]></search>
			<add position="before"><![CDATA[$special_number = $result['special'];]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$special = false;]]></search>
			<add position="before"><![CDATA[$special_number = false;]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$data['products'][] = array(]]></search>
			<add position="before"><![CDATA[
				if (isset($this->session->data['compare'])) {
				if (in_array($result['product_id'], $this->session->data['compare'])) {
					$compare_class = 'in_compare';
					$button_compare = $this->language->get('button_compare_out');
				} else {
					$compare_class = '';
					$button_compare = $this->language->get('button_compare');
				}
				} else {
					$compare_class = '';
					$button_compare = $this->language->get('button_compare');
				}
				if (isset($this->session->data['wishlist'])) {
					if (in_array($result['product_id'], $this->session->data['wishlist'])) {
						$wishlist_class = 'in_wishlist';
						$button_wishlist = $this->language->get('button_wishlist_out');
					} else {
						$wishlist_class = '';
						$button_wishlist = $this->language->get('button_wishlist');
					}
				} else {
					$wishlist_class = '';
					$button_wishlist = $this->language->get('button_wishlist');
				}
				if ($this->customer->isLogged()) {
					$this->load->model('account/wishlist');
					$wishlist_register = $this->model_account_wishlist->getWishlist();
					if ($wishlist_register) {
						$wishlist_register2 = array();
						foreach ($wishlist_register as $result_wishlist_register_id) {
							$wishlist_register_id[] = $result_wishlist_register_id['product_id'];
						}
						if (in_array($result['product_id'], $wishlist_register_id)) {
							$wishlist_class = 'in_wishlist';
							$button_wishlist = $this->language->get('button_wishlist_out');
						} else {
							$wishlist_class = '';
							$button_wishlist = $this->language->get('button_wishlist');
						}
					}
				}
				
				if ($settings_stikers['new_status']) {
					if (isset($date_added[$result['product_id']])) {
						$stiker_last = true;
					} else {
						$stiker_last = false;
					}
				} else {
					$stiker_last = false;
				}
				
				if ($settings_stikers['best_status']) {
					if (isset($best_seller[$result['product_id']])) {
						$stiker_best = true;	
					} else {
						$stiker_best = false;
					}
				} else {
					$stiker_best = false;
				}
				
				if ($settings_stikers['spec_status']) {
					$stiker_spec = true;
				} else {
					$stiker_spec = false;
				}
				
				if ($settings_stikers['stock_status']) {
					$stiker_stock = true;
				} else {
					$stiker_stock = false;
				}
				
				if ($settings_stikers['upc']) {
					$stiker_upc = $result['upc'];
				} else {
					$stiker_upc = false;
				}
				if ($settings_stikers['ean']) {
					$stiker_ean = $result['ean'];
				} else {
					$stiker_ean = false;
				}
				if ($settings_stikers['jan']) {
					$stiker_jan = $result['jan'];
				} else {
					$stiker_jan = false;
				}
				if ($settings_stikers['isbn']) {
					$stiker_isbn = $result['isbn'];
				} else {
					$stiker_isbn = false;
				}
				if ($settings_stikers['mpn']) {
					$stiker_mpn = $result['mpn'];
				} else {
					$stiker_mpn = false;
				}
				if ($settings_stikers['stiker_netu_stock']) {
					$text_catalog_stiker_netu = $result['stock_status'];
				} else {
					$text_catalog_stiker_netu = $this->language->get('text_catalog_stiker_netu');
				}
				if ($settings_stikers['sklad_status']) {
					$stiker_sklad_status = $result['stock_status'];
				} else {
					$stiker_sklad_status = false;
				}
			
				$brand = $this->model_revolution_revolution->get_pr_brand($result['product_id']);
				
				$description = '';
				$options = false;
				if ($description_options['description_on']) {
					if ($description_options['zamena_description']) {
						$description = $this->model_revolution_revolution->getAttrText($result['product_id']);
					} else {
						$description = utf8_substr(strip_tags(html_entity_decode($result['description'], ENT_QUOTES, 'UTF-8')), 0, $config_product_description_length) . '...';
					}
				}
					
				if ($description_options['options_in_grid']) {
					$options = array();
					$pr_options = $this->model_catalog_product->getProductOptions($result['product_id']);
				
					foreach ($pr_options as $option) {
						$product_option_value_data = array();

						foreach ($option['product_option_value'] as $option_value) {
							if (!$option_value['subtract'] || ($option_value['quantity'] > 0)) {
								if ((($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) && (float)$option_value['price']) {
									$option_price = $this->currency->format($this->tax->calculate($option_value['price'], $result['tax_class_id'], $this->config->get('config_tax') ? 'P' : false), $currency);
								} else {
									$option_price = false;
								}

								if ($option_value['price_prefix'] == '=') {
									$price_prefix = '';
								} else {
									$price_prefix = $option_value['price_prefix'];
								}
								
								$product_option_value_data[] = array(
									'product_option_value_id' => $option_value['product_option_value_id'],
									'quantity'            	  => $option_value['quantity'],
									'model'            	  	  => $option_value['model'],
									'option_value_id'         => $option_value['option_value_id'],
									'name'                    => $option_value['name'],
									'image'                   => $option_value['image'] ? $this->model_tool_image->resize($option_value['image'], 50, 50) : '',
									'price'                   => $option_price,
									'price_prefix'            => $price_prefix
								);
							}
						}

						$options[] = array(
							'product_option_id'    => $option['product_option_id'],
							'product_option_value' => $product_option_value_data,
							'option_id'            => $option['option_id'],
							'name'                 => $option['name'],
							'type'                 => $option['type'],
							'value'                => $option['value'],
							'required'             => $option['required'],
							'opt_image'            => $option['opt_image']
						);
					}
				}
				$product_in_cart = false;
				if ($setting_catalog_all['product_in_cart']) {
					$products_in_cart = $this->cart->getProducts();
					foreach ($products_in_cart as $product_cart) {
						if ($product_cart['product_id'] == $result['product_id']) {
							$product_in_cart = true;
						}
					}
				}
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$image = $this->model_tool_image->resize($result['image']]]></search>
			<add position="before"><![CDATA[
				$images = array();
				$this->load->model('catalog/product');
				$add_images = $this->model_catalog_product->getProductImages($result['product_id']);
				foreach ($add_images as $add_image) {
					$images[] = array(
						'thumb' => $this->model_tool_image->resize($add_image['image'], $setting['width'], $setting['height'])
					);
				}
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$image = $this->model_tool_image->resize('placeholder]]></search>
			<add position="before"><![CDATA[$images = false;]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$data['products'][] = array(]]></search>
			<add position="after"><![CDATA[
				'price_number' => $price_number,
				'special_number' => $special_number,
				'compare_class' => $compare_class,
				'wishlist_class' => $wishlist_class,
				'button_compare' => $button_compare,
				'button_wishlist' => $button_wishlist,
				'stiker_last' => $stiker_last,
				'stiker_best' => $stiker_best,
				'stiker_spec' => $stiker_spec,
				'stiker_stock' => $stiker_stock,
				'stiker_sklad_status' => $stiker_sklad_status,
				'stiker_upc' => $stiker_upc,
				'stiker_ean' => $stiker_ean,
				'stiker_jan' => $stiker_jan,
				'stiker_isbn' => $stiker_isbn,
				'stiker_mpn' => $stiker_mpn,
				'text_catalog_stiker_netu' => $text_catalog_stiker_netu,
				'brand' => $brand,
				'images' => $images,
				'options_buy' => $result['options_buy'],
				'model' => $result['model'],
				'short_description' => nl2br($result['short_description']),
				'product_in_cart' => $product_in_cart,
				'options' => $options,
				'quantity' => $result['quantity'],
				'minimum' => $result['minimum'] > 0 ? $result['minimum'] : 1,
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$tax,]]></search>
			<add position="after"><![CDATA['description' => $description,]]></add>
		</operation>
	</file>
	<file path="system/library/pagination.php">
		<operation error="skip">
			<search><![CDATA[$output .= '<li><a href="' . str_replace(array('&amp;page={page}', '&page={page}'), '', $this->url) . '">' . $this->text_first . '</a></li>';]]></search>
			<add position="replace"><![CDATA[$output .= '<li><a href="' . str_replace(array('&amp;page={page}', '?page={page}', '&page={page}'), '', $this->url) . '">' . $this->text_first . '</a></li>';]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$output .= '<li><a href="' . str_replace(array('&amp;page={page}', '&page={page}'), '', $this->url) . '">' . $this->text_prev . '</a></li>';]]></search>
			<add position="replace"><![CDATA[$output .= '<li><a href="' . str_replace(array('&amp;page={page}', '?page={page}', '&page={page}'), '', $this->url) . '">' . $this->text_prev . '</a></li>';]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$output .= '<li><a href="' . str_replace(array('&amp;page={page}', '&page={page}'), '', $this->url) . '">' . $i . '</a></li>';]]></search>
			<add position="replace"><![CDATA[$output .= '<li><a href="' . str_replace(array('&amp;page={page}', '?page={page}', '&page={page}'), '', $this->url) . '">' . $i . '</a></li>';]]></add>
		</operation>
	</file>
	<file path="admin/model/tool/image.php|catalog/model/tool/image.php">
		<operation error="skip">
			<search><![CDATA[if (!in_array($image_type, array(IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF))) {]]></search>
			<add position="replace"><![CDATA[
				$iimmgg = getimagesize(DIR_IMAGE . $image_old);
				if (!in_array($image_type, array(IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF))  && (isset($iimmgg['mime']) && ($iimmgg['mime'] != 'image/svg+xml'))) { 
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[if ($width_orig != $width || $height_orig != $height) {]]></search>
			<add position="replace"><![CDATA[if (($width_orig != $width || $height_orig != $height) && isset($width_orig)) {]]></add>
		</operation>
	</file>
	<file path="catalog/model/tool/image.php">
		<operation error="skip">
			<search><![CDATA[copy(DIR_IMAGE . $image_old, DIR_IMAGE . $image_new);]]></search>
			<add position="after" offset="1"><![CDATA[
				$this->load->model('revolution/revolution');
				$this->model_revolution_revolution->revwatermark($image_old, $image_new);
			]]></add>
		</operation>
	</file>
	<file path="system/library/image.php">
		<operation error="skip">
			<search><![CDATA[$this->image = imagecreatefromjpeg($file);]]></search>
			<add position="after"><![CDATA[} elseif ($this->mime == 'image/svg+xml') { $this->image = $file;]]></add>
		</operation>
	</file>
	<file path="admin/controller/common/filemanager.php">
		<operation error="skip">
			<search><![CDATA[$files = glob($directory . '/' . $filter_name . '*.{jpg,jpeg,png,gif,JPG,JPEG,PNG,GIF}', GLOB_BRACE);]]></search>
			<add position="replace"><![CDATA[$files = glob($directory . '/' . $filter_name . '*.{jpg,jpeg,png,gif,svg,JPG,JPEG,PNG,GIF,SVG}', GLOB_BRACE);]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA['png']]></search>
			<add position="before"><![CDATA['svg',]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA['image/gif']]></search>
			<add position="before"><![CDATA['image/svg+xml',]]></add>
		</operation>
	</file>
	<file path="catalog/language/{ru-ru,russian}/*/*.php">
		<operation error="skip">
			<search><![CDATA[Мною прочитаны и я даю согласие с документом]]></search>
			<add position="replace"><![CDATA[Ознакомлен и согласен с текстом]]></add>
		</operation>
	</file>
	<file path="catalog/controller/common/column_left.php">
		<operation error="skip">
			<search><![CDATA[foreach ($modules as $module) {]]></search>
			<add position="before"><![CDATA[
				if ($route == 'product/category' && isset($this->request->get['path'])) {
					$parts = explode('_', (string)$this->request->get['path']);
					$category_id = (int)array_pop($parts);
					$setting = $this->config->get('revtheme_filter');
					$filter_data = array(
						'filter_category_id' => $category_id,
						'filter_sub_category' => false
					);
					$this->load->model('catalog/product');
					$product_total = $this->model_catalog_product->getTotalProducts($filter_data);
					if ((!isset($setting['filter_categories']) || (!in_array($category_id, $setting['filter_categories']))) && $product_total > 1) {
						$revfilter = $this->config->get('revtheme_filter');
						if ($revfilter['status']) {
							$data['modules'][] = $this->load->controller('revolution/revfilter');
						}
					}
				}
			]]></add>
		</operation>
	</file>
	<file path="catalog/controller/startup/startup.php">
		<operation error="skip">
			<search><![CDATA[$this->registry->set('url']]></search>
			<add position="after"><![CDATA[$this->url->addRewrite(new revolution\rewriteurl($this->config));]]></add>
		</operation>
	</file>
	<file path="catalog/controller/module/account.php|catalog/controller/extension/module/account.php">
		<operation error="skip">
			<search><![CDATA[public function index]]></search>
			<add position="after"><![CDATA[
				if ($this->config->get('revtheme_all_settings')['revregister_status']) {
					$data = array();
					$data = $this->load->controller('revolution/account/revaccountmod');
					if (VERSION >= 2.2) {
						return $this->load->view('revolution/account/revaccountmod', $data);
					} else {
						return $this->load->view('revolution/template/revolution/account/revaccountmod.tpl', $data);
					}
				}
			]]></add>
		</operation>
	</file>
	<file path="catalog/model/account/order.php">
		<operation error="skip">
			<search><![CDATA[("SELECT * FROM " . DB_PREFIX . "order_product op LEFT JOIN " . DB_PREFIX . "product p ON op.product_id = p.product_id WHERE order_id = '" . (int)$order_id . "'")]]></search>
			<add position="replace"><![CDATA[("SELECT *, op.quantity as quantity, op.price as price FROM " . DB_PREFIX . "order_product op LEFT JOIN " . DB_PREFIX . "product p ON op.product_id = p.product_id WHERE order_id = '" . (int)$order_id . "'")]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$order_query->row['order_id'],]]></search>
			<add position="replace"><![CDATA[$order_query->row['order_id'], 'shipping_code' => $order_query->row['shipping_code'],]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[SELECT * FROM " . DB_PREFIX . "order_option WHERE order_id = '" . (int)$order_id . "' AND order_product_id = '" . (int)$order_product_id . "']]></search>
			<add position="replace"><![CDATA[SELECT oo.*, pov.model, pov.opt_image FROM " . DB_PREFIX . "order_option oo LEFT JOIN " . DB_PREFIX . "product_option_value pov ON oo.product_option_id = pov.product_option_id WHERE order_id = '" . (int)$order_id . "' AND order_product_id = '" . (int)$order_product_id . "']]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA["SELECT * FROM " . DB_PREFIX . "order_product WHERE order_id = '" . (int)$order_id . "'"]]></search>
			<add position="replace"><![CDATA["SELECT op.*, p.image, p.sku FROM " . DB_PREFIX . "order_product op LEFT JOIN " . DB_PREFIX . "product p ON op.product_id = p.product_id WHERE order_id = '" . (int)$order_id . "'"]]></add>
		</operation>
	</file>
	<file path="catalog/controller/account/order.php">
		<operation error="skip">
			<search><![CDATA[public function info]]></search>
			<add position="after"><![CDATA[
				$this->load->language('revolution/revolution');
				$data['text_rev_order_prods'] = $this->language->get('text_rev_order_prods');
				$data['text_rev_order_detals'] = $this->language->get('text_rev_order_detals');
				$data['text_rev_order_history'] = $this->language->get('text_rev_order_history');
				$data['text_rev_order_comment'] = $this->language->get('text_rev_order_comment');
				$data['column_sku'] = $this->language->get('column_sku');
				$data['column_image'] = $this->language->get('text_rev_order_image');
				$settings = $data['settings'] = $this->config->get('revtheme_all_settings');
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[public function index]]></search>
			<add position="after"><![CDATA[
				$this->load->language('revolution/revolution');
				$data['text_rev_text_order'] = $this->language->get('text_rev_text_order');
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$product['model'],]]></search>
			<add position="replace"><![CDATA[$product['model'], 'sku' => $product['sku'],]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA['text' => $this->language->get('heading_title'),]]></search>
			<add position="replace"><![CDATA['text' => $this->language->get('text_rev_text_order'),]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$this->document->setTitle($this->language->get('text_order'));]]></search>
			<add position="replace"><![CDATA[$this->document->setTitle($this->language->get('text_order').' '.$order_id);]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$this->document->setTitle($this->language->get('heading_title'));]]></search>
			<add position="replace"><![CDATA[$this->document->setTitle($this->language->get('text_rev_text_order'));]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$data['shipping_address']]]></search>
			<add position="before"><![CDATA[
				if ($settings['revcheckout_status']) {
					if ($order_info['shipping_city'] != '' || $order_info['shipping_address_1'] != '') {
						$simbol = '';
						$country_name = '';
						if ($order_info['shipping_country'] != '' && $order_info['shipping_country_id'] != '176') {
							$simbol = ', ';
							$country_name = $order_info['shipping_country'];
						}
						$simbol2 = '';
						if ($order_info['shipping_address_1'] != '' && $order_info['shipping_city'] != '') {
							$simbol2 = ', ';
						}
						$format = '{firstname} {lastname}' . "\n" . '{company}' . "\n" . '{postcode}' . "\n" . $country_name . $simbol . '{zone}' . "\n" . '{city}' .  $simbol2 . '{address_1}' . "\n" . '{address_2}' . "\n";
					} else {
						$format = '';
					}
				}
				$this->load->model('tool/image');
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$data['shipping_address']]]></search>
			<add position="after"><![CDATA[
				if ($settings['revcheckout_status']) {
					$shipping_payment = array();
					$shipping_payment = $this->config->get('revtheme_revcheckoutshippay');
					$session_shipping_methods = preg_replace('/\..+$/','',$order_info['shipping_code']);
					if (isset($shipping_payment)) {
						if ($session_shipping_methods && !in_array('adres_on', $shipping_payment[$session_shipping_methods])) {
							$data['shipping_address'] = '';
						}
					}
				}
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$option_data = array();]]></search>
			<add position="after"><![CDATA[
				if ($product['image']) {
					$image = $this->model_tool_image->resize($product['image'], 50, 50);
				} else {
					$image = $this->model_tool_image->resize('no_image.png', 50, 50);
				}
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$option_data[]]]></search>
			<add position="before"><![CDATA[
				if (isset($option['opt_image'])) {
					if ($option['opt_image']) {
						$image = $this->model_tool_image->resize($option['opt_image'], 50,  50);
					} else {
						if ($product['image']) {
							$image = $this->model_tool_image->resize($product['image'], 50, 50);
						} else {
							$image = $this->model_tool_image->resize('no_image.png', 50, 50);
						}
					}
				} else {
					if ($product['image']) {
						$image = $this->model_tool_image->resize($product['image'], 50, 50);
					} else {
						$image = $this->model_tool_image->resize('no_image.png', 50, 50);
					}
				}
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$option_data[]]]></search>
			<add position="after"><![CDATA['model' => (isset($option['model']) ? $option['model'] : false),]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$product['model'],]]></search>
			<add position="replace"><![CDATA[$product['model'], 'sku' => $product['sku'], 'image' => $image, 'href' => $this->url->link('product/product', 'product_id=' . $product['product_id']),]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[(utf8_strlen($value) > 20 ? utf8_substr($value, 0, 20) . '..' : $value)]]></search>
			<add position="replace"><![CDATA[(utf8_strlen($value) > 50 ? utf8_substr($value, 0, 50) . '..' : $value)]]></add>
		</operation>
	</file>
	<file path="catalog/controller/account/download.php">
		<operation error="skip">
			<search><![CDATA[public function index]]></search>
			<add position="after"><![CDATA[
				$this->load->language('revolution/revolution');
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$this->language->get('heading_title')]]></search>
			<add position="replace"><![CDATA[$this->language->get('text_rev_text_download')]]></add>
		</operation>
	</file>
	<file path="catalog/controller/account/forgotten.php">
		<operation error="skip">
			<search><![CDATA[public function index]]></search>
			<add position="after"><![CDATA[
				$this->load->language('revolution/revolution');
				$data['forgotten_butten'] = $this->language->get('forgotten_butten');
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$this->language->get('text_email')]]></search>
			<add position="replace"><![CDATA[$this->language->get('text_rev_account_text_email')]]></add>
		</operation>
	</file>
	<file path="catalog/controller/checkout/success.php">
		<operation error="skip">
			<search><![CDATA[$data['continue']]]></search>
			<add position="before"><![CDATA[
				if (isset($this->config->get('revtheme_all_settings')['revregister_status']) && $this->config->get('revtheme_all_settings')['revregister_status']) {
					$this->load->language('revolution/revolution');
					if ($this->customer->isLogged()) {
						if (isset($this->config->get('revtheme_all_settings')['revaccount_files']) && !$this->config->get('revtheme_all_settings')['revaccount_files']) {
							$data['text_message'] = sprintf($this->language->get('text_rev_success_customer_2'), $this->url->link('account/account', '', true), $this->url->link('information/contact'));
						} else {
							$data['text_message'] = sprintf($this->language->get('text_rev_success_customer'), $this->url->link('account/account', '', true), $this->url->link('account/download', '', true), $this->url->link('information/contact'));
						}
					} else {
						$data['text_message'] = sprintf($this->language->get('text_rev_success_guest'), $this->url->link('information/contact'));
					}
				}
			]]></add>
		</operation>
	</file>
	<file path="catalog/model/checkout/order.php">
		<operation error="skip">
			<search><![CDATA[$data['shipping_address']]]></search>
			<add position="before"><![CDATA[
				$settings = $data['settings'] = $this->config->get('revtheme_all_settings');
				$this->load->language('revolution/revolution');
				$data['text_date_added'] = $this->language->get('text_rev_order_date_added');
				$data['text_sku'] = $this->language->get('column_sku');
				$data['text_image'] = $this->language->get('text_rev_order_image');
				$data['text_footer'] = $this->language->get('text_rev_order_footer');
				$data['text_rev_order_prods'] = $this->language->get('text_rev_order_prods');
				$data['text_rev_order_detals'] = $this->language->get('text_rev_order_detals');
				$data['text_rev_order_history'] = $this->language->get('text_rev_order_history');
				$data['text_rev_order_comment'] = $this->language->get('text_rev_order_comment');
				if ($settings['revcheckout_status']) {
					if ($settings['revregister_status']) {
						$data['text_greeting'] = $this->language->get('text_rev_mail_new_greeting');
						if ($order_info['customer_id']) {
							$data['text_link'] = '';
							if ($settings['revaccount_orders']) {
								$data['text_link'] = sprintf($this->language->get('text_rev_mail_new_link'), $order_info['store_url'] . 'index.php?route=account/order/info&order_id=' . $order_id);
							}
						}
						if ($download_status) {
							$data['text_download'] = '';
							if ($settings['revaccount_files']) {
								$data['text_download'] = sprintf($this->language->get('text_rev_mail_new_download'), $order_info['store_url'] . 'index.php?route=account/download');
							}
						}
					}
					if ($order_info['shipping_city'] != '' || $order_info['shipping_address_1'] != '') {
						$simbol = '';
						$country_name = '';
						if ($order_info['shipping_country'] != '' && $order_info['shipping_country_id'] != '176') {
							$simbol = ', ';
							$country_name = $order_info['shipping_country'];
						}
						$simbol2 = '';
						if ($order_info['shipping_address_1'] != '' && $order_info['shipping_city'] != '') {
							$simbol2 = ', ';
						}
						$format = '{firstname} {lastname}' . "\n" . '{company}' . "\n" . '{postcode}' . "\n" . $country_name . $simbol . '{zone}' . "\n" . '{city}' .  $simbol2 . '{address_1}' . "\n" . '{address_2}' . "\n";
					} else {
						$format = '';
					}
				}
				$this->load->model('tool/image');
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$data['shipping_address']]]></search>
			<add position="after"><![CDATA[
				if ($settings['revcheckout_status']) {
					$shipping_payment = array();
					$shipping_payment = $this->config->get('revtheme_revcheckoutshippay');
					$session_shipping_methods = preg_replace('/\..+$/','',$order_info['shipping_code']);
					if (isset($shipping_payment)) {
						if ($session_shipping_methods && !in_array('adres_on', $shipping_payment[$session_shipping_methods])) {
							$data['shipping_address'] = '';
						}
					}
				}
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$order_product_query =]]></search>
			<add position="after"><![CDATA[
				$order_product_query = $this->db->query("SELECT *, op.quantity as quantity, op.price as price FROM " . DB_PREFIX . "order_product op LEFT JOIN " . DB_PREFIX . "product p ON op.product_id = p.product_id WHERE op.order_id = '" . (int)$order_id . "'");
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$option_data = array();]]></search>
			<add position="after"><![CDATA[
				if ($product['image']) {
					$image = $this->model_tool_image->resize($product['image'], 50, 50);
				} else {
					$image = $this->model_tool_image->resize('no_image.png', 50, 50);
				}
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$option_data[]]]></search>
			<add position="before"><![CDATA[
				if (isset($option['opt_image'])) {
					if ($option['opt_image']) {
						$image = $this->model_tool_image->resize($option['opt_image'], 50,  50);
					} else {
						if ($product['image']) {
							$image = $this->model_tool_image->resize($product['image'], 50, 50);
						} else {
							$image = $this->model_tool_image->resize('no_image.png', 50, 50);
						}
					}
				} else {
					if ($product['image']) {
						$image = $this->model_tool_image->resize($product['image'], 50, 50);
					} else {
						$image = $this->model_tool_image->resize('no_image.png', 50, 50);
					}
				}
			]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$option_data[]]]></search>
			<add position="after"><![CDATA['model' => (isset($option['model']) ? $option['model'] : false),]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[$product['model'],]]></search>
			<add position="replace"><![CDATA[$product['model'], 'sku' => $product['sku'], 'image' => $image, 'href' => $this->url->link('product/product', 'product_id=' . $product['product_id']),]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[(utf8_strlen($value) > 20 ? utf8_substr($value, 0, 20) . '..' : $value)]]></search>
			<add position="replace"><![CDATA[(utf8_strlen($value) > 40 ? utf8_substr($value, 0, 40) . '..' : $value)]]></add>
		</operation>
		<operation error="skip">
			<search><![CDATA[("SELECT * FROM " . DB_PREFIX . "order_option WHERE order_id = '" . (int)$order_id . "' AND order_product_id = '" . (int)$product['order_product_id'] . "'")]]></search>
			<add position="replace"><![CDATA[("SELECT * FROM " . DB_PREFIX . "order_option oo LEFT JOIN " . DB_PREFIX . "product_option_value pov ON oo.product_option_id = pov.product_option_id WHERE order_id = '" . (int)$order_id . "' AND order_product_id = '" . (int)$product['order_product_id'] . "' GROUP BY oo.order_id")]]></add>
		</operation>
	</file>
	
</modification>